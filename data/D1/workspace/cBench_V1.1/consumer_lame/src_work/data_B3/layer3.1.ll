; ModuleID = 'layer3.ll'
source_filename = "layer3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bandInfoStruct = type { [23 x i16], [22 x i16], [14 x i16], [13 x i16] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.newhuff = type { i32, i16* }
%struct.mpstr = type { %struct.buf*, %struct.buf*, i32, i32, i32, %struct.frame, [2 x [2304 x i8]], [2 x [2 x [576 x double]]], [2 x i32], i64, i32, [2 x [2 x [272 x double]]], i32 }
%struct.buf = type { i8*, i64, i64, %struct.buf*, %struct.buf* }
%struct.frame = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.III_sideinfo = type { i32, i32, [2 x %struct.anon] }
%struct.anon = type { [2 x %struct.gr_info_s] }
%struct.gr_info_s = type { i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, [3 x double*], double* }

@bandInfo = global [9 x %struct.bandInfoStruct] [%struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 52, i16 62, i16 74, i16 90, i16 110, i16 134, i16 162, i16 196, i16 238, i16 288, i16 342, i16 418, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 28, i16 34, i16 42, i16 50, i16 54, i16 76, i16 158], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 120, i16 156, i16 198, i16 252, i16 318, i16 408, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 22, i16 30, i16 56] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 42, i16 50, i16 60, i16 72, i16 88, i16 106, i16 128, i16 156, i16 190, i16 230, i16 276, i16 330, i16 384, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 18, i16 22, i16 28, i16 34, i16 40, i16 46, i16 54, i16 54, i16 192], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 84, i16 114, i16 150, i16 192, i16 240, i16 300, i16 378, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 10, i16 12, i16 14, i16 16, i16 20, i16 26, i16 66] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 82, i16 102, i16 126, i16 156, i16 194, i16 240, i16 296, i16 364, i16 448, i16 550, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 30, i16 38, i16 46, i16 56, i16 68, i16 84, i16 102, i16 26], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 126, i16 174, i16 234, i16 312, i16 414, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 12, i16 16, i16 20, i16 26, i16 34, i16 42, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 72, i16 96, i16 126, i16 168, i16 222, i16 300, i16 396, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 14, i16 18, i16 26, i16 32, i16 42, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 114, i16 136, i16 162, i16 194, i16 232, i16 278, i16 332, i16 394, i16 464, i16 540, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 18, i16 22, i16 26, i16 32, i16 38, i16 46, i16 52, i16 64, i16 70, i16 76, i16 36], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 408, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 32, i16 44, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 60, i16 72, i16 88, i16 108, i16 132, i16 160, i16 192, i16 232, i16 280, i16 336, i16 400, i16 476, i16 566, i16 568, i16 570, i16 572, i16 574, i16 576], [22 x i16] [i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 16, i16 20, i16 24, i16 28, i16 32, i16 40, i16 48, i16 56, i16 64, i16 76, i16 90, i16 2, i16 2, i16 2, i16 2, i16 2], [14 x i16] [i16 0, i16 24, i16 48, i16 72, i16 108, i16 156, i16 216, i16 288, i16 372, i16 480, i16 486, i16 492, i16 498, i16 576], [13 x i16] [i16 8, i16 8, i16 8, i16 12, i16 16, i16 20, i16 24, i16 28, i16 36, i16 2, i16 2, i16 2, i16 26] }], align 16
@gainpow2 = internal global [378 x double] zeroinitializer, align 16
@ispow = internal unnamed_addr global [8207 x double] zeroinitializer, align 16
@init_layer3.Ci = internal unnamed_addr constant [8 x double] [double -6.000000e-01, double -5.350000e-01, double -3.300000e-01, double -1.850000e-01, double -9.500000e-02, double -4.100000e-02, double -1.420000e-02, double -3.700000e-03], align 16
@aa_cs = internal global [8 x double] zeroinitializer, align 16
@aa_ca = internal global [8 x double] zeroinitializer, align 16
@win = internal global [4 x [36 x double]] zeroinitializer, align 16
@COS9 = internal global [9 x double] zeroinitializer, align 16
@tfcos36 = internal unnamed_addr global [9 x double] zeroinitializer, align 16
@tfcos12 = internal unnamed_addr global [3 x double] zeroinitializer, align 16
@COS6_1 = internal unnamed_addr global double 0.000000e+00, align 8
@COS6_2 = internal unnamed_addr global double 0.000000e+00, align 8
@init_layer3.len = internal unnamed_addr constant [4 x i32] [i32 36, i32 36, i32 12, i32 36], align 16
@win1 = internal global [4 x [36 x double]] zeroinitializer, align 16
@tan1_1 = internal global [16 x double] zeroinitializer, align 16
@tan2_1 = internal global [16 x double] zeroinitializer, align 16
@tan1_2 = internal global [16 x double] zeroinitializer, align 16
@tan2_2 = internal global [16 x double] zeroinitializer, align 16
@pow1_1 = internal global [2 x [16 x double]] zeroinitializer, align 16
@pow2_1 = internal global [2 x [16 x double]] zeroinitializer, align 16
@pow1_2 = internal global [2 x [16 x double]] zeroinitializer, align 16
@pow2_2 = internal global [2 x [16 x double]] zeroinitializer, align 16
@mapbuf0 = internal global [9 x [152 x i32]] zeroinitializer, align 16
@map = internal unnamed_addr global [9 x [3 x i32*]] zeroinitializer, align 16
@mapend = internal unnamed_addr global [9 x [3 x i32*]] zeroinitializer, align 16
@mapbuf1 = internal global [9 x [156 x i32]] zeroinitializer, align 16
@mapbuf2 = internal global [9 x [44 x i32]] zeroinitializer, align 16
@longLimit = common local_unnamed_addr global [9 x [23 x i32]] zeroinitializer, align 16
@shortLimit = common local_unnamed_addr global [9 x [14 x i32]] zeroinitializer, align 16
@i_slen2 = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@n_slen2 = internal unnamed_addr global [512 x i32] zeroinitializer, align 16
@do_layer3.hybridIn = internal global [2 x [32 x [18 x double]]] zeroinitializer, align 16
@do_layer3.hybridOut = internal global [2 x [18 x [32 x double]]] zeroinitializer, align 16
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [23 x i8] c"big_values too large!\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"Blocktype == 0 and window-switching == 1 not allowed.\0A\00", align 1
@wordpointer = external local_unnamed_addr global i8*, align 8
@bitindex = external local_unnamed_addr global i32, align 4
@III_get_scale_factors_2.stab = internal global [3 x [6 x [4 x i8]]] [[6 x [4 x i8]] [[4 x i8] c"\06\05\05\05", [4 x i8] c"\06\05\07\03", [4 x i8] c"\0B\0A\00\00", [4 x i8] c"\07\07\07\00", [4 x i8] c"\06\06\06\03", [4 x i8] c"\08\08\05\00"], [6 x [4 x i8]] [[4 x i8] c"\09\09\09\09", [4 x i8] c"\09\09\0C\06", [4 x i8] c"\12\12\00\00", [4 x i8] c"\0C\0C\0C\00", [4 x i8] c"\0C\09\09\06", [4 x i8] c"\0F\0C\09\00"], [6 x [4 x i8]] [[4 x i8] c"\06\09\09\09", [4 x i8] c"\06\09\0C\06", [4 x i8] c"\0F\12\00\00", [4 x i8] c"\06\0F\0C\00", [4 x i8] c"\06\0C\09\06", [4 x i8] c"\06\12\09\00"]], align 16
@ht = internal global [32 x %struct.newhuff] [%struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([7 x i16], [7 x i16]* @tab1, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([17 x i16], [17 x i16]* @tab2, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([17 x i16], [17 x i16]* @tab3, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab5, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab6, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab7, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab8, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab9, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab10, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab11, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab12, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab13, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab15, i32 0, i32 0) }, %struct.newhuff { i32 1, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 2, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 3, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 4, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 6, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 8, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 10, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 13, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 4, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 5, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 6, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 7, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 8, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 9, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 11, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 13, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }], align 16
@htc = internal global [2 x %struct.newhuff] [%struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab_c0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab_c1, i32 0, i32 0) }], align 16
@pretab1 = internal global [22 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2, i32 0], align 16
@pretab2 = internal global [22 x i32] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [41 x i8] c"mpg123: Can't rewind stream by %d bits!\0A\00", align 1
@tab0 = internal global [1 x i16] zeroinitializer, align 2
@tab1 = internal global [7 x i16] [i16 -5, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 2
@tab2 = internal global [17 x i16] [i16 -15, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab3 = internal global [17 x i16] [i16 -13, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 16, i16 17, i16 -1, i16 1, i16 0], align 16
@tab5 = internal global [31 x i16] [i16 -29, i16 -25, i16 -23, i16 -15, i16 -7, i16 -5, i16 -3, i16 -1, i16 51, i16 35, i16 50, i16 49, i16 -3, i16 -1, i16 19, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab6 = internal global [31 x i16] [i16 -25, i16 -19, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 51, i16 3, i16 35, i16 -1, i16 50, i16 48, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -3, i16 -1, i16 33, i16 32, i16 1, i16 -1, i16 17, i16 -1, i16 16, i16 0], align 16
@tab7 = internal global [71 x i16] [i16 -69, i16 -65, i16 -57, i16 -39, i16 -29, i16 -17, i16 -11, i16 -7, i16 -3, i16 -1, i16 85, i16 69, i16 -1, i16 84, i16 83, i16 -1, i16 53, i16 68, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 5, i16 52, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -5, i16 -3, i16 -1, i16 36, i16 66, i16 20, i16 -1, i16 65, i16 64, i16 -11, i16 -7, i16 -3, i16 -1, i16 4, i16 35, i16 -1, i16 50, i16 3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 48, i16 34, i16 18, i16 -5, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab8 = internal global [71 x i16] [i16 -65, i16 -63, i16 -59, i16 -45, i16 -31, i16 -19, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 85, i16 84, i16 69, i16 83, i16 -3, i16 -1, i16 53, i16 68, i16 37, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 80, i16 51, i16 36, i16 -5, i16 -3, i16 -1, i16 66, i16 20, i16 65, i16 -3, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -9, i16 -7, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 3, i16 48, i16 34, i16 -1, i16 2, i16 32, i16 -1, i16 18, i16 33, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab9 = internal global [71 x i16] [i16 -63, i16 -53, i16 -41, i16 -29, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 85, i16 69, i16 53, i16 -1, i16 83, i16 -1, i16 84, i16 5, i16 -3, i16 -1, i16 68, i16 37, i16 -1, i16 82, i16 21, i16 -3, i16 -1, i16 81, i16 52, i16 -1, i16 67, i16 -1, i16 80, i16 4, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 64, i16 -1, i16 20, i16 65, i16 -5, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -1, i16 49, i16 -1, i16 3, i16 48, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab10 = internal global [127 x i16] [i16 -125, i16 -121, i16 -111, i16 -83, i16 -55, i16 -35, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 87, i16 -3, i16 -1, i16 117, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 55, i16 -9, i16 -3, i16 -1, i16 115, i16 70, i16 -3, i16 -1, i16 85, i16 84, i16 99, i16 -1, i16 39, i16 114, i16 -11, i16 -5, i16 -3, i16 -1, i16 100, i16 7, i16 112, i16 -1, i16 98, i16 -1, i16 69, i16 53, i16 -5, i16 -1, i16 6, i16 -1, i16 83, i16 68, i16 23, i16 -17, i16 -5, i16 -1, i16 113, i16 -1, i16 54, i16 38, i16 -5, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 96, i16 -1, i16 5, i16 80, i16 -19, i16 -11, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 4, i16 -1, i16 20, i16 65, i16 -3, i16 -1, i16 64, i16 35, i16 -1, i16 50, i16 3, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 48, i16 34, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab11 = internal global [127 x i16] [i16 -121, i16 -113, i16 -89, i16 -59, i16 -43, i16 -27, i16 -17, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 -1, i16 87, i16 85, i16 -5, i16 -3, i16 -1, i16 86, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -9, i16 -7, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 53, i16 83, i16 39, i16 -1, i16 114, i16 -1, i16 100, i16 7, i16 -5, i16 -1, i16 113, i16 -1, i16 23, i16 112, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 96, i16 -1, i16 68, i16 37, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 98, i16 -3, i16 -1, i16 38, i16 6, i16 22, i16 -5, i16 -1, i16 97, i16 -1, i16 81, i16 52, i16 -5, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -1, i16 36, i16 66, i16 -15, i16 -11, i16 -7, i16 -3, i16 -1, i16 20, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 33, i16 -5, i16 -1, i16 18, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab12 = internal global [127 x i16] [i16 -115, i16 -99, i16 -73, i16 -45, i16 -27, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 119, i16 103, i16 118, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 101, i16 -3, i16 -1, i16 86, i16 55, i16 -3, i16 -1, i16 115, i16 85, i16 39, i16 -7, i16 -3, i16 -1, i16 114, i16 70, i16 -1, i16 100, i16 23, i16 -5, i16 -1, i16 113, i16 -1, i16 7, i16 112, i16 -1, i16 54, i16 99, i16 -13, i16 -9, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 68, i16 -1, i16 6, i16 5, i16 -1, i16 38, i16 98, i16 -5, i16 -1, i16 97, i16 -1, i16 22, i16 96, i16 -3, i16 -1, i16 53, i16 83, i16 -1, i16 37, i16 82, i16 -17, i16 -7, i16 -3, i16 -1, i16 21, i16 81, i16 -1, i16 52, i16 67, i16 -5, i16 -3, i16 -1, i16 80, i16 4, i16 36, i16 -1, i16 66, i16 20, i16 -3, i16 -1, i16 51, i16 65, i16 -1, i16 35, i16 50, i16 -11, i16 -7, i16 -5, i16 -3, i16 -1, i16 64, i16 3, i16 48, i16 19, i16 -1, i16 49, i16 34, i16 -1, i16 18, i16 33, i16 -7, i16 -5, i16 -3, i16 -1, i16 2, i16 32, i16 0, i16 17, i16 -1, i16 1, i16 16], align 16
@tab13 = internal global [511 x i16] [i16 -509, i16 -503, i16 -475, i16 -405, i16 -333, i16 -265, i16 -205, i16 -153, i16 -115, i16 -83, i16 -53, i16 -35, i16 -21, i16 -13, i16 -9, i16 -7, i16 -5, i16 -3, i16 -1, i16 254, i16 252, i16 253, i16 237, i16 255, i16 -1, i16 239, i16 223, i16 -3, i16 -1, i16 238, i16 207, i16 -1, i16 222, i16 191, i16 -9, i16 -3, i16 -1, i16 251, i16 206, i16 -1, i16 220, i16 -1, i16 175, i16 233, i16 -1, i16 236, i16 221, i16 -9, i16 -5, i16 -3, i16 -1, i16 250, i16 205, i16 190, i16 -1, i16 235, i16 159, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -17, i16 -9, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 -1, i16 174, i16 158, i16 -5, i16 -1, i16 142, i16 -1, i16 127, i16 126, i16 247, i16 -5, i16 -1, i16 218, i16 -1, i16 173, i16 188, i16 -3, i16 -1, i16 203, i16 246, i16 111, i16 -15, i16 -7, i16 -3, i16 -1, i16 232, i16 95, i16 -1, i16 157, i16 217, i16 -3, i16 -1, i16 245, i16 231, i16 -1, i16 172, i16 187, i16 -9, i16 -3, i16 -1, i16 79, i16 244, i16 -3, i16 -1, i16 202, i16 230, i16 243, i16 -1, i16 63, i16 -1, i16 141, i16 216, i16 -21, i16 -9, i16 -3, i16 -1, i16 47, i16 242, i16 -3, i16 -1, i16 110, i16 156, i16 15, i16 -5, i16 -3, i16 -1, i16 201, i16 94, i16 171, i16 -3, i16 -1, i16 125, i16 215, i16 78, i16 -11, i16 -5, i16 -3, i16 -1, i16 200, i16 214, i16 62, i16 -1, i16 185, i16 -1, i16 155, i16 170, i16 -1, i16 31, i16 241, i16 -23, i16 -13, i16 -5, i16 -1, i16 240, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 228, i16 140, i16 -1, i16 109, i16 227, i16 -5, i16 -1, i16 226, i16 -1, i16 46, i16 14, i16 -1, i16 30, i16 225, i16 -15, i16 -7, i16 -3, i16 -1, i16 224, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -37, i16 -21, i16 -9, i16 -5, i16 -3, i16 -1, i16 211, i16 123, i16 45, i16 -1, i16 210, i16 29, i16 -5, i16 -1, i16 183, i16 -1, i16 92, i16 197, i16 -3, i16 -1, i16 153, i16 122, i16 195, i16 -7, i16 -5, i16 -3, i16 -1, i16 167, i16 151, i16 75, i16 209, i16 -3, i16 -1, i16 13, i16 208, i16 -1, i16 138, i16 168, i16 -11, i16 -7, i16 -3, i16 -1, i16 76, i16 196, i16 -1, i16 107, i16 182, i16 -1, i16 60, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -3, i16 -1, i16 181, i16 137, i16 28, i16 -43, i16 -23, i16 -11, i16 -5, i16 -1, i16 193, i16 -1, i16 152, i16 12, i16 -1, i16 192, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 166, i16 121, i16 59, i16 -1, i16 179, i16 -1, i16 136, i16 90, i16 -11, i16 -5, i16 -1, i16 43, i16 -1, i16 165, i16 105, i16 -1, i16 164, i16 -1, i16 120, i16 135, i16 -5, i16 -1, i16 148, i16 -1, i16 119, i16 118, i16 178, i16 -11, i16 -3, i16 -1, i16 27, i16 177, i16 -3, i16 -1, i16 11, i16 176, i16 -1, i16 150, i16 74, i16 -7, i16 -3, i16 -1, i16 58, i16 163, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -47, i16 -23, i16 -9, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 104, i16 160, i16 -5, i16 -3, i16 -1, i16 134, i16 73, i16 147, i16 -3, i16 -1, i16 57, i16 88, i16 -1, i16 133, i16 103, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 87, i16 117, i16 56, i16 -5, i16 -1, i16 131, i16 -1, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 115, i16 -11, i16 -3, i16 -1, i16 25, i16 145, i16 -3, i16 -1, i16 9, i16 144, i16 -1, i16 72, i16 132, i16 -7, i16 -5, i16 -1, i16 114, i16 -1, i16 70, i16 100, i16 40, i16 -1, i16 130, i16 24, i16 -41, i16 -27, i16 -11, i16 -5, i16 -3, i16 -1, i16 55, i16 39, i16 23, i16 -1, i16 113, i16 -1, i16 85, i16 7, i16 -7, i16 -3, i16 -1, i16 112, i16 54, i16 -1, i16 99, i16 69, i16 -3, i16 -1, i16 84, i16 38, i16 -1, i16 98, i16 53, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 6, i16 96, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 83, i16 68, i16 37, i16 -1, i16 82, i16 5, i16 -1, i16 21, i16 81, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -19, i16 -11, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -3, i16 -1, i16 49, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab15 = internal global [511 x i16] [i16 -495, i16 -445, i16 -355, i16 -263, i16 -183, i16 -115, i16 -77, i16 -43, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 255, i16 239, i16 -1, i16 254, i16 223, i16 -1, i16 238, i16 -1, i16 253, i16 207, i16 -7, i16 -3, i16 -1, i16 252, i16 222, i16 -1, i16 237, i16 191, i16 -1, i16 251, i16 -1, i16 206, i16 236, i16 -7, i16 -3, i16 -1, i16 221, i16 175, i16 -1, i16 250, i16 190, i16 -3, i16 -1, i16 235, i16 205, i16 -1, i16 220, i16 159, i16 -15, i16 -7, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 158, i16 -7, i16 -3, i16 -1, i16 233, i16 127, i16 -1, i16 247, i16 173, i16 -3, i16 -1, i16 218, i16 188, i16 -1, i16 111, i16 -1, i16 174, i16 15, i16 -19, i16 -11, i16 -3, i16 -1, i16 203, i16 246, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 95, i16 157, i16 -3, i16 -1, i16 245, i16 126, i16 -1, i16 231, i16 172, i16 -9, i16 -3, i16 -1, i16 202, i16 187, i16 -3, i16 -1, i16 217, i16 141, i16 79, i16 -3, i16 -1, i16 244, i16 63, i16 -1, i16 243, i16 216, i16 -33, i16 -17, i16 -9, i16 -3, i16 -1, i16 230, i16 47, i16 -1, i16 242, i16 -1, i16 110, i16 240, i16 -3, i16 -1, i16 31, i16 241, i16 -1, i16 156, i16 201, i16 -7, i16 -3, i16 -1, i16 94, i16 171, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 125, i16 215, i16 -1, i16 78, i16 228, i16 -15, i16 -7, i16 -3, i16 -1, i16 140, i16 200, i16 -1, i16 62, i16 109, i16 -3, i16 -1, i16 214, i16 227, i16 -1, i16 155, i16 185, i16 -7, i16 -3, i16 -1, i16 46, i16 170, i16 -1, i16 226, i16 30, i16 -5, i16 -1, i16 225, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -45, i16 -25, i16 -13, i16 -7, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -1, i16 212, i16 -1, i16 184, i16 154, i16 -7, i16 -3, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 210, i16 -9, i16 -5, i16 -3, i16 -1, i16 45, i16 13, i16 29, i16 -1, i16 123, i16 183, i16 -5, i16 -1, i16 209, i16 -1, i16 92, i16 208, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 76, i16 -1, i16 196, i16 107, i16 -5, i16 -1, i16 182, i16 -1, i16 153, i16 12, i16 -1, i16 60, i16 195, i16 -9, i16 -3, i16 -1, i16 122, i16 167, i16 -1, i16 166, i16 -1, i16 192, i16 11, i16 -1, i16 194, i16 -1, i16 44, i16 91, i16 -55, i16 -29, i16 -15, i16 -7, i16 -3, i16 -1, i16 181, i16 28, i16 -1, i16 137, i16 152, i16 -3, i16 -1, i16 193, i16 75, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 59, i16 121, i16 179, i16 -3, i16 -1, i16 151, i16 136, i16 -1, i16 43, i16 90, i16 -11, i16 -5, i16 -1, i16 178, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 -1, i16 176, i16 105, i16 -7, i16 -3, i16 -1, i16 150, i16 74, i16 -1, i16 164, i16 120, i16 -3, i16 -1, i16 135, i16 58, i16 163, i16 -17, i16 -7, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 160, i16 104, i16 -7, i16 -3, i16 -1, i16 134, i16 73, i16 -1, i16 148, i16 57, i16 -5, i16 -1, i16 147, i16 -1, i16 119, i16 9, i16 -1, i16 88, i16 133, i16 -53, i16 -29, i16 -13, i16 -7, i16 -3, i16 -1, i16 41, i16 103, i16 -1, i16 118, i16 146, i16 -1, i16 145, i16 -1, i16 25, i16 144, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 71, i16 -7, i16 -3, i16 -1, i16 40, i16 130, i16 -1, i16 24, i16 129, i16 -7, i16 -3, i16 -1, i16 116, i16 8, i16 -1, i16 128, i16 86, i16 -3, i16 -1, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -17, i16 -7, i16 -3, i16 -1, i16 39, i16 114, i16 -1, i16 100, i16 23, i16 -3, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 7, i16 112, i16 54, i16 -7, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -33, i16 -19, i16 -9, i16 -5, i16 -1, i16 97, i16 -1, i16 83, i16 68, i16 -1, i16 37, i16 82, i16 -3, i16 -1, i16 21, i16 81, i16 -3, i16 -1, i16 5, i16 80, i16 52, i16 -7, i16 -3, i16 -1, i16 67, i16 36, i16 -1, i16 66, i16 51, i16 -1, i16 65, i16 -1, i16 20, i16 4, i16 -9, i16 -3, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 64, i16 3, i16 19, i16 -3, i16 -1, i16 49, i16 48, i16 34, i16 -9, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab16 = internal global [511 x i16] [i16 -509, i16 -503, i16 -461, i16 -323, i16 -103, i16 -37, i16 -27, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 175, i16 -1, i16 250, i16 159, i16 -3, i16 -1, i16 249, i16 248, i16 143, i16 -7, i16 -3, i16 -1, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 255, i16 -9, i16 -5, i16 -3, i16 -1, i16 95, i16 245, i16 79, i16 -1, i16 244, i16 243, i16 -53, i16 -1, i16 240, i16 -1, i16 63, i16 -29, i16 -19, i16 -13, i16 -7, i16 -5, i16 -1, i16 206, i16 -1, i16 236, i16 221, i16 222, i16 -1, i16 233, i16 -1, i16 234, i16 217, i16 -1, i16 238, i16 -1, i16 237, i16 235, i16 -3, i16 -1, i16 190, i16 205, i16 -3, i16 -1, i16 220, i16 219, i16 174, i16 -11, i16 -5, i16 -1, i16 204, i16 -1, i16 173, i16 218, i16 -3, i16 -1, i16 126, i16 172, i16 202, i16 -5, i16 -3, i16 -1, i16 201, i16 125, i16 94, i16 189, i16 242, i16 -93, i16 -5, i16 -3, i16 -1, i16 47, i16 15, i16 31, i16 -1, i16 241, i16 -49, i16 -25, i16 -13, i16 -5, i16 -1, i16 158, i16 -1, i16 188, i16 203, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 157, i16 231, i16 -7, i16 -3, i16 -1, i16 187, i16 141, i16 -1, i16 216, i16 110, i16 -1, i16 230, i16 156, i16 -13, i16 -7, i16 -3, i16 -1, i16 171, i16 186, i16 -1, i16 229, i16 215, i16 -1, i16 78, i16 -1, i16 228, i16 140, i16 -3, i16 -1, i16 200, i16 62, i16 -1, i16 109, i16 -1, i16 214, i16 155, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 185, i16 170, i16 225, i16 -1, i16 212, i16 -1, i16 184, i16 169, i16 -5, i16 -1, i16 123, i16 -1, i16 183, i16 208, i16 227, i16 -7, i16 -3, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -75, i16 -45, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 154, i16 108, i16 -1, i16 198, i16 61, i16 -3, i16 -1, i16 92, i16 197, i16 13, i16 -7, i16 -3, i16 -1, i16 138, i16 168, i16 -1, i16 153, i16 76, i16 -3, i16 -1, i16 182, i16 122, i16 60, i16 -11, i16 -5, i16 -3, i16 -1, i16 91, i16 137, i16 28, i16 -1, i16 192, i16 -1, i16 152, i16 121, i16 -1, i16 226, i16 -1, i16 46, i16 30, i16 -15, i16 -7, i16 -3, i16 -1, i16 211, i16 45, i16 -1, i16 210, i16 209, i16 -5, i16 -1, i16 59, i16 -1, i16 151, i16 136, i16 29, i16 -7, i16 -3, i16 -1, i16 196, i16 107, i16 -1, i16 195, i16 167, i16 -1, i16 44, i16 -1, i16 194, i16 181, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 193, i16 12, i16 -1, i16 75, i16 180, i16 -3, i16 -1, i16 106, i16 166, i16 179, i16 -5, i16 -3, i16 -1, i16 90, i16 165, i16 43, i16 -1, i16 178, i16 27, i16 -13, i16 -5, i16 -1, i16 177, i16 -1, i16 11, i16 176, i16 -3, i16 -1, i16 105, i16 150, i16 -1, i16 74, i16 164, i16 -5, i16 -3, i16 -1, i16 120, i16 135, i16 163, i16 -3, i16 -1, i16 58, i16 89, i16 42, i16 -97, i16 -57, i16 -33, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 149, i16 104, i16 161, i16 -3, i16 -1, i16 134, i16 119, i16 148, i16 -5, i16 -3, i16 -1, i16 73, i16 87, i16 103, i16 162, i16 -5, i16 -1, i16 26, i16 -1, i16 10, i16 160, i16 -3, i16 -1, i16 57, i16 147, i16 -1, i16 88, i16 133, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 118, i16 9, i16 25, i16 -5, i16 -1, i16 145, i16 -1, i16 144, i16 72, i16 -3, i16 -1, i16 132, i16 117, i16 -1, i16 56, i16 131, i16 -21, i16 -11, i16 -5, i16 -3, i16 -1, i16 102, i16 40, i16 130, i16 -3, i16 -1, i16 71, i16 116, i16 24, i16 -3, i16 -1, i16 129, i16 128, i16 -3, i16 -1, i16 8, i16 86, i16 55, i16 -9, i16 -5, i16 -1, i16 115, i16 -1, i16 101, i16 70, i16 -1, i16 39, i16 114, i16 -5, i16 -3, i16 -1, i16 100, i16 85, i16 7, i16 23, i16 -23, i16 -13, i16 -5, i16 -1, i16 113, i16 -1, i16 112, i16 54, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -1, i16 97, i16 -1, i16 6, i16 96, i16 -9, i16 -5, i16 -1, i16 83, i16 -1, i16 53, i16 68, i16 -1, i16 37, i16 82, i16 -1, i16 81, i16 -1, i16 21, i16 5, i16 -33, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab24 = internal global [511 x i16] [i16 -451, i16 -117, i16 -43, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 250, i16 -1, i16 175, i16 159, i16 -1, i16 249, i16 248, i16 -9, i16 -5, i16 -3, i16 -1, i16 143, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 -3, i16 -1, i16 95, i16 245, i16 -1, i16 79, i16 244, i16 -71, i16 -7, i16 -3, i16 -1, i16 63, i16 243, i16 -1, i16 47, i16 242, i16 -5, i16 -1, i16 241, i16 -1, i16 31, i16 240, i16 -25, i16 -9, i16 -1, i16 15, i16 -3, i16 -1, i16 238, i16 222, i16 -1, i16 237, i16 206, i16 -7, i16 -3, i16 -1, i16 236, i16 221, i16 -1, i16 190, i16 235, i16 -3, i16 -1, i16 205, i16 220, i16 -1, i16 174, i16 234, i16 -15, i16 -7, i16 -3, i16 -1, i16 189, i16 219, i16 -1, i16 204, i16 158, i16 -3, i16 -1, i16 233, i16 173, i16 -1, i16 218, i16 188, i16 -7, i16 -3, i16 -1, i16 203, i16 142, i16 -1, i16 232, i16 157, i16 -3, i16 -1, i16 217, i16 126, i16 -1, i16 231, i16 172, i16 255, i16 -235, i16 -143, i16 -77, i16 -45, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 202, i16 187, i16 -1, i16 141, i16 216, i16 -5, i16 -3, i16 -1, i16 14, i16 224, i16 13, i16 230, i16 -5, i16 -3, i16 -1, i16 110, i16 156, i16 201, i16 -1, i16 94, i16 186, i16 -9, i16 -5, i16 -1, i16 229, i16 -1, i16 171, i16 125, i16 -1, i16 215, i16 228, i16 -3, i16 -1, i16 140, i16 200, i16 -3, i16 -1, i16 78, i16 46, i16 62, i16 -15, i16 -7, i16 -3, i16 -1, i16 109, i16 214, i16 -1, i16 227, i16 155, i16 -3, i16 -1, i16 185, i16 170, i16 -1, i16 226, i16 30, i16 -7, i16 -3, i16 -1, i16 225, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -3, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 45, i16 -7, i16 -3, i16 -1, i16 210, i16 29, i16 -1, i16 123, i16 183, i16 -3, i16 -1, i16 209, i16 92, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 153, i16 -1, i16 76, i16 196, i16 -3, i16 -1, i16 107, i16 182, i16 -3, i16 -1, i16 208, i16 12, i16 60, i16 -7, i16 -3, i16 -1, i16 195, i16 122, i16 -1, i16 167, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -1, i16 181, i16 28, i16 -57, i16 -35, i16 -19, i16 -7, i16 -3, i16 -1, i16 137, i16 152, i16 -1, i16 193, i16 75, i16 -5, i16 -3, i16 -1, i16 192, i16 11, i16 59, i16 -3, i16 -1, i16 176, i16 10, i16 26, i16 -5, i16 -1, i16 180, i16 -1, i16 106, i16 166, i16 -3, i16 -1, i16 121, i16 151, i16 -3, i16 -1, i16 160, i16 9, i16 144, i16 -9, i16 -3, i16 -1, i16 179, i16 136, i16 -3, i16 -1, i16 43, i16 90, i16 178, i16 -7, i16 -3, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 105, i16 -1, i16 150, i16 164, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 74, i16 120, i16 135, i16 -1, i16 58, i16 163, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -7, i16 -3, i16 -1, i16 161, i16 104, i16 -1, i16 134, i16 119, i16 -3, i16 -1, i16 73, i16 148, i16 -1, i16 57, i16 147, i16 -63, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 88, i16 133, i16 -1, i16 41, i16 103, i16 -3, i16 -1, i16 118, i16 146, i16 -1, i16 25, i16 145, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 40, i16 -17, i16 -7, i16 -3, i16 -1, i16 130, i16 24, i16 -1, i16 71, i16 116, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -1, i16 86, i16 101, i16 -7, i16 -5, i16 -1, i16 23, i16 -1, i16 7, i16 112, i16 115, i16 -3, i16 -1, i16 55, i16 39, i16 114, i16 -15, i16 -7, i16 -3, i16 -1, i16 70, i16 100, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 69, i16 84, i16 -7, i16 -3, i16 -1, i16 38, i16 98, i16 -1, i16 22, i16 97, i16 -5, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -1, i16 83, i16 68, i16 -51, i16 -37, i16 -23, i16 -15, i16 -9, i16 -3, i16 -1, i16 37, i16 82, i16 -1, i16 21, i16 -1, i16 5, i16 80, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 20, i16 -9, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -7, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 18, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab_c0 = internal global [31 x i16] [i16 -29, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 11, i16 15, i16 -1, i16 13, i16 14, i16 -3, i16 -1, i16 7, i16 5, i16 9, i16 -3, i16 -1, i16 6, i16 3, i16 -1, i16 10, i16 12, i16 -3, i16 -1, i16 2, i16 1, i16 -1, i16 4, i16 8, i16 0], align 16
@tab_c1 = internal global [31 x i16] [i16 -15, i16 -7, i16 -3, i16 -1, i16 15, i16 14, i16 -1, i16 13, i16 12, i16 -3, i16 -1, i16 11, i16 10, i16 -1, i16 9, i16 8, i16 -7, i16 -3, i16 -1, i16 7, i16 6, i16 -1, i16 5, i16 4, i16 -3, i16 -1, i16 3, i16 2, i16 -1, i16 1, i16 0], align 16
@gmp = external local_unnamed_addr global %struct.mpstr*, align 8
@III_get_scale_factors_1.slen.0 = internal unnamed_addr constant [16 x i8] c"\00\00\00\00\03\01\01\01\02\02\02\03\03\03\04\04", align 16
@III_get_scale_factors_1.slen.1 = internal unnamed_addr constant [16 x i8] c"\00\01\02\03\00\01\02\03\01\02\03\01\02\03\02\03", align 16

; Function Attrs: noinline nounwind uwtable
define void @init_layer3(i32) local_unnamed_addr #0 {
  br label %2

; <label>:2:                                      ; preds = %2, %1
  %indvars.iv268 = phi i64 [ -256, %1 ], [ %indvars.iv.next269.2, %2 ]
  %3 = add nsw i64 %indvars.iv268, 210
  %4 = trunc i64 %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, -2.500000e-01
  %exp241 = tail call double @llvm.exp2.f64(double %6)
  %7 = add nsw i64 %indvars.iv268, 256
  %8 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %7
  store double %exp241, double* %8, align 8
  %9 = add nsw i64 %indvars.iv268, 211
  %10 = trunc i64 %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, -2.500000e-01
  %exp241.1 = tail call double @llvm.exp2.f64(double %12)
  %13 = add nsw i64 %indvars.iv268, 257
  %14 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %13
  store double %exp241.1, double* %14, align 8
  %15 = add nsw i64 %indvars.iv268, 212
  %16 = trunc i64 %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = fmul double %17, -2.500000e-01
  %exp241.2 = tail call double @llvm.exp2.f64(double %18)
  %19 = add nsw i64 %indvars.iv268, 258
  %20 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %19
  store double %exp241.2, double* %20, align 8
  %indvars.iv.next269.2 = add nsw i64 %indvars.iv268, 3
  %exitcond270.2 = icmp eq i64 %indvars.iv.next269.2, 122
  br i1 %exitcond270.2, label %.preheader71.preheader, label %2

.preheader71.preheader:                           ; preds = %2
  store double 0.000000e+00, double* getelementptr inbounds ([8207 x double], [8207 x double]* @ispow, i64 0, i64 0), align 16
  store double 1.000000e+00, double* getelementptr inbounds ([8207 x double], [8207 x double]* @ispow, i64 0, i64 1), align 8
  store double 0x400428A2F98D728B, double* getelementptr inbounds ([8207 x double], [8207 x double]* @ispow, i64 0, i64 2), align 16
  br label %.preheader71.3

.preheader70:                                     ; preds = %.preheader71.3
  store double 0x3FEB7095010F9356, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 0), align 16
  store double 0xBFE076BFCD6FBECD, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 0), align 16
  store double 0x3FEC373AFE3FA80C, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 1), align 8
  store double 0xBFDE30DB485DB660, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 1), align 8
  store double 0x3FEE635B9EE7B56E, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 2), align 16
  store double 0xBFD40E604F4701FC, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 2), align 16
  store double 0x3FEF77502A0DD15B, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 3), align 8
  store double 0xBFC748EE85851AEC, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 3), align 8
  store double 0x3FEFDB482DD30F5B, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 4), align 16
  store double 0xBFB83603A7F2535A, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 4), align 16
  store double 0x3FEFF91F901A8104, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 5), align 8
  store double 0xBFA4F970DD8206D0, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 5), align 8
  store double 0x3FEFFF2C98DBE44E, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 6), align 16
  store double 0xBF8D14239D59A7C1, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 6), align 16
  store double 0x3FEFFFF1A52805D2, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 7), align 8
  store double 0xBF6E4F68C708D3F4, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 7), align 8
  br label %.preheader69

.preheader69:                                     ; preds = %.preheader69, %.preheader70
  %indvars.iv259 = phi i64 [ 0, %.preheader70 ], [ %indvars.iv.next260, %.preheader69 ]
  %21 = shl i64 %indvars.iv259, 1
  %22 = trunc i64 %21 to i32
  %23 = or i32 %22, 1
  %24 = sitofp i32 %23 to double
  %25 = fmul double %24, 0x3FA657184AE74487
  %26 = tail call double @sin(double %25) #6
  %27 = fmul double %26, 5.000000e-01
  %28 = add nuw nsw i64 %21, 19
  %29 = trunc i64 %28 to i32
  %30 = sitofp i32 %29 to double
  %31 = fmul double %30, 0x400921FB54442D18
  %32 = fdiv double %31, 7.200000e+01
  %33 = tail call double @cos(double %32) #6
  %34 = fdiv double %27, %33
  %35 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 %indvars.iv259
  store double %34, double* %35, align 8
  %36 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 %indvars.iv259
  store double %34, double* %36, align 8
  %37 = add nuw nsw i64 %21, 37
  %38 = trunc i64 %37 to i32
  %39 = sitofp i32 %38 to double
  %40 = fmul double %39, 0x3FA657184AE74487
  %41 = tail call double @sin(double %40) #6
  %42 = fmul double %41, 5.000000e-01
  %43 = add nuw nsw i64 %21, 55
  %44 = trunc i64 %43 to i32
  %45 = sitofp i32 %44 to double
  %46 = fmul double %45, 0x400921FB54442D18
  %47 = fdiv double %46, 7.200000e+01
  %48 = tail call double @cos(double %47) #6
  %49 = fdiv double %42, %48
  %50 = add nuw nsw i64 %indvars.iv259, 18
  %51 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 %50
  store double %49, double* %51, align 8
  %52 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 %50
  store double %49, double* %52, align 8
  %indvars.iv.next260 = add nuw nsw i64 %indvars.iv259, 1
  %exitcond261 = icmp eq i64 %indvars.iv.next260, 18
  br i1 %exitcond261, label %.preheader68.preheader, label %.preheader69

.preheader68.preheader:                           ; preds = %.preheader69
  br label %.preheader68

.preheader68:                                     ; preds = %.preheader68.preheader, %.preheader68
  %indvars.iv256 = phi i64 [ %indvars.iv.next257, %.preheader68 ], [ 0, %.preheader68.preheader ]
  %53 = shl i64 %indvars.iv256, 1
  %54 = add nuw nsw i64 %53, 55
  %55 = trunc i64 %54 to i32
  %56 = sitofp i32 %55 to double
  %57 = fmul double %56, 0x400921FB54442D18
  %58 = fdiv double %57, 7.200000e+01
  %59 = tail call double @cos(double %58) #6
  %60 = fdiv double 5.000000e-01, %59
  %61 = add nuw nsw i64 %indvars.iv256, 18
  %62 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 %61
  store double %60, double* %62, align 8
  %63 = add nuw nsw i64 %53, 43
  %64 = trunc i64 %63 to i32
  %65 = sitofp i32 %64 to double
  %66 = fmul double %65, 0x400921FB54442D18
  %67 = fdiv double %66, 7.200000e+01
  %68 = tail call double @cos(double %67) #6
  %69 = fdiv double 5.000000e-01, %68
  %70 = add nuw nsw i64 %indvars.iv256, 12
  %71 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 %70
  store double %69, double* %71, align 8
  %72 = add nuw nsw i64 %53, 13
  %73 = trunc i64 %72 to i32
  %74 = sitofp i32 %73 to double
  %75 = fmul double %74, 0x3FC0C152382D7365
  %76 = tail call double @sin(double %75) #6
  %77 = fmul double %76, 5.000000e-01
  %78 = add nuw nsw i64 %53, 67
  %79 = trunc i64 %78 to i32
  %80 = sitofp i32 %79 to double
  %81 = fmul double %80, 0x400921FB54442D18
  %82 = fdiv double %81, 7.200000e+01
  %83 = tail call double @cos(double %82) #6
  %84 = fdiv double %77, %83
  %85 = add nuw nsw i64 %indvars.iv256, 24
  %86 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 %85
  store double %84, double* %86, align 8
  %87 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 %indvars.iv256
  store double 0.000000e+00, double* %87, align 8
  %88 = add nuw nsw i64 %indvars.iv256, 30
  %89 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 %88
  store double 0.000000e+00, double* %89, align 8
  %90 = trunc i64 %53 to i32
  %91 = or i32 %90, 1
  %92 = sitofp i32 %91 to double
  %93 = fmul double %92, 0x3FC0C152382D7365
  %94 = tail call double @sin(double %93) #6
  %95 = fmul double %94, 5.000000e-01
  %96 = add nuw nsw i64 %53, 31
  %97 = trunc i64 %96 to i32
  %98 = sitofp i32 %97 to double
  %99 = fmul double %98, 0x400921FB54442D18
  %100 = fdiv double %99, 7.200000e+01
  %101 = tail call double @cos(double %100) #6
  %102 = fdiv double %95, %101
  %103 = add nuw nsw i64 %indvars.iv256, 6
  %104 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 %103
  store double %102, double* %104, align 8
  %indvars.iv.next257 = add nuw nsw i64 %indvars.iv256, 1
  %exitcond258 = icmp eq i64 %indvars.iv.next257, 6
  br i1 %exitcond258, label %.preheader65, label %.preheader68

.preheader65:                                     ; preds = %.preheader68
  store double 1.000000e+00, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 0), align 16
  store double 0x3FEF838B8C811C17, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 1), align 8
  store double 0x3FEE11F642522D1C, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 2), align 16
  store double 0x3FEBB67AE8584CAB, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 3), align 8
  store double 0x3FE8836FA2CF5039, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 4), align 16
  store double 0x3FE491B7523C161D, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 5), align 8
  store double 0x3FE0000000000001, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 6), align 16
  store double 0x3FD5E3A8748A0BF7, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 7), align 8
  store double 0x3FC63A1A7E0B738C, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 8), align 16
  store double 0x3FE00FA563D53203, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 0), align 16
  store double 0x3FE0907DC1930690, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 1), align 8
  store double 0x3FE1A76F9AD128B7, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 2), align 16
  store double 0x3FE3884AEF684AF8, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 3), align 8
  store double 0x3FE6A09E667F3BCC, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 4), align 16
  store double 0x3FEBE52877982345, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 5), align 8
  store double 0x3FF2EDFB187B1137, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 6), align 16
  store double 0x3FFEE8DD4748BF0E, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 7), align 8
  store double 0x4016F28A8AE3AB0A, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 8), align 16
  store double 0x3FE0907DC1930690, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 0), align 16
  store double 0x3FE6A09E667F3BCC, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 1), align 8
  store double 0x3FFEE8DD4748BF16, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 2), align 16
  store double 0x3FEBB67AE8584CAB, double* @COS6_1, align 8
  store double 0x3FE0000000000001, double* @COS6_2, align 8
  br label %105

; <label>:105:                                    ; preds = %.preheader65, %cdce.end.5
  %indvars.iv244 = phi i64 [ 0, %.preheader65 ], [ %indvars.iv.next245, %cdce.end.5 ]
  %106 = shl nsw i64 %indvars.iv244, 1
  %107 = trunc i64 %106 to i32
  %108 = or i32 %107, 1
  %109 = sitofp i32 %108 to double
  %110 = fmul double %109, 0x3FC0C152382D7365
  %111 = tail call double @sin(double %110) #6
  %112 = fmul double %111, 5.000000e-01
  %113 = add nuw nsw i64 %106, 7
  %114 = trunc i64 %113 to i32
  %115 = sitofp i32 %114 to double
  %116 = fmul double %115, 0x400921FB54442D18
  %117 = fdiv double %116, 2.400000e+01
  %118 = tail call double @cos(double %117) #6
  %119 = fdiv double %112, %118
  %120 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 %indvars.iv244
  store double %119, double* %120, align 8
  %121 = trunc i64 %113 to i32
  %122 = sitofp i32 %121 to double
  %123 = fmul double %122, 0x3FC0C152382D7365
  %124 = fcmp oeq double %123, 0xFFF0000000000000
  %125 = fcmp oeq double %123, 0x7FF0000000000000
  %126 = or i1 %125, %124
  br i1 %126, label %cdce.call, label %cdce.end, !prof !1

cdce.call:                                        ; preds = %105
  %127 = tail call double @cos(double %123) #6
  br label %cdce.end

cdce.end:                                         ; preds = %105, %cdce.call
  %128 = mul nuw nsw i64 %113, 3
  %129 = trunc i64 %128 to i32
  %130 = sitofp i32 %129 to double
  %131 = fmul double %130, 0x3FC0C152382D7365
  %132 = fcmp oeq double %131, 0xFFF0000000000000
  %133 = fcmp oeq double %131, 0x7FF0000000000000
  %134 = or i1 %133, %132
  br i1 %134, label %cdce.call.1, label %cdce.end.1, !prof !1

.lr.ph:                                           ; preds = %.lr.ph.preheader, %._crit_edge
  %indvars.iv240 = phi i64 [ %indvars.iv.next241, %._crit_edge ], [ 0, %.lr.ph.preheader ]
  %135 = getelementptr inbounds [4 x i32], [4 x i32]* @init_layer3.len, i64 0, i64 %indvars.iv240
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = icmp sgt i32 %136, 2
  %smax = select i1 %138, i32 %136, i32 2
  %139 = add nsw i32 %smax, -1
  %140 = lshr i32 %139, 1
  %141 = add nuw i32 %140, 1
  %xtraiter = and i32 %141, 3
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.prol.loopexit, label %.prol.preheader.preheader

.prol.preheader.preheader:                        ; preds = %.lr.ph
  br label %.prol.preheader

.prol.preheader:                                  ; preds = %.prol.preheader.preheader, %.prol.preheader
  %indvars.iv236.prol = phi i64 [ %indvars.iv.next237.prol, %.prol.preheader ], [ 0, %.prol.preheader.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.prol.preheader ], [ %xtraiter, %.prol.preheader.preheader ]
  %142 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv236.prol
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 16
  %145 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv236.prol
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 16
  %indvars.iv.next237.prol = add nuw nsw i64 %indvars.iv236.prol, 2
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.prol.loopexit.loopexit, label %.prol.preheader, !llvm.loop !2

.prol.loopexit.loopexit:                          ; preds = %.prol.preheader
  br label %.prol.loopexit

.prol.loopexit:                                   ; preds = %.prol.loopexit.loopexit, %.lr.ph
  %indvars.iv236.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next237.prol, %.prol.loopexit.loopexit ]
  %147 = icmp ult i32 %139, 6
  br i1 %147, label %.lr.ph116.preheader, label %.lr.ph.new.preheader

.lr.ph.new.preheader:                             ; preds = %.prol.loopexit
  br label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph.new.preheader, %.lr.ph.new
  %indvars.iv236 = phi i64 [ %indvars.iv.next237.3, %.lr.ph.new ], [ %indvars.iv236.unr, %.lr.ph.new.preheader ]
  %148 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv236
  %149 = bitcast double* %148 to i64*
  %150 = load i64, i64* %149, align 16
  %151 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv236
  %152 = bitcast double* %151 to i64*
  store i64 %150, i64* %152, align 16
  %indvars.iv.next237 = add nuw nsw i64 %indvars.iv236, 2
  %153 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237
  %154 = bitcast double* %153 to i64*
  %155 = load i64, i64* %154, align 16
  %156 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237
  %157 = bitcast double* %156 to i64*
  store i64 %155, i64* %157, align 16
  %indvars.iv.next237.1 = add nsw i64 %indvars.iv236, 4
  %158 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237.1
  %159 = bitcast double* %158 to i64*
  %160 = load i64, i64* %159, align 16
  %161 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237.1
  %162 = bitcast double* %161 to i64*
  store i64 %160, i64* %162, align 16
  %indvars.iv.next237.2 = add nsw i64 %indvars.iv236, 6
  %163 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237.2
  %164 = bitcast double* %163 to i64*
  %165 = load i64, i64* %164, align 16
  %166 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next237.2
  %167 = bitcast double* %166 to i64*
  store i64 %165, i64* %167, align 16
  %indvars.iv.next237.3 = add nsw i64 %indvars.iv236, 8
  %168 = icmp slt i64 %indvars.iv.next237.3, %137
  br i1 %168, label %.lr.ph.new, label %.lr.ph116.preheader.loopexit

.lr.ph116.preheader.loopexit:                     ; preds = %.lr.ph.new
  br label %.lr.ph116.preheader

.lr.ph116.preheader:                              ; preds = %.lr.ph116.preheader.loopexit, %.prol.loopexit
  %169 = load i32, i32* %135, align 4
  %170 = sext i32 %169 to i64
  %171 = icmp sgt i64 %170, 3
  %smax276 = select i1 %171, i64 %170, i64 3
  %172 = add nsw i64 %smax276, -2
  %173 = lshr i64 %172, 1
  %174 = add nuw i64 %173, 1
  %xtraiter277 = and i64 %174, 3
  %lcmp.mod278 = icmp eq i64 %xtraiter277, 0
  br i1 %lcmp.mod278, label %.lr.ph116.prol.loopexit, label %.lr.ph116.prol.preheader

.lr.ph116.prol.preheader:                         ; preds = %.lr.ph116.preheader
  br label %.lr.ph116.prol

.lr.ph116.prol:                                   ; preds = %.lr.ph116.prol, %.lr.ph116.prol.preheader
  %indvars.iv238.prol = phi i64 [ %indvars.iv.next239.prol, %.lr.ph116.prol ], [ 1, %.lr.ph116.prol.preheader ]
  %prol.iter279 = phi i64 [ %prol.iter279.sub, %.lr.ph116.prol ], [ %xtraiter277, %.lr.ph116.prol.preheader ]
  %175 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv238.prol
  %176 = load double, double* %175, align 8
  %177 = fsub double -0.000000e+00, %176
  %178 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv238.prol
  store double %177, double* %178, align 8
  %indvars.iv.next239.prol = add nuw nsw i64 %indvars.iv238.prol, 2
  %prol.iter279.sub = add i64 %prol.iter279, -1
  %prol.iter279.cmp = icmp eq i64 %prol.iter279.sub, 0
  br i1 %prol.iter279.cmp, label %.lr.ph116.prol.loopexit.unr-lcssa, label %.lr.ph116.prol, !llvm.loop !4

.lr.ph116.prol.loopexit.unr-lcssa:                ; preds = %.lr.ph116.prol
  br label %.lr.ph116.prol.loopexit

.lr.ph116.prol.loopexit:                          ; preds = %.lr.ph116.preheader, %.lr.ph116.prol.loopexit.unr-lcssa
  %indvars.iv238.unr = phi i64 [ 1, %.lr.ph116.preheader ], [ %indvars.iv.next239.prol, %.lr.ph116.prol.loopexit.unr-lcssa ]
  %179 = icmp ult i64 %172, 6
  br i1 %179, label %._crit_edge, label %.lr.ph116.preheader.new

.lr.ph116.preheader.new:                          ; preds = %.lr.ph116.prol.loopexit
  br label %.lr.ph116

.lr.ph116:                                        ; preds = %.lr.ph116, %.lr.ph116.preheader.new
  %indvars.iv238 = phi i64 [ %indvars.iv238.unr, %.lr.ph116.preheader.new ], [ %indvars.iv.next239.3, %.lr.ph116 ]
  %180 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv238
  %181 = load double, double* %180, align 8
  %182 = fsub double -0.000000e+00, %181
  %183 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv238
  store double %182, double* %183, align 8
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 2
  %184 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239
  %185 = load double, double* %184, align 8
  %186 = fsub double -0.000000e+00, %185
  %187 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239
  store double %186, double* %187, align 8
  %indvars.iv.next239.1 = add nsw i64 %indvars.iv238, 4
  %188 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239.1
  %189 = load double, double* %188, align 8
  %190 = fsub double -0.000000e+00, %189
  %191 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239.1
  store double %190, double* %191, align 8
  %indvars.iv.next239.2 = add nsw i64 %indvars.iv238, 6
  %192 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239.2
  %193 = load double, double* %192, align 8
  %194 = fsub double -0.000000e+00, %193
  %195 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %indvars.iv240, i64 %indvars.iv.next239.2
  store double %194, double* %195, align 8
  %indvars.iv.next239.3 = add nsw i64 %indvars.iv238, 8
  %196 = icmp slt i64 %indvars.iv.next239.3, %170
  br i1 %196, label %.lr.ph116, label %._crit_edge.unr-lcssa

._crit_edge.unr-lcssa:                            ; preds = %.lr.ph116
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph116.prol.loopexit, %._crit_edge.unr-lcssa
  %indvars.iv.next241 = add nuw nsw i64 %indvars.iv240, 1
  %exitcond242 = icmp eq i64 %indvars.iv.next241, 4
  br i1 %exitcond242, label %.preheader61.preheader, label %.lr.ph

.preheader61.preheader:                           ; preds = %._crit_edge
  br label %.preheader61

.preheader61:                                     ; preds = %.preheader61.preheader, %.us-lcssa.us
  %indvars.iv233 = phi i64 [ %indvars.iv.next234, %.us-lcssa.us ], [ 0, %.preheader61.preheader ]
  %197 = trunc i64 %indvars.iv233 to i32
  %198 = sitofp i32 %197 to double
  %199 = fmul double %198, 0x400921FB54442D18
  %200 = fdiv double %199, 1.200000e+01
  %201 = tail call double @tan(double %200) #6
  %202 = fadd double %201, 1.000000e+00
  %203 = fdiv double %201, %202
  %204 = getelementptr inbounds [16 x double], [16 x double]* @tan1_1, i64 0, i64 %indvars.iv233
  store double %203, double* %204, align 8
  %205 = fdiv double 1.000000e+00, %202
  %206 = getelementptr inbounds [16 x double], [16 x double]* @tan2_1, i64 0, i64 %indvars.iv233
  store double %205, double* %206, align 8
  %207 = fmul double %201, 0x3FF6A09E667F3BCD
  %208 = fdiv double %207, %202
  %209 = getelementptr inbounds [16 x double], [16 x double]* @tan1_2, i64 0, i64 %indvars.iv233
  store double %208, double* %209, align 8
  %210 = fdiv double 0x3FF6A09E667F3BCD, %202
  %211 = getelementptr inbounds [16 x double], [16 x double]* @tan2_2, i64 0, i64 %indvars.iv233
  store double %210, double* %211, align 8
  %212 = icmp sgt i64 %indvars.iv233, 0
  %213 = fmul double %198, 5.000000e-01
  %214 = fadd double %198, 1.000000e+00
  %215 = fmul double %214, 5.000000e-01
  br i1 %212, label %.split.us, label %.split

.split.us:                                        ; preds = %.preheader61
  %216 = and i64 %indvars.iv233, 1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %.split.us.split.us, label %.split.us.split

.split.us.split.us:                               ; preds = %.split.us
  %218 = tail call double @pow(double 0x3FEAE89F995AD3AD, double %213) #6
  %219 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 0, i64 %indvars.iv233
  store double 1.000000e+00, double* %219, align 8
  %220 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 0, i64 %indvars.iv233
  store double %218, double* %220, align 8
  %221 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 0, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %221, align 8
  %222 = fmul double %218, 0x3FF6A09E667F3BCD
  %223 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 0, i64 %indvars.iv233
  store double %222, double* %223, align 8
  %224 = tail call double @pow(double 0x3FE6A09E667F3BCD, double %213) #6
  %225 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 1, i64 %indvars.iv233
  store double 1.000000e+00, double* %225, align 8
  %226 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 1, i64 %indvars.iv233
  store double %224, double* %226, align 8
  %227 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 1, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %227, align 8
  %228 = fmul double %224, 0x3FF6A09E667F3BCD
  br label %.us-lcssa.us

.split.us.split:                                  ; preds = %.split.us
  %229 = tail call double @pow(double 0x3FEAE89F995AD3AD, double %215) #6
  %230 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 0, i64 %indvars.iv233
  store double %229, double* %230, align 8
  %231 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 0, i64 %indvars.iv233
  store double 1.000000e+00, double* %231, align 8
  %232 = fmul double %229, 0x3FF6A09E667F3BCD
  %233 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 0, i64 %indvars.iv233
  store double %232, double* %233, align 8
  %234 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 0, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %234, align 8
  %235 = tail call double @pow(double 0x3FE6A09E667F3BCD, double %215) #6
  %236 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 1, i64 %indvars.iv233
  store double %235, double* %236, align 8
  %237 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 1, i64 %indvars.iv233
  store double 1.000000e+00, double* %237, align 8
  %238 = fmul double %235, 0x3FF6A09E667F3BCD
  %239 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 1, i64 %indvars.iv233
  store double %238, double* %239, align 8
  br label %.us-lcssa.us

.split:                                           ; preds = %.preheader61
  %240 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 0, i64 %indvars.iv233
  store double 1.000000e+00, double* %240, align 8
  %241 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 0, i64 %indvars.iv233
  store double 1.000000e+00, double* %241, align 8
  %242 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 0, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %242, align 8
  %243 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 0, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %243, align 8
  %244 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 1, i64 %indvars.iv233
  store double 1.000000e+00, double* %244, align 8
  %245 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 1, i64 %indvars.iv233
  store double 1.000000e+00, double* %245, align 8
  %246 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 1, i64 %indvars.iv233
  store double 0x3FF6A09E667F3BCD, double* %246, align 8
  br label %.us-lcssa.us

.us-lcssa.us:                                     ; preds = %.split, %.split.us.split, %.split.us.split.us
  %.sink = phi double [ 0x3FF6A09E667F3BCD, %.split ], [ 0x3FF6A09E667F3BCD, %.split.us.split ], [ %228, %.split.us.split.us ]
  %247 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 1, i64 %indvars.iv233
  store double %.sink, double* %247, align 8
  %indvars.iv.next234 = add nuw nsw i64 %indvars.iv233, 1
  %exitcond235 = icmp eq i64 %indvars.iv.next234, 16
  br i1 %exitcond235, label %.preheader.preheader, label %.preheader61

.preheader.preheader:                             ; preds = %.us-lcssa.us
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %384
  %indvars.iv221 = phi i64 [ %indvars.iv.next222, %384 ], [ 0, %.preheader.preheader ]
  %indvars.iv217 = phi [9 x [44 x i32]]* [ %522, %384 ], [ bitcast (i32* getelementptr inbounds ([9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 1, i64 0) to [9 x [44 x i32]]*), %.preheader.preheader ]
  %indvars.iv213 = phi [9 x [156 x i32]]* [ %521, %384 ], [ bitcast (i32* getelementptr inbounds ([9 x [156 x i32]], [9 x [156 x i32]]* @mapbuf1, i64 0, i64 1, i64 0) to [9 x [156 x i32]]*), %.preheader.preheader ]
  %indvars.iv207 = phi [9 x [152 x i32]]* [ %520, %384 ], [ bitcast (i32* getelementptr inbounds ([9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 1, i64 0) to [9 x [152 x i32]]*), %.preheader.preheader ]
  %indvars.iv202 = phi [9 x [152 x i32]]* [ %519, %384 ], [ bitcast (i32* getelementptr inbounds ([9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 0, i64 32) to [9 x [152 x i32]]*), %.preheader.preheader ]
  %indvars.iv217219 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* %indvars.iv217, i64 0, i64 0, i64 0
  %indvars.iv213215 = getelementptr inbounds [9 x [156 x i32]], [9 x [156 x i32]]* %indvars.iv213, i64 0, i64 0, i64 0
  %indvars.iv207209 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* %indvars.iv207, i64 0, i64 0, i64 0
  %248 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 0
  %249 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %indvars.iv221, i64 0
  store i32* %248, i32** %249, align 8
  %250 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 0
  %251 = load i16, i16* %250, align 2
  %252 = sext i16 %251 to i32
  %253 = ashr i32 %252, 1
  %254 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 1
  store i32 %253, i32* %248, align 16
  %255 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 2
  store i32 0, i32* %254, align 4
  %256 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 3
  store i32 3, i32* %255, align 8
  store i32 0, i32* %256, align 4
  %257 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 4
  %258 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 1
  %259 = load i16, i16* %250, align 2
  %260 = sext i16 %259 to i32
  %261 = load i16, i16* %258, align 2
  %262 = sext i16 %261 to i32
  %263 = ashr i32 %262, 1
  %264 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 5
  store i32 %263, i32* %257, align 16
  %265 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 6
  store i32 %260, i32* %264, align 4
  %266 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 7
  store i32 3, i32* %265, align 8
  store i32 1, i32* %266, align 4
  %267 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 8
  %268 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 2
  %269 = load i16, i16* %258, align 2
  %270 = sext i16 %269 to i32
  %271 = add nsw i32 %270, %260
  %272 = load i16, i16* %268, align 2
  %273 = sext i16 %272 to i32
  %274 = ashr i32 %273, 1
  %275 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 9
  store i32 %274, i32* %267, align 16
  %276 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 10
  store i32 %271, i32* %275, align 4
  %277 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 11
  store i32 3, i32* %276, align 8
  store i32 2, i32* %277, align 4
  %278 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 12
  %279 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 3
  %280 = load i16, i16* %268, align 2
  %281 = sext i16 %280 to i32
  %282 = add nsw i32 %281, %271
  %283 = load i16, i16* %279, align 2
  %284 = sext i16 %283 to i32
  %285 = ashr i32 %284, 1
  %286 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 13
  store i32 %285, i32* %278, align 16
  %287 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 14
  store i32 %282, i32* %286, align 4
  %288 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 15
  store i32 3, i32* %287, align 8
  store i32 3, i32* %288, align 4
  %289 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 16
  %290 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 4
  %291 = load i16, i16* %279, align 2
  %292 = sext i16 %291 to i32
  %293 = add nsw i32 %292, %282
  %294 = load i16, i16* %290, align 2
  %295 = sext i16 %294 to i32
  %296 = ashr i32 %295, 1
  %297 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 17
  store i32 %296, i32* %289, align 16
  %298 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 18
  store i32 %293, i32* %297, align 4
  %299 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 19
  store i32 3, i32* %298, align 8
  store i32 4, i32* %299, align 4
  %300 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 20
  %301 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 5
  %302 = load i16, i16* %290, align 2
  %303 = sext i16 %302 to i32
  %304 = add nsw i32 %303, %293
  %305 = load i16, i16* %301, align 2
  %306 = sext i16 %305 to i32
  %307 = ashr i32 %306, 1
  %308 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 21
  store i32 %307, i32* %300, align 16
  %309 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 22
  store i32 %304, i32* %308, align 4
  %310 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 23
  store i32 3, i32* %309, align 8
  store i32 5, i32* %310, align 4
  %311 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 24
  %312 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 6
  %313 = load i16, i16* %301, align 2
  %314 = sext i16 %313 to i32
  %315 = add nsw i32 %314, %304
  %316 = load i16, i16* %312, align 2
  %317 = sext i16 %316 to i32
  %318 = ashr i32 %317, 1
  %319 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 25
  store i32 %318, i32* %311, align 16
  %320 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 26
  store i32 %315, i32* %319, align 4
  %321 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 27
  store i32 3, i32* %320, align 8
  store i32 6, i32* %321, align 4
  %322 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 28
  %323 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 7
  %324 = load i16, i16* %312, align 2
  %325 = sext i16 %324 to i32
  %326 = add nsw i32 %325, %315
  %327 = load i16, i16* %323, align 2
  %328 = sext i16 %327 to i32
  %329 = ashr i32 %328, 1
  %330 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 29
  store i32 %329, i32* %322, align 16
  %331 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 30
  store i32 %326, i32* %330, align 4
  %332 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %indvars.iv221, i64 31
  store i32 3, i32* %331, align 8
  store i32 7, i32* %332, align 4
  %333 = load i16, i16* %323, align 2
  %334 = sext i16 %333 to i32
  %335 = add nsw i32 %334, %326
  %indvars.iv202203 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* %indvars.iv202, i64 0, i64 0, i64 0
  %336 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 3, i64 3
  br label %337

; <label>:337:                                    ; preds = %.preheader, %337
  %.1100 = phi i16* [ %336, %.preheader ], [ %354, %337 ]
  %.1399 = phi i32 [ %335, %.preheader ], [ %356, %337 ]
  %.12898 = phi i32 [ 3, %.preheader ], [ %357, %337 ]
  %.13297 = phi i32* [ %indvars.iv202203, %.preheader ], [ %scevgep205, %337 ]
  %338 = load i16, i16* %.1100, align 2
  %339 = sext i16 %338 to i32
  %340 = ashr i32 %339, 1
  %341 = getelementptr inbounds i32, i32* %.13297, i64 1
  store i32 %340, i32* %.13297, align 4
  %342 = getelementptr inbounds i32, i32* %.13297, i64 2
  store i32 %.1399, i32* %341, align 4
  %343 = getelementptr inbounds i32, i32* %.13297, i64 3
  store i32 0, i32* %342, align 4
  store i32 %.12898, i32* %343, align 4
  %344 = getelementptr inbounds i32, i32* %.13297, i64 4
  %345 = getelementptr inbounds i32, i32* %.13297, i64 5
  store i32 %340, i32* %344, align 4
  %346 = add nsw i32 %.1399, 1
  %347 = getelementptr inbounds i32, i32* %.13297, i64 6
  store i32 %346, i32* %345, align 4
  %348 = getelementptr inbounds i32, i32* %.13297, i64 7
  store i32 1, i32* %347, align 4
  store i32 %.12898, i32* %348, align 4
  %349 = getelementptr inbounds i32, i32* %.13297, i64 8
  %350 = getelementptr inbounds i32, i32* %.13297, i64 9
  store i32 %340, i32* %349, align 4
  %351 = add nsw i32 %.1399, 2
  %352 = getelementptr inbounds i32, i32* %.13297, i64 10
  store i32 %351, i32* %350, align 4
  %353 = getelementptr inbounds i32, i32* %.13297, i64 11
  store i32 2, i32* %352, align 4
  store i32 %.12898, i32* %353, align 4
  %354 = getelementptr inbounds i16, i16* %.1100, i64 1
  %scevgep205 = getelementptr i32, i32* %.13297, i64 12
  %355 = mul nsw i32 %340, 6
  %356 = add nsw i32 %355, %.1399
  %357 = add nuw nsw i32 %.12898, 1
  %exitcond210 = icmp eq i32 %357, 13
  br i1 %exitcond210, label %358, label %337

; <label>:358:                                    ; preds = %337
  %359 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %indvars.iv221, i64 0
  store i32* %indvars.iv207209, i32** %359, align 8
  %360 = getelementptr inbounds [9 x [156 x i32]], [9 x [156 x i32]]* @mapbuf1, i64 0, i64 %indvars.iv221, i64 0
  %361 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %indvars.iv221, i64 1
  store i32* %360, i32** %361, align 8
  %362 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 3, i64 0
  br label %363

; <label>:363:                                    ; preds = %358, %363
  %.2106 = phi i16* [ %362, %358 ], [ %380, %363 ]
  %.14105 = phi i32 [ 0, %358 ], [ %382, %363 ]
  %.229104 = phi i32 [ 0, %358 ], [ %383, %363 ]
  %.334103 = phi i32* [ %360, %358 ], [ %scevgep211, %363 ]
  %364 = load i16, i16* %.2106, align 2
  %365 = sext i16 %364 to i32
  %366 = ashr i32 %365, 1
  %367 = getelementptr inbounds i32, i32* %.334103, i64 1
  store i32 %366, i32* %.334103, align 4
  %368 = getelementptr inbounds i32, i32* %.334103, i64 2
  store i32 %.14105, i32* %367, align 4
  %369 = getelementptr inbounds i32, i32* %.334103, i64 3
  store i32 0, i32* %368, align 4
  store i32 %.229104, i32* %369, align 4
  %370 = getelementptr inbounds i32, i32* %.334103, i64 4
  %371 = getelementptr inbounds i32, i32* %.334103, i64 5
  store i32 %366, i32* %370, align 4
  %372 = or i32 %.14105, 1
  %373 = getelementptr inbounds i32, i32* %.334103, i64 6
  store i32 %372, i32* %371, align 4
  %374 = getelementptr inbounds i32, i32* %.334103, i64 7
  store i32 1, i32* %373, align 4
  store i32 %.229104, i32* %374, align 4
  %375 = getelementptr inbounds i32, i32* %.334103, i64 8
  %376 = getelementptr inbounds i32, i32* %.334103, i64 9
  store i32 %366, i32* %375, align 4
  %377 = add nsw i32 %.14105, 2
  %378 = getelementptr inbounds i32, i32* %.334103, i64 10
  store i32 %377, i32* %376, align 4
  %379 = getelementptr inbounds i32, i32* %.334103, i64 11
  store i32 2, i32* %378, align 4
  store i32 %.229104, i32* %379, align 4
  %380 = getelementptr inbounds i16, i16* %.2106, i64 1
  %scevgep211 = getelementptr i32, i32* %.334103, i64 12
  %381 = mul nsw i32 %366, 6
  %382 = add nsw i32 %381, %.14105
  %383 = add nuw nsw i32 %.229104, 1
  %exitcond216 = icmp eq i32 %383, 13
  br i1 %exitcond216, label %384, label %363

; <label>:384:                                    ; preds = %363
  %385 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %indvars.iv221, i64 1
  store i32* %indvars.iv213215, i32** %385, align 8
  %386 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 0
  %387 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %indvars.iv221, i64 2
  store i32* %386, i32** %387, align 8
  %388 = load i16, i16* %250, align 2
  %389 = sext i16 %388 to i32
  %390 = ashr i32 %389, 1
  %391 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 1
  store i32 %390, i32* %386, align 16
  store i32 0, i32* %391, align 4
  %392 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 2
  %393 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 1
  %394 = load i16, i16* %393, align 2
  %395 = sext i16 %394 to i32
  %396 = ashr i32 %395, 1
  %397 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 3
  store i32 %396, i32* %392, align 8
  store i32 1, i32* %397, align 4
  %398 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 4
  %399 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 2
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i32
  %402 = ashr i32 %401, 1
  %403 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 5
  store i32 %402, i32* %398, align 16
  store i32 2, i32* %403, align 4
  %404 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 6
  %405 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 3
  %406 = load i16, i16* %405, align 2
  %407 = sext i16 %406 to i32
  %408 = ashr i32 %407, 1
  %409 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 7
  store i32 %408, i32* %404, align 8
  store i32 3, i32* %409, align 4
  %410 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 8
  %411 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 4
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = ashr i32 %413, 1
  %415 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 9
  store i32 %414, i32* %410, align 16
  store i32 4, i32* %415, align 4
  %416 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 10
  %417 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 5
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = ashr i32 %419, 1
  %421 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 11
  store i32 %420, i32* %416, align 8
  store i32 5, i32* %421, align 4
  %422 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 12
  %423 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 6
  %424 = load i16, i16* %423, align 2
  %425 = sext i16 %424 to i32
  %426 = ashr i32 %425, 1
  %427 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 13
  store i32 %426, i32* %422, align 16
  store i32 6, i32* %427, align 4
  %428 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 14
  %429 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 7
  %430 = load i16, i16* %429, align 2
  %431 = sext i16 %430 to i32
  %432 = ashr i32 %431, 1
  %433 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 15
  store i32 %432, i32* %428, align 8
  store i32 7, i32* %433, align 4
  %434 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 16
  %435 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 8
  %436 = load i16, i16* %435, align 2
  %437 = sext i16 %436 to i32
  %438 = ashr i32 %437, 1
  %439 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 17
  store i32 %438, i32* %434, align 16
  store i32 8, i32* %439, align 4
  %440 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 18
  %441 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 9
  %442 = load i16, i16* %441, align 2
  %443 = sext i16 %442 to i32
  %444 = ashr i32 %443, 1
  %445 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 19
  store i32 %444, i32* %440, align 8
  store i32 9, i32* %445, align 4
  %446 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 20
  %447 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 10
  %448 = load i16, i16* %447, align 2
  %449 = sext i16 %448 to i32
  %450 = ashr i32 %449, 1
  %451 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 21
  store i32 %450, i32* %446, align 16
  store i32 10, i32* %451, align 4
  %452 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 22
  %453 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 11
  %454 = load i16, i16* %453, align 2
  %455 = sext i16 %454 to i32
  %456 = ashr i32 %455, 1
  %457 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 23
  store i32 %456, i32* %452, align 8
  store i32 11, i32* %457, align 4
  %458 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 24
  %459 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 12
  %460 = load i16, i16* %459, align 2
  %461 = sext i16 %460 to i32
  %462 = ashr i32 %461, 1
  %463 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 25
  store i32 %462, i32* %458, align 16
  store i32 12, i32* %463, align 4
  %464 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 26
  %465 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 13
  %466 = load i16, i16* %465, align 2
  %467 = sext i16 %466 to i32
  %468 = ashr i32 %467, 1
  %469 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 27
  store i32 %468, i32* %464, align 8
  store i32 13, i32* %469, align 4
  %470 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 28
  %471 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 14
  %472 = load i16, i16* %471, align 2
  %473 = sext i16 %472 to i32
  %474 = ashr i32 %473, 1
  %475 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 29
  store i32 %474, i32* %470, align 16
  store i32 14, i32* %475, align 4
  %476 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 30
  %477 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 15
  %478 = load i16, i16* %477, align 2
  %479 = sext i16 %478 to i32
  %480 = ashr i32 %479, 1
  %481 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 31
  store i32 %480, i32* %476, align 8
  store i32 15, i32* %481, align 4
  %482 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 32
  %483 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 16
  %484 = load i16, i16* %483, align 2
  %485 = sext i16 %484 to i32
  %486 = ashr i32 %485, 1
  %487 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 33
  store i32 %486, i32* %482, align 16
  store i32 16, i32* %487, align 4
  %488 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 34
  %489 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 17
  %490 = load i16, i16* %489, align 2
  %491 = sext i16 %490 to i32
  %492 = ashr i32 %491, 1
  %493 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 35
  store i32 %492, i32* %488, align 8
  store i32 17, i32* %493, align 4
  %494 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 36
  %495 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 18
  %496 = load i16, i16* %495, align 2
  %497 = sext i16 %496 to i32
  %498 = ashr i32 %497, 1
  %499 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 37
  store i32 %498, i32* %494, align 16
  store i32 18, i32* %499, align 4
  %500 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 38
  %501 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 19
  %502 = load i16, i16* %501, align 2
  %503 = sext i16 %502 to i32
  %504 = ashr i32 %503, 1
  %505 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 39
  store i32 %504, i32* %500, align 8
  store i32 19, i32* %505, align 4
  %506 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 40
  %507 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 20
  %508 = load i16, i16* %507, align 2
  %509 = sext i16 %508 to i32
  %510 = ashr i32 %509, 1
  %511 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 41
  store i32 %510, i32* %506, align 16
  store i32 20, i32* %511, align 4
  %512 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 42
  %513 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv221, i32 1, i64 21
  %514 = load i16, i16* %513, align 2
  %515 = sext i16 %514 to i32
  %516 = ashr i32 %515, 1
  %517 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %indvars.iv221, i64 43
  store i32 %516, i32* %512, align 8
  store i32 21, i32* %517, align 4
  %518 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %indvars.iv221, i64 2
  store i32* %indvars.iv217219, i32** %518, align 8
  %indvars.iv.next222 = add nuw nsw i64 %indvars.iv221, 1
  %scevgep = getelementptr [9 x [152 x i32]], [9 x [152 x i32]]* %indvars.iv202, i64 0, i64 1, i64 0
  %519 = bitcast i32* %scevgep to [9 x [152 x i32]]*
  %scevgep208 = getelementptr [9 x [152 x i32]], [9 x [152 x i32]]* %indvars.iv207, i64 0, i64 1, i64 0
  %520 = bitcast i32* %scevgep208 to [9 x [152 x i32]]*
  %scevgep214 = getelementptr [9 x [156 x i32]], [9 x [156 x i32]]* %indvars.iv213, i64 0, i64 1, i64 0
  %521 = bitcast i32* %scevgep214 to [9 x [156 x i32]]*
  %scevgep218 = getelementptr [9 x [44 x i32]], [9 x [44 x i32]]* %indvars.iv217, i64 0, i64 1, i64 0
  %522 = bitcast i32* %scevgep218 to [9 x [44 x i32]]*
  %exitcond223 = icmp eq i64 %indvars.iv.next222, 9
  br i1 %exitcond223, label %.preheader58.preheader, label %.preheader

.preheader58.preheader:                           ; preds = %384
  %broadcast.splatinsert274 = insertelement <4 x i32> undef, i32 %0, i32 0
  %broadcast.splat275 = shufflevector <4 x i32> %broadcast.splatinsert274, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %.preheader58

.preheader58:                                     ; preds = %.preheader58.preheader, %605
  %indvars.iv199 = phi i64 [ %indvars.iv.next200, %605 ], [ 0, %.preheader58.preheader ]
  br label %vector.body

vector.body:                                      ; preds = %.preheader58
  %523 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 0
  %524 = bitcast i16* %523 to <4 x i16>*
  %wide.load = load <4 x i16>, <4 x i16>* %524, align 16
  %525 = sext <4 x i16> %wide.load to <4 x i32>
  %526 = add nsw <4 x i32> %525, <i32 7, i32 7, i32 7, i32 7>
  %527 = sdiv <4 x i32> %526, <i32 18, i32 18, i32 18, i32 18>
  %528 = add nsw <4 x i32> %527, <i32 1, i32 1, i32 1, i32 1>
  %529 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 0
  %530 = icmp sgt <4 x i32> %528, %broadcast.splat275
  %531 = select <4 x i1> %530, <4 x i32> %broadcast.splat275, <4 x i32> %528
  %532 = bitcast i32* %529 to <4 x i32>*
  store <4 x i32> %531, <4 x i32>* %532, align 4
  %533 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 4
  %534 = bitcast i16* %533 to <4 x i16>*
  %wide.load.1 = load <4 x i16>, <4 x i16>* %534, align 8
  %535 = sext <4 x i16> %wide.load.1 to <4 x i32>
  %536 = add nsw <4 x i32> %535, <i32 7, i32 7, i32 7, i32 7>
  %537 = sdiv <4 x i32> %536, <i32 18, i32 18, i32 18, i32 18>
  %538 = add nsw <4 x i32> %537, <i32 1, i32 1, i32 1, i32 1>
  %539 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 4
  %540 = icmp sgt <4 x i32> %538, %broadcast.splat275
  %541 = select <4 x i1> %540, <4 x i32> %broadcast.splat275, <4 x i32> %538
  %542 = bitcast i32* %539 to <4 x i32>*
  store <4 x i32> %541, <4 x i32>* %542, align 4
  %543 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 8
  %544 = bitcast i16* %543 to <4 x i16>*
  %wide.load.2 = load <4 x i16>, <4 x i16>* %544, align 16
  %545 = sext <4 x i16> %wide.load.2 to <4 x i32>
  %546 = add nsw <4 x i32> %545, <i32 7, i32 7, i32 7, i32 7>
  %547 = sdiv <4 x i32> %546, <i32 18, i32 18, i32 18, i32 18>
  %548 = add nsw <4 x i32> %547, <i32 1, i32 1, i32 1, i32 1>
  %549 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 8
  %550 = icmp sgt <4 x i32> %548, %broadcast.splat275
  %551 = select <4 x i1> %550, <4 x i32> %broadcast.splat275, <4 x i32> %548
  %552 = bitcast i32* %549 to <4 x i32>*
  store <4 x i32> %551, <4 x i32>* %552, align 4
  %553 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 12
  %554 = bitcast i16* %553 to <4 x i16>*
  %wide.load.3 = load <4 x i16>, <4 x i16>* %554, align 8
  %555 = sext <4 x i16> %wide.load.3 to <4 x i32>
  %556 = add nsw <4 x i32> %555, <i32 7, i32 7, i32 7, i32 7>
  %557 = sdiv <4 x i32> %556, <i32 18, i32 18, i32 18, i32 18>
  %558 = add nsw <4 x i32> %557, <i32 1, i32 1, i32 1, i32 1>
  %559 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 12
  %560 = icmp sgt <4 x i32> %558, %broadcast.splat275
  %561 = select <4 x i1> %560, <4 x i32> %broadcast.splat275, <4 x i32> %558
  %562 = bitcast i32* %559 to <4 x i32>*
  store <4 x i32> %561, <4 x i32>* %562, align 4
  %563 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 16
  %564 = bitcast i16* %563 to <4 x i16>*
  %wide.load.4 = load <4 x i16>, <4 x i16>* %564, align 16
  %565 = sext <4 x i16> %wide.load.4 to <4 x i32>
  %566 = add nsw <4 x i32> %565, <i32 7, i32 7, i32 7, i32 7>
  %567 = sdiv <4 x i32> %566, <i32 18, i32 18, i32 18, i32 18>
  %568 = add nsw <4 x i32> %567, <i32 1, i32 1, i32 1, i32 1>
  %569 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 16
  %570 = icmp sgt <4 x i32> %568, %broadcast.splat275
  %571 = select <4 x i1> %570, <4 x i32> %broadcast.splat275, <4 x i32> %568
  %572 = bitcast i32* %569 to <4 x i32>*
  store <4 x i32> %571, <4 x i32>* %572, align 4
  br label %scalar.ph

scalar.ph:                                        ; preds = %vector.body
  %573 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 20
  %574 = load i16, i16* %573, align 8
  %575 = sext i16 %574 to i32
  %576 = add nsw i32 %575, 7
  %577 = sdiv i32 %576, 18
  %578 = add nsw i32 %577, 1
  %579 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 20
  %580 = icmp sgt i32 %578, %0
  %. = select i1 %580, i32 %0, i32 %578
  store i32 %., i32* %579, align 4
  %581 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 21
  %582 = load i16, i16* %581, align 2
  %583 = sext i16 %582 to i32
  %584 = add nsw i32 %583, 7
  %585 = sdiv i32 %584, 18
  %586 = add nsw i32 %585, 1
  %587 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 21
  %588 = icmp sgt i32 %586, %0
  %..1 = select i1 %588, i32 %0, i32 %586
  store i32 %..1, i32* %587, align 4
  %589 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 0, i64 22
  %590 = load i16, i16* %589, align 4
  %591 = sext i16 %590 to i32
  %592 = add nsw i32 %591, 7
  %593 = sdiv i32 %592, 18
  %594 = add nsw i32 %593, 1
  %595 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %indvars.iv199, i64 22
  %596 = icmp sgt i32 %594, %0
  %..2 = select i1 %596, i32 %0, i32 %594
  store i32 %..2, i32* %595, align 4
  br label %.preheader57

.preheader57:                                     ; preds = %scalar.ph, %.preheader57
  %indvars.iv196 = phi i64 [ %indvars.iv.next197, %.preheader57 ], [ 0, %scalar.ph ]
  %597 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %indvars.iv199, i32 2, i64 %indvars.iv196
  %598 = load i16, i16* %597, align 2
  %599 = sext i16 %598 to i32
  %600 = add nsw i32 %599, -1
  %601 = sdiv i32 %600, 18
  %602 = add nsw i32 %601, 1
  %603 = getelementptr inbounds [9 x [14 x i32]], [9 x [14 x i32]]* @shortLimit, i64 0, i64 %indvars.iv199, i64 %indvars.iv196
  %604 = icmp sgt i32 %602, %0
  %.42 = select i1 %604, i32 %0, i32 %602
  store i32 %.42, i32* %603, align 4
  %indvars.iv.next197 = add nuw nsw i64 %indvars.iv196, 1
  %exitcond198 = icmp eq i64 %indvars.iv.next197, 14
  br i1 %exitcond198, label %605, label %.preheader57

; <label>:605:                                    ; preds = %.preheader57
  %indvars.iv.next200 = add nuw nsw i64 %indvars.iv199, 1
  %exitcond201 = icmp eq i64 %indvars.iv.next200, 9
  br i1 %exitcond201, label %.preheader47.preheader157, label %.preheader58

.preheader47:                                     ; preds = %608, %.preheader47.preheader157
  %indvars.iv145 = phi i64 [ 0, %.preheader47.preheader157 ], [ %indvars.iv.next146, %608 ]
  %606 = mul nuw nsw i64 %indvars.iv145, 80
  %607 = trunc i64 %indvars.iv145 to i32
  br label %610

; <label>:608:                                    ; preds = %610
  %indvars.iv.next146 = add nuw nsw i64 %indvars.iv145, 1
  %exitcond147 = icmp eq i64 %indvars.iv.next146, 5
  br i1 %exitcond147, label %609, label %.preheader47

; <label>:609:                                    ; preds = %608
  store i32 4096, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 400), align 16
  store i32 4160, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 401), align 4
  store i32 4224, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 402), align 8
  store i32 4288, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 403), align 4
  store i32 4104, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 404), align 16
  store i32 4168, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 405), align 4
  store i32 4232, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 406), align 8
  store i32 4296, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 407), align 4
  store i32 4112, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 408), align 16
  store i32 4176, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 409), align 4
  store i32 4240, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 410), align 8
  store i32 4304, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 411), align 4
  store i32 4120, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 412), align 16
  store i32 4184, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 413), align 4
  store i32 4248, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 414), align 8
  store i32 4312, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 415), align 4
  store i32 4128, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 416), align 16
  store i32 4192, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 417), align 4
  store i32 4256, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 418), align 8
  store i32 4320, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 419), align 4
  store i32 4097, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 420), align 16
  store i32 4161, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 421), align 4
  store i32 4225, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 422), align 8
  store i32 4289, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 423), align 4
  store i32 4105, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 424), align 16
  store i32 4169, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 425), align 4
  store i32 4233, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 426), align 8
  store i32 4297, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 427), align 4
  store i32 4113, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 428), align 16
  store i32 4177, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 429), align 4
  store i32 4241, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 430), align 8
  store i32 4305, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 431), align 4
  store i32 4121, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 432), align 16
  store i32 4185, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 433), align 4
  store i32 4249, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 434), align 8
  store i32 4313, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 435), align 4
  store i32 4129, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 436), align 16
  store i32 4193, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 437), align 4
  store i32 4257, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 438), align 8
  store i32 4321, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 439), align 4
  store i32 4098, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 440), align 16
  store i32 4162, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 441), align 4
  store i32 4226, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 442), align 8
  store i32 4290, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 443), align 4
  store i32 4106, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 444), align 16
  store i32 4170, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 445), align 4
  store i32 4234, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 446), align 8
  store i32 4298, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 447), align 4
  store i32 4114, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 448), align 16
  store i32 4178, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 449), align 4
  store i32 4242, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 450), align 8
  store i32 4306, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 451), align 4
  store i32 4122, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 452), align 16
  store i32 4186, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 453), align 4
  store i32 4250, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 454), align 8
  store i32 4314, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 455), align 4
  store i32 4130, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 456), align 16
  store i32 4194, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 457), align 4
  store i32 4258, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 458), align 8
  store i32 4322, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 459), align 4
  store i32 4099, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 460), align 16
  store i32 4163, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 461), align 4
  store i32 4227, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 462), align 8
  store i32 4291, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 463), align 4
  store i32 4107, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 464), align 16
  store i32 4171, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 465), align 4
  store i32 4235, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 466), align 8
  store i32 4299, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 467), align 4
  store i32 4115, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 468), align 16
  store i32 4179, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 469), align 4
  store i32 4243, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 470), align 8
  store i32 4307, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 471), align 4
  store i32 4123, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 472), align 16
  store i32 4187, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 473), align 4
  store i32 4251, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 474), align 8
  store i32 4315, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 475), align 4
  store i32 4131, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 476), align 16
  store i32 4195, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 477), align 4
  store i32 4259, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 478), align 8
  store i32 4323, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 479), align 4
  store i32 4100, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 480), align 16
  store i32 4164, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 481), align 4
  store i32 4228, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 482), align 8
  store i32 4292, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 483), align 4
  store i32 4108, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 484), align 16
  store i32 4172, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 485), align 4
  store i32 4236, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 486), align 8
  store i32 4300, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 487), align 4
  store i32 4116, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 488), align 16
  store i32 4180, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 489), align 4
  store i32 4244, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 490), align 8
  store i32 4308, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 491), align 4
  store i32 4124, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 492), align 16
  store i32 4188, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 493), align 4
  store i32 4252, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 494), align 8
  store i32 4316, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 495), align 4
  store i32 4132, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 496), align 16
  store i32 4196, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 497), align 4
  store i32 4260, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 498), align 8
  store i32 4324, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 499), align 4
  ret void

; <label>:610:                                    ; preds = %.preheader47, %610
  %indvars.iv = phi i64 [ 0, %.preheader47 ], [ %indvars.iv.next, %610 ]
  %611 = shl i64 %indvars.iv, 4
  %612 = add nuw nsw i64 %611, %606
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %613 = shl i32 %indvars.iv.tr, 3
  %614 = or i32 %613, %607
  %615 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %612
  store i32 %614, i32* %615, align 16
  %616 = or i64 %612, 1
  %617 = or i32 %614, 512
  %618 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %616
  store i32 %617, i32* %618, align 4
  %619 = or i64 %612, 2
  %620 = or i32 %614, 1024
  %621 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %619
  store i32 %620, i32* %621, align 8
  %622 = or i64 %612, 3
  %623 = or i32 %614, 1536
  %624 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %622
  store i32 %623, i32* %624, align 4
  %625 = or i32 %614, 64
  %626 = or i64 %612, 4
  %627 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %626
  store i32 %625, i32* %627, align 16
  %628 = or i64 %612, 5
  %629 = or i32 %614, 576
  %630 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %628
  store i32 %629, i32* %630, align 4
  %631 = or i64 %612, 6
  %632 = or i32 %614, 1088
  %633 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %631
  store i32 %632, i32* %633, align 8
  %634 = or i64 %612, 7
  %635 = or i32 %614, 1600
  %636 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %634
  store i32 %635, i32* %636, align 4
  %637 = or i32 %614, 128
  %638 = or i64 %612, 8
  %639 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %638
  store i32 %637, i32* %639, align 16
  %640 = or i64 %612, 9
  %641 = or i32 %614, 640
  %642 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %640
  store i32 %641, i32* %642, align 4
  %643 = or i64 %612, 10
  %644 = or i32 %614, 1152
  %645 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %643
  store i32 %644, i32* %645, align 8
  %646 = or i64 %612, 11
  %647 = or i32 %614, 1664
  %648 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %646
  store i32 %647, i32* %648, align 4
  %649 = or i32 %614, 192
  %650 = or i64 %612, 12
  %651 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %650
  store i32 %649, i32* %651, align 16
  %652 = or i64 %612, 13
  %653 = or i32 %614, 704
  %654 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %652
  store i32 %653, i32* %654, align 4
  %655 = or i64 %612, 14
  %656 = or i32 %614, 1216
  %657 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %655
  store i32 %656, i32* %657, align 8
  %658 = or i64 %612, 15
  %659 = or i32 %614, 1728
  %660 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %658
  store i32 %659, i32* %660, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 5
  br i1 %exitcond, label %608, label %610

.preheader47.preheader157:                        ; preds = %605
  store i32 12288, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 0), align 16
  store i32 12352, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 1), align 4
  store i32 12416, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 2), align 8
  store i32 12480, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 3), align 4
  store i32 12544, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 4), align 16
  store i32 12608, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 5), align 4
  store i32 12296, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 6), align 8
  store i32 12360, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 7), align 4
  store i32 12424, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 8), align 16
  store i32 12488, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 9), align 4
  store i32 12552, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 10), align 8
  store i32 12616, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 11), align 4
  store i32 12304, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 12), align 16
  store i32 12368, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 13), align 4
  store i32 12432, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 14), align 8
  store i32 12496, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 15), align 4
  store i32 12560, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 16), align 16
  store i32 12624, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 17), align 4
  store i32 12312, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 18), align 8
  store i32 12376, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 19), align 4
  store i32 12440, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 20), align 16
  store i32 12504, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 21), align 4
  store i32 12568, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 22), align 8
  store i32 12632, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 23), align 4
  store i32 12320, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 24), align 16
  store i32 12384, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 25), align 4
  store i32 12448, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 26), align 8
  store i32 12512, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 27), align 4
  store i32 12576, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 28), align 16
  store i32 12640, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 29), align 4
  store i32 12328, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 30), align 8
  store i32 12392, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 31), align 4
  store i32 12456, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 32), align 16
  store i32 12520, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 33), align 4
  store i32 12584, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 34), align 8
  store i32 12648, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 35), align 4
  store i32 12289, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 36), align 16
  store i32 12353, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 37), align 4
  store i32 12417, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 38), align 8
  store i32 12481, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 39), align 4
  store i32 12545, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 40), align 16
  store i32 12609, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 41), align 4
  store i32 12297, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 42), align 8
  store i32 12361, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 43), align 4
  store i32 12425, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 44), align 16
  store i32 12489, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 45), align 4
  store i32 12553, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 46), align 8
  store i32 12617, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 47), align 4
  store i32 12305, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 48), align 16
  store i32 12369, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 49), align 4
  store i32 12433, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 50), align 8
  store i32 12497, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 51), align 4
  store i32 12561, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 52), align 16
  store i32 12625, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 53), align 4
  store i32 12313, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 54), align 8
  store i32 12377, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 55), align 4
  store i32 12441, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 56), align 16
  store i32 12505, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 57), align 4
  store i32 12569, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 58), align 8
  store i32 12633, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 59), align 4
  store i32 12321, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 60), align 16
  store i32 12385, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 61), align 4
  store i32 12449, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 62), align 8
  store i32 12513, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 63), align 4
  store i32 12577, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 64), align 16
  store i32 12641, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 65), align 4
  store i32 12329, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 66), align 8
  store i32 12393, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 67), align 4
  store i32 12457, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 68), align 16
  store i32 12521, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 69), align 4
  store i32 12585, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 70), align 8
  store i32 12649, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 71), align 4
  store i32 12290, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 72), align 16
  store i32 12354, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 73), align 4
  store i32 12418, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 74), align 8
  store i32 12482, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 75), align 4
  store i32 12546, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 76), align 16
  store i32 12610, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 77), align 4
  store i32 12298, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 78), align 8
  store i32 12362, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 79), align 4
  store i32 12426, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 80), align 16
  store i32 12490, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 81), align 4
  store i32 12554, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 82), align 8
  store i32 12618, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 83), align 4
  store i32 12306, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 84), align 16
  store i32 12370, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 85), align 4
  store i32 12434, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 86), align 8
  store i32 12498, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 87), align 4
  store i32 12562, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 88), align 16
  store i32 12626, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 89), align 4
  store i32 12314, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 90), align 8
  store i32 12378, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 91), align 4
  store i32 12442, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 92), align 16
  store i32 12506, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 93), align 4
  store i32 12570, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 94), align 8
  store i32 12634, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 95), align 4
  store i32 12322, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 96), align 16
  store i32 12386, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 97), align 4
  store i32 12450, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 98), align 8
  store i32 12514, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 99), align 4
  store i32 12578, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 100), align 16
  store i32 12642, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 101), align 4
  store i32 12330, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 102), align 8
  store i32 12394, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 103), align 4
  store i32 12458, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 104), align 16
  store i32 12522, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 105), align 4
  store i32 12586, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 106), align 8
  store i32 12650, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 107), align 4
  store i32 12291, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 108), align 16
  store i32 12355, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 109), align 4
  store i32 12419, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 110), align 8
  store i32 12483, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 111), align 4
  store i32 12547, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 112), align 16
  store i32 12611, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 113), align 4
  store i32 12299, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 114), align 8
  store i32 12363, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 115), align 4
  store i32 12427, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 116), align 16
  store i32 12491, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 117), align 4
  store i32 12555, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 118), align 8
  store i32 12619, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 119), align 4
  store i32 12307, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 120), align 16
  store i32 12371, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 121), align 4
  store i32 12435, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 122), align 8
  store i32 12499, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 123), align 4
  store i32 12563, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 124), align 16
  store i32 12627, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 125), align 4
  store i32 12315, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 126), align 8
  store i32 12379, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 127), align 4
  store i32 12443, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 128), align 16
  store i32 12507, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 129), align 4
  store i32 12571, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 130), align 8
  store i32 12635, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 131), align 4
  store i32 12323, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 132), align 16
  store i32 12387, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 133), align 4
  store i32 12451, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 134), align 8
  store i32 12515, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 135), align 4
  store i32 12579, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 136), align 16
  store i32 12643, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 137), align 4
  store i32 12331, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 138), align 8
  store i32 12395, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 139), align 4
  store i32 12459, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 140), align 16
  store i32 12523, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 141), align 4
  store i32 12587, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 142), align 8
  store i32 12651, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 143), align 4
  store i32 12292, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 144), align 16
  store i32 12356, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 145), align 4
  store i32 12420, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 146), align 8
  store i32 12484, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 147), align 4
  store i32 12548, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 148), align 16
  store i32 12612, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 149), align 4
  store i32 12300, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 150), align 8
  store i32 12364, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 151), align 4
  store i32 12428, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 152), align 16
  store i32 12492, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 153), align 4
  store i32 12556, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 154), align 8
  store i32 12620, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 155), align 4
  store i32 12308, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 156), align 16
  store i32 12372, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 157), align 4
  store i32 12436, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 158), align 8
  store i32 12500, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 159), align 4
  store i32 12564, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 160), align 16
  store i32 12628, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 161), align 4
  store i32 12316, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 162), align 8
  store i32 12380, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 163), align 4
  store i32 12444, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 164), align 16
  store i32 12508, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 165), align 4
  store i32 12572, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 166), align 8
  store i32 12636, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 167), align 4
  store i32 12324, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 168), align 16
  store i32 12388, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 169), align 4
  store i32 12452, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 170), align 8
  store i32 12516, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 171), align 4
  store i32 12580, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 172), align 16
  store i32 12644, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 173), align 4
  store i32 12332, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 174), align 8
  store i32 12396, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 175), align 4
  store i32 12460, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 176), align 16
  store i32 12524, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 177), align 4
  store i32 12588, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 178), align 8
  store i32 12652, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 179), align 4
  store i32 16384, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 180), align 16
  store i32 16448, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 181), align 4
  store i32 16512, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 182), align 8
  store i32 16576, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 183), align 4
  store i32 16392, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 184), align 16
  store i32 16456, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 185), align 4
  store i32 16520, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 186), align 8
  store i32 16584, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 187), align 4
  store i32 16400, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 188), align 16
  store i32 16464, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 189), align 4
  store i32 16528, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 190), align 8
  store i32 16592, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 191), align 4
  store i32 16408, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 192), align 16
  store i32 16472, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 193), align 4
  store i32 16536, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 194), align 8
  store i32 16600, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 195), align 4
  store i32 16385, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 196), align 16
  store i32 16449, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 197), align 4
  store i32 16513, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 198), align 8
  store i32 16577, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 199), align 4
  store i32 16393, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 200), align 16
  store i32 16457, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 201), align 4
  store i32 16521, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 202), align 8
  store i32 16585, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 203), align 4
  store i32 16401, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 204), align 16
  store i32 16465, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 205), align 4
  store i32 16529, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 206), align 8
  store i32 16593, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 207), align 4
  store i32 16409, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 208), align 16
  store i32 16473, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 209), align 4
  store i32 16537, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 210), align 8
  store i32 16601, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 211), align 4
  store i32 16386, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 212), align 16
  store i32 16450, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 213), align 4
  store i32 16514, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 214), align 8
  store i32 16578, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 215), align 4
  store i32 16394, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 216), align 16
  store i32 16458, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 217), align 4
  store i32 16522, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 218), align 8
  store i32 16586, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 219), align 4
  store i32 16402, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 220), align 16
  store i32 16466, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 221), align 4
  store i32 16530, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 222), align 8
  store i32 16594, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 223), align 4
  store i32 16410, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 224), align 16
  store i32 16474, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 225), align 4
  store i32 16538, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 226), align 8
  store i32 16602, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 227), align 4
  store i32 16387, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 228), align 16
  store i32 16451, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 229), align 4
  store i32 16515, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 230), align 8
  store i32 16579, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 231), align 4
  store i32 16395, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 232), align 16
  store i32 16459, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 233), align 4
  store i32 16523, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 234), align 8
  store i32 16587, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 235), align 4
  store i32 16403, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 236), align 16
  store i32 16467, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 237), align 4
  store i32 16531, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 238), align 8
  store i32 16595, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 239), align 4
  store i32 16411, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 240), align 16
  store i32 16475, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 241), align 4
  store i32 16539, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 242), align 8
  store i32 16603, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 243), align 4
  store i32 20480, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 244), align 16
  store i32 40960, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 500), align 16
  store i32 20488, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 245), align 4
  store i32 40968, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 501), align 4
  store i32 20496, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 246), align 8
  store i32 40976, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 502), align 8
  store i32 20481, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 247), align 4
  store i32 40961, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 503), align 4
  store i32 20489, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 248), align 16
  store i32 40969, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 504), align 16
  store i32 20497, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 249), align 4
  store i32 40977, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 505), align 4
  store i32 20482, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 250), align 8
  store i32 40962, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 506), align 8
  store i32 20490, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 251), align 4
  store i32 40970, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 507), align 4
  store i32 20498, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 252), align 16
  store i32 40978, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 508), align 16
  store i32 20483, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 253), align 4
  store i32 40963, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 509), align 4
  store i32 20491, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 254), align 8
  store i32 40971, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 510), align 8
  store i32 20499, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 255), align 4
  store i32 40979, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 511), align 4
  br label %.preheader47

cdce.call.1:                                      ; preds = %cdce.end
  %661 = tail call double @cos(double %131) #6
  br label %cdce.end.1

cdce.end.1:                                       ; preds = %cdce.call.1, %cdce.end
  %662 = mul nuw nsw i64 %113, 5
  %663 = trunc i64 %662 to i32
  %664 = sitofp i32 %663 to double
  %665 = fmul double %664, 0x3FC0C152382D7365
  %666 = fcmp oeq double %665, 0xFFF0000000000000
  %667 = fcmp oeq double %665, 0x7FF0000000000000
  %668 = or i1 %667, %666
  br i1 %668, label %cdce.call.2, label %cdce.end.2, !prof !1

cdce.call.2:                                      ; preds = %cdce.end.1
  %669 = tail call double @cos(double %665) #6
  br label %cdce.end.2

cdce.end.2:                                       ; preds = %cdce.call.2, %cdce.end.1
  %670 = mul nuw nsw i64 %113, 7
  %671 = trunc i64 %670 to i32
  %672 = sitofp i32 %671 to double
  %673 = fmul double %672, 0x3FC0C152382D7365
  %674 = fcmp oeq double %673, 0xFFF0000000000000
  %675 = fcmp oeq double %673, 0x7FF0000000000000
  %676 = or i1 %675, %674
  br i1 %676, label %cdce.call.3, label %cdce.end.3, !prof !1

cdce.call.3:                                      ; preds = %cdce.end.2
  %677 = tail call double @cos(double %673) #6
  br label %cdce.end.3

cdce.end.3:                                       ; preds = %cdce.call.3, %cdce.end.2
  %678 = mul nuw nsw i64 %113, 9
  %679 = trunc i64 %678 to i32
  %680 = sitofp i32 %679 to double
  %681 = fmul double %680, 0x3FC0C152382D7365
  %682 = fcmp oeq double %681, 0xFFF0000000000000
  %683 = fcmp oeq double %681, 0x7FF0000000000000
  %684 = or i1 %683, %682
  br i1 %684, label %cdce.call.4, label %cdce.end.4, !prof !1

cdce.call.4:                                      ; preds = %cdce.end.3
  %685 = tail call double @cos(double %681) #6
  br label %cdce.end.4

cdce.end.4:                                       ; preds = %cdce.call.4, %cdce.end.3
  %686 = mul nuw nsw i64 %113, 11
  %687 = trunc i64 %686 to i32
  %688 = sitofp i32 %687 to double
  %689 = fmul double %688, 0x3FC0C152382D7365
  %690 = fcmp oeq double %689, 0xFFF0000000000000
  %691 = fcmp oeq double %689, 0x7FF0000000000000
  %692 = or i1 %691, %690
  br i1 %692, label %cdce.call.5, label %cdce.end.5, !prof !1

cdce.call.5:                                      ; preds = %cdce.end.4
  %693 = tail call double @cos(double %689) #6
  br label %cdce.end.5

cdce.end.5:                                       ; preds = %cdce.call.5, %cdce.end.4
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond246 = icmp eq i64 %indvars.iv.next245, 12
  br i1 %exitcond246, label %.lr.ph.preheader, label %105

.lr.ph.preheader:                                 ; preds = %cdce.end.5
  br label %.lr.ph

.preheader71.3:                                   ; preds = %.preheader71.preheader, %.preheader71.3
  %indvars.iv.next266.2273 = phi i64 [ 3, %.preheader71.preheader ], [ %indvars.iv.next266.2, %.preheader71.3 ]
  %indvars.iv265272 = phi i64 [ 0, %.preheader71.preheader ], [ %indvars.iv.next266.3, %.preheader71.3 ]
  %694 = trunc i64 %indvars.iv.next266.2273 to i32
  %695 = sitofp i32 %694 to double
  %696 = tail call double @pow(double %695, double 0x3FF5555555555555) #6
  %697 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %indvars.iv.next266.2273
  store double %696, double* %697, align 8
  %indvars.iv.next266.3 = add nsw i64 %indvars.iv265272, 4
  %698 = trunc i64 %indvars.iv.next266.3 to i32
  %699 = sitofp i32 %698 to double
  %700 = tail call double @pow(double %699, double 0x3FF5555555555555) #6
  %701 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %indvars.iv.next266.3
  store double %700, double* %701, align 16
  %indvars.iv.next266 = or i64 %indvars.iv.next266.3, 1
  %702 = trunc i64 %indvars.iv.next266 to i32
  %703 = sitofp i32 %702 to double
  %704 = tail call double @pow(double %703, double 0x3FF5555555555555) #6
  %705 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %indvars.iv.next266
  store double %704, double* %705, align 8
  %indvars.iv.next266.1 = or i64 %indvars.iv.next266.3, 2
  %706 = trunc i64 %indvars.iv.next266.1 to i32
  %707 = sitofp i32 %706 to double
  %708 = tail call double @pow(double %707, double 0x3FF5555555555555) #6
  %709 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %indvars.iv.next266.1
  store double %708, double* %709, align 16
  %indvars.iv.next266.2 = or i64 %indvars.iv.next266.3, 3
  %exitcond267.2 = icmp eq i64 %indvars.iv.next266.2, 8207
  br i1 %exitcond267.2, label %.preheader70, label %.preheader71.3
}

; Function Attrs: nounwind
declare double @pow(double, double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind
declare double @tan(double) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define i32 @do_layer3(%struct.frame* nocapture readonly, i8*, i32*) local_unnamed_addr #0 {
  %4 = alloca [2 x [39 x i32]], align 16
  %5 = alloca %struct.III_sideinfo, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 9
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %8, 1
  %14 = lshr i32 %10, 31
  %15 = add nuw nsw i32 %14, 1
  %.09 = select i1 %13, i32 0, i32 %10
  %16 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 12
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 13
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 2
  %23 = and i32 %21, 1
  br label %24

; <label>:24:                                     ; preds = %3, %19
  %.011 = phi i32 [ %23, %19 ], [ 0, %3 ]
  %.010 = phi i32 [ %22, %19 ], [ 0, %3 ]
  %25 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  %28 = sext i32 %12 to i64
  br i1 %27, label %30, label %29

; <label>:29:                                     ; preds = %24
  call fastcc void @III_get_side_info_2(%struct.III_sideinfo* nonnull %5, i32 %8, i32 %.010, i64 %28, i32 %.09)
  br label %31

; <label>:30:                                     ; preds = %24
  call fastcc void @III_get_side_info_1(%struct.III_sideinfo* nonnull %5, i32 %8, i32 %.010, i64 %28, i32 %.09)
  br label %31

; <label>:31:                                     ; preds = %30, %29
  %.015 = phi i64 [ 1, %29 ], [ 2, %30 ]
  %32 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = call i32 @set_pointer(i64 %34) #6
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %.loopexit33, label %.preheader32

.preheader32:                                     ; preds = %31
  %37 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 0, i64 0
  %38 = icmp eq i32 %8, 2
  %39 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 0
  %40 = icmp eq i32 %.010, 0
  %41 = icmp eq i32 %.011, 0
  %42 = or i32 %.010, %.011
  %or.cond.not = icmp ne i32 %42, 0
  %43 = icmp eq i32 %.09, 3
  %or.cond20 = or i1 %43, %or.cond.not
  %44 = icmp sgt i32 %.09, -1
  %45 = zext i32 %15 to i64
  %46 = select i1 %13, i64 1, i64 %45
  br label %47

; <label>:47:                                     ; preds = %.preheader32, %.us-lcssa.us
  %indvars.iv58 = phi i64 [ 0, %.preheader32 ], [ %indvars.iv.next59, %.us-lcssa.us ]
  %.0745 = phi i32 [ 0, %.preheader32 ], [ %.1.lcssa, %.us-lcssa.us ]
  %48 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 0, i32 0, i64 %indvars.iv58
  %49 = load i32, i32* %25, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

; <label>:51:                                     ; preds = %47
  %52 = call fastcc i32 @III_get_scale_factors_2(i32* nonnull %37, %struct.gr_info_s* %48, i32 0)
  br label %55

; <label>:53:                                     ; preds = %47
  %54 = call fastcc i32 @III_get_scale_factors_1(i32* nonnull %37, %struct.gr_info_s* %48)
  br label %55

; <label>:55:                                     ; preds = %53, %51
  %.017.in = phi i32 [ %52, %51 ], [ %54, %53 ]
  %56 = call fastcc i32 @III_dequantize_sample([18 x double]* getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0), i32* nonnull %37, %struct.gr_info_s* %48, i32 %12, i32 %.017.in)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %.loopexit33.loopexit

; <label>:58:                                     ; preds = %55
  br i1 %38, label %59, label %.preheader27.preheader

.preheader27.preheader.loopexit:                  ; preds = %.lr.ph41
  br label %.preheader27.preheader

.preheader27.preheader.loopexit62:                ; preds = %.lr.ph
  br label %.preheader27.preheader

.preheader27.preheader:                           ; preds = %.preheader27.preheader.loopexit62, %.preheader27.preheader.loopexit, %.preheader28, %.preheader29, %97, %58
  br label %.preheader27

; <label>:59:                                     ; preds = %58
  %60 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %indvars.iv58
  %61 = load i32, i32* %25, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %65, label %63

; <label>:63:                                     ; preds = %59
  %64 = call fastcc i32 @III_get_scale_factors_2(i32* %39, %struct.gr_info_s* %60, i32 %.011)
  br label %67

; <label>:65:                                     ; preds = %59
  %66 = call fastcc i32 @III_get_scale_factors_1(i32* %39, %struct.gr_info_s* %60)
  br label %67

; <label>:67:                                     ; preds = %65, %63
  %.019.in = phi i32 [ %64, %63 ], [ %66, %65 ]
  %68 = call fastcc i32 @III_dequantize_sample([18 x double]* getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0), i32* %39, %struct.gr_info_s* %60, i32 %12, i32 %.019.in)
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %.loopexit33.loopexit

; <label>:70:                                     ; preds = %67
  br i1 %40, label %.loopexit, label %.preheader31.preheader

.preheader31.preheader:                           ; preds = %70
  br label %.preheader31

.preheader31:                                     ; preds = %.preheader31.preheader, %.preheader31
  %indvars.iv = phi i64 [ %indvars.iv.next.2, %.preheader31 ], [ 0, %.preheader31.preheader ]
  %71 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %indvars.iv
  %72 = load double, double* %71, align 8
  %73 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv
  %74 = load double, double* %73, align 8
  %75 = fsub double %72, %74
  store double %75, double* %73, align 8
  %76 = fadd double %72, %74
  store double %76, double* %71, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %77 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %indvars.iv.next
  %78 = load double, double* %77, align 8
  %79 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv.next
  %80 = load double, double* %79, align 8
  %81 = fsub double %78, %80
  store double %81, double* %79, align 8
  %82 = fadd double %78, %80
  store double %82, double* %77, align 8
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %83 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %indvars.iv.next.1
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv.next.1
  %86 = load double, double* %85, align 8
  %87 = fsub double %84, %86
  store double %87, double* %85, align 8
  %88 = fadd double %84, %86
  store double %88, double* %83, align 8
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 576
  br i1 %exitcond.2, label %.loopexit.loopexit, label %.preheader31

.loopexit.loopexit:                               ; preds = %.preheader31
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %70
  br i1 %41, label %90, label %.thread

.thread:                                          ; preds = %.loopexit
  %89 = load i32, i32* %25, align 4
  call fastcc void @III_i_stereo(i32* %39, %struct.gr_info_s* %60, i32 %12, i32 %.010, i32 %89)
  br label %91

; <label>:90:                                     ; preds = %.loopexit
  br i1 %or.cond20, label %91, label %97

; <label>:91:                                     ; preds = %.thread, %90
  %92 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %indvars.iv58, i32 10
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 0, i32 0, i64 %indvars.iv58, i32 10
  %95 = load i32, i32* %94, align 8
  %96 = icmp ugt i32 %93, %95
  %.25 = select i1 %96, i32* %94, i32* %92
  %.26 = select i1 %96, i32 %93, i32 %95
  store i32 %.26, i32* %.25, align 8
  br label %97

; <label>:97:                                     ; preds = %90, %91
  switch i32 %.09, label %.preheader27.preheader [
    i32 3, label %.preheader28
    i32 1, label %.preheader29
  ]

.preheader29:                                     ; preds = %97
  %98 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %indvars.iv58, i32 10
  %99 = load i32, i32* %98, align 8
  %100 = mul i32 %99, 18
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %.preheader27.preheader, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader29
  br label %.lr.ph

.preheader28:                                     ; preds = %97
  %102 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %indvars.iv58, i32 10
  %103 = load i32, i32* %102, align 8
  %104 = mul i32 %103, 18
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %.preheader27.preheader, label %.lr.ph41.preheader

.lr.ph41.preheader:                               ; preds = %.preheader28
  br label %.lr.ph41

.lr.ph41:                                         ; preds = %.lr.ph41.preheader, %.lr.ph41
  %.0840 = phi double* [ %109, %.lr.ph41 ], [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), %.lr.ph41.preheader ]
  %.01239 = phi double* [ %111, %.lr.ph41 ], [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 0), %.lr.ph41.preheader ]
  %.01638 = phi i32 [ %110, %.lr.ph41 ], [ 0, %.lr.ph41.preheader ]
  %106 = load double, double* %.01239, align 8
  %107 = load double, double* %.0840, align 8
  %108 = fadd double %106, %107
  store double %108, double* %.01239, align 8
  %109 = getelementptr inbounds double, double* %.0840, i64 1
  %110 = add nuw nsw i32 %.01638, 1
  %111 = getelementptr inbounds double, double* %.01239, i64 1
  %112 = load i32, i32* %102, align 8
  %113 = mul i32 %112, 18
  %114 = icmp ult i32 %110, %113
  br i1 %114, label %.lr.ph41, label %.preheader27.preheader.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.0137 = phi double* [ %119, %.lr.ph ], [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), %.lr.ph.preheader ]
  %.0236 = phi double* [ %118, %.lr.ph ], [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 0), %.lr.ph.preheader ]
  %.0335 = phi i32 [ %120, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %115 = bitcast double* %.0137 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast double* %.0236 to i64*
  store i64 %116, i64* %117, align 8
  %118 = getelementptr inbounds double, double* %.0236, i64 1
  %119 = getelementptr inbounds double, double* %.0137, i64 1
  %120 = add nuw nsw i32 %.0335, 1
  %121 = load i32, i32* %98, align 8
  %122 = mul i32 %121, 18
  %123 = icmp ult i32 %120, %122
  br i1 %123, label %.lr.ph, label %.preheader27.preheader.loopexit62

.preheader:                                       ; preds = %.preheader27
  br i1 %44, label %.preheader.split.us, label %.preheader.split.preheader

.preheader.split.preheader:                       ; preds = %.preheader
  br label %.preheader.split

.preheader.split.us:                              ; preds = %.preheader
  %124 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 0, i64 0), i8* %1, i32* %2) #6
  %125 = add nsw i32 %124, %.0745
  %126 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 1, i64 0), i8* %1, i32* %2) #6
  %127 = add nsw i32 %126, %125
  %128 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 2, i64 0), i8* %1, i32* %2) #6
  %129 = add nsw i32 %128, %127
  %130 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 3, i64 0), i8* %1, i32* %2) #6
  %131 = add nsw i32 %130, %129
  %132 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 4, i64 0), i8* %1, i32* %2) #6
  %133 = add nsw i32 %132, %131
  %134 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 5, i64 0), i8* %1, i32* %2) #6
  %135 = add nsw i32 %134, %133
  %136 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 6, i64 0), i8* %1, i32* %2) #6
  %137 = add nsw i32 %136, %135
  %138 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 7, i64 0), i8* %1, i32* %2) #6
  %139 = add nsw i32 %138, %137
  %140 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 8, i64 0), i8* %1, i32* %2) #6
  %141 = add nsw i32 %140, %139
  %142 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 9, i64 0), i8* %1, i32* %2) #6
  %143 = add nsw i32 %142, %141
  %144 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 10, i64 0), i8* %1, i32* %2) #6
  %145 = add nsw i32 %144, %143
  %146 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 11, i64 0), i8* %1, i32* %2) #6
  %147 = add nsw i32 %146, %145
  %148 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 12, i64 0), i8* %1, i32* %2) #6
  %149 = add nsw i32 %148, %147
  %150 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 13, i64 0), i8* %1, i32* %2) #6
  %151 = add nsw i32 %150, %149
  %152 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 14, i64 0), i8* %1, i32* %2) #6
  %153 = add nsw i32 %152, %151
  %154 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 15, i64 0), i8* %1, i32* %2) #6
  %155 = add nsw i32 %154, %153
  %156 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 16, i64 0), i8* %1, i32* %2) #6
  %157 = add nsw i32 %156, %155
  %158 = call i32 @synth_1to1_mono(double* getelementptr inbounds ([2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 17, i64 0), i8* %1, i32* %2) #6
  %159 = add nsw i32 %158, %157
  br label %.us-lcssa.us

.preheader27:                                     ; preds = %.preheader27.preheader, %.preheader27
  %indvars.iv51 = phi i64 [ %indvars.iv.next52, %.preheader27 ], [ 0, %.preheader27.preheader ]
  %160 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %indvars.iv51, i32 0, i64 %indvars.iv58
  %161 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %indvars.iv51, i64 0
  call fastcc void @III_antialias([18 x double]* %161, %struct.gr_info_s* %160)
  %162 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 %indvars.iv51, i64 0
  %163 = trunc i64 %indvars.iv51 to i32
  call fastcc void @III_hybrid([18 x double]* %161, [32 x double]* %162, i32 %163, %struct.gr_info_s* %160)
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 1
  %164 = icmp slt i64 %indvars.iv.next52, %46
  br i1 %164, label %.preheader27, label %.preheader

.preheader.split:                                 ; preds = %.preheader.split.preheader, %.preheader.split
  %indvars.iv53 = phi i64 [ %indvars.iv.next54, %.preheader.split ], [ 0, %.preheader.split.preheader ]
  %.143 = phi i32 [ %171, %.preheader.split ], [ %.0745, %.preheader.split.preheader ]
  %165 = load i32, i32* %2, align 4
  store i32 %165, i32* %6, align 4
  %166 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 %indvars.iv53, i64 0
  %167 = call i32 @synth_1to1(double* %166, i32 0, i8* %1, i32* nonnull %6) #6
  %168 = add nsw i32 %167, %.143
  %169 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 1, i64 %indvars.iv53, i64 0
  %170 = call i32 @synth_1to1(double* %169, i32 1, i8* %1, i32* %2) #6
  %171 = add nsw i32 %168, %170
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond = icmp eq i64 %indvars.iv.next54, 18
  br i1 %exitcond, label %.us-lcssa.us.loopexit, label %.preheader.split

.us-lcssa.us.loopexit:                            ; preds = %.preheader.split
  br label %.us-lcssa.us

.us-lcssa.us:                                     ; preds = %.us-lcssa.us.loopexit, %.preheader.split.us
  %.1.lcssa = phi i32 [ %159, %.preheader.split.us ], [ %171, %.us-lcssa.us.loopexit ]
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %172 = icmp slt i64 %indvars.iv.next59, %.015
  br i1 %172, label %47, label %.loopexit33.loopexit

.loopexit33.loopexit:                             ; preds = %55, %67, %.us-lcssa.us
  %.0.ph = phi i32 [ %.0745, %55 ], [ %.0745, %67 ], [ %.1.lcssa, %.us-lcssa.us ]
  br label %.loopexit33

.loopexit33:                                      ; preds = %.loopexit33.loopexit, %31
  %.0 = phi i32 [ 0, %31 ], [ %.0.ph, %.loopexit33.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @III_get_side_info_2(%struct.III_sideinfo*, i32, i32, i64, i32) unnamed_addr #0 {
  %6 = icmp eq i32 %4, 3
  %7 = tail call i32 @getbits(i32 8) #6
  %8 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 0
  store i32 %7, i32* %8, align 8
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %.thread, label %12

.thread:                                          ; preds = %5
  %10 = tail call fastcc i32 @get1bit()
  %11 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 1
  store i32 %10, i32* %11, align 4
  br label %.lr.ph

; <label>:12:                                     ; preds = %5
  %13 = tail call i32 @getbits_fast(i32 2) #6
  %14 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 1
  store i32 %13, i32* %14, align 4
  %15 = icmp sgt i32 %1, 0
  br i1 %15, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.thread, %12
  %16 = select i1 %6, i64 4, i64 0
  %17 = icmp eq i32 %2, 0
  %18 = icmp eq i64 %3, 8
  %.sink4 = select i1 %18, i32 54, i32 27
  %19 = sext i32 %1 to i64
  br label %20

; <label>:20:                                     ; preds = %.lr.ph, %102
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %102 ]
  %21 = tail call i32 @getbits(i32 12) #6
  %22 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = tail call i32 @getbits_fast(i32 9) #6
  %24 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = icmp ugt i32 %23, 288
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %20
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %28 = tail call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %27) #8
  store i32 288, i32* %24, align 8
  br label %29

; <label>:29:                                     ; preds = %26, %20
  %30 = tail call i32 @getbits_fast(i32 8) #6
  %31 = zext i32 %30 to i64
  %32 = sub nsw i64 0, %31
  %33 = getelementptr inbounds double, double* getelementptr inbounds ([378 x double], [378 x double]* @gainpow2, i64 0, i64 256), i64 %32
  %34 = getelementptr inbounds double, double* %33, i64 %16
  %35 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 17
  %36 = getelementptr inbounds double, double* %34, i64 2
  %. = select i1 %17, double* %34, double* %36
  store double* %., double** %35, align 8
  %37 = tail call i32 @getbits(i32 9) #6
  %38 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 3
  store i32 %37, i32* %38, align 4
  %39 = tail call fastcc i32 @get1bit()
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %.preheader, label %41

; <label>:41:                                     ; preds = %29
  %42 = tail call i32 @getbits_fast(i32 2) #6
  %43 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 4
  store i32 %42, i32* %43, align 8
  %44 = tail call fastcc i32 @get1bit()
  %45 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 5
  store i32 %44, i32* %45, align 4
  %46 = tail call i32 @getbits_fast(i32 5) #6
  %47 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 0
  store i32 %46, i32* %47, align 8
  %48 = tail call i32 @getbits_fast(i32 5) #6
  %49 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 1
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 2
  store i32 0, i32* %50, align 8
  %51 = tail call i32 @getbits_fast(i32 3) #6
  %52 = shl i32 %51, 3
  %53 = load double*, double** %35, align 8
  %54 = zext i32 %52 to i64
  %55 = getelementptr inbounds double, double* %53, i64 %54
  %56 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 16, i64 0
  store double* %55, double** %56, align 8
  %57 = tail call i32 @getbits_fast(i32 3) #6
  %58 = shl i32 %57, 3
  %59 = load double*, double** %35, align 8
  %60 = zext i32 %58 to i64
  %61 = getelementptr inbounds double, double* %59, i64 %60
  %62 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 16, i64 1
  store double* %61, double** %62, align 8
  %63 = tail call i32 @getbits_fast(i32 3) #6
  %64 = shl i32 %63, 3
  %65 = load double*, double** %35, align 8
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds double, double* %65, i64 %66
  %68 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 16, i64 2
  store double* %67, double** %68, align 8
  %69 = load i32, i32* %43, align 8
  switch i32 %69, label %74 [
    i32 0, label %70
    i32 2, label %73
  ]

; <label>:70:                                     ; preds = %41
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %72 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %71) #8
  tail call void @exit(i32 1) #9
  unreachable

; <label>:73:                                     ; preds = %41
  br label %74

; <label>:74:                                     ; preds = %41, %73
  %.sink4.sink = phi i32 [ 18, %73 ], [ %.sink4, %41 ]
  %75 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 11
  store i32 %.sink4.sink, i32* %75, align 4
  %76 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 12
  store i32 288, i32* %76, align 8
  br label %102

.preheader:                                       ; preds = %29
  %77 = tail call i32 @getbits_fast(i32 5) #6
  %78 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 0
  store i32 %77, i32* %78, align 4
  %79 = tail call i32 @getbits_fast(i32 5) #6
  %80 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 1
  store i32 %79, i32* %80, align 4
  %81 = tail call i32 @getbits_fast(i32 5) #6
  %82 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 6, i64 2
  store i32 %81, i32* %82, align 4
  %83 = tail call i32 @getbits_fast(i32 4) #6
  %84 = tail call i32 @getbits_fast(i32 3) #6
  %85 = add nsw i32 %83, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %3, i32 0, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = ashr i32 %89, 1
  %91 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 11
  store i32 %90, i32* %91, align 4
  %92 = add i32 %84, 1
  %93 = add i32 %92, %85
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %3, i32 0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i32
  %98 = ashr i32 %97, 1
  %99 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 12
  store i32 %98, i32* %99, align 8
  %100 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 4
  store i32 0, i32* %100, align 8
  %101 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 5
  store i32 0, i32* %101, align 4
  br label %102

; <label>:102:                                    ; preds = %.preheader, %74
  %103 = tail call fastcc i32 @get1bit()
  %104 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 14
  store i32 %103, i32* %104, align 8
  %105 = tail call fastcc i32 @get1bit()
  %106 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 0, i32 15
  store i32 %105, i32* %106, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %107 = icmp slt i64 %indvars.iv.next, %19
  br i1 %107, label %20, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %102
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @III_get_side_info_1(%struct.III_sideinfo*, i32, i32, i64, i32) unnamed_addr #0 {
  %6 = icmp eq i32 %4, 3
  %7 = tail call i32 @getbits(i32 9) #6
  %8 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 0
  store i32 %7, i32* %8, align 8
  %9 = icmp eq i32 %1, 1
  %.sink5 = select i1 %9, i32 5, i32 3
  %10 = tail call i32 @getbits_fast(i32 %.sink5) #6
  %11 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 1
  store i32 %10, i32* %11, align 4
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %.lr.ph14.preheader, label %.preheader7

.lr.ph14.preheader:                               ; preds = %5
  %wide.trip.count = zext i32 %1 to i64
  br label %.lr.ph14

.preheader7.loopexit:                             ; preds = %.lr.ph14
  br label %.preheader7

.preheader7:                                      ; preds = %.preheader7.loopexit, %5
  %13 = icmp sgt i32 %1, 0
  %14 = select i1 %6, i64 4, i64 0
  %15 = icmp eq i32 %2, 0
  %16 = sext i32 %1 to i64
  br label %.preheader6

.lr.ph14:                                         ; preds = %.lr.ph14.preheader, %.lr.ph14
  %indvars.iv17 = phi i64 [ %indvars.iv.next18, %.lr.ph14 ], [ 0, %.lr.ph14.preheader ]
  %17 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv17, i32 0, i64 0, i32 0
  store i32 -1, i32* %17, align 8
  %18 = tail call i32 @getbits_fast(i32 4) #6
  %19 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv17, i32 0, i64 1, i32 0
  store i32 %18, i32* %19, align 8
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %exitcond = icmp eq i64 %indvars.iv.next18, %wide.trip.count
  br i1 %exitcond, label %.preheader7.loopexit, label %.lr.ph14

.preheader6:                                      ; preds = %.preheader7, %._crit_edge
  %indvars.iv15 = phi i64 [ 0, %.preheader7 ], [ %indvars.iv.next16, %._crit_edge ]
  br i1 %13, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %101
  %indvars.iv = phi i64 [ %indvars.iv.next, %101 ], [ 0, %.lr.ph.preheader ]
  %20 = tail call i32 @getbits(i32 12) #6
  %21 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 1
  store i32 %20, i32* %21, align 4
  %22 = tail call i32 @getbits_fast(i32 9) #6
  %23 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 2
  store i32 %22, i32* %23, align 8
  %24 = icmp ugt i32 %22, 288
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %.lr.ph
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %26) #8
  store i32 288, i32* %23, align 8
  br label %28

; <label>:28:                                     ; preds = %25, %.lr.ph
  %29 = tail call i32 @getbits_fast(i32 8) #6
  %30 = zext i32 %29 to i64
  %31 = sub nsw i64 0, %30
  %32 = getelementptr inbounds double, double* getelementptr inbounds ([378 x double], [378 x double]* @gainpow2, i64 0, i64 256), i64 %31
  %33 = getelementptr inbounds double, double* %32, i64 %14
  %34 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 17
  %35 = getelementptr inbounds double, double* %33, i64 2
  %. = select i1 %15, double* %33, double* %35
  store double* %., double** %34, align 8
  %36 = tail call i32 @getbits_fast(i32 4) #6
  %37 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 3
  store i32 %36, i32* %37, align 4
  %38 = tail call fastcc i32 @get1bit()
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %.preheader, label %40

; <label>:40:                                     ; preds = %28
  %41 = tail call i32 @getbits_fast(i32 2) #6
  %42 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 4
  store i32 %41, i32* %42, align 8
  %43 = tail call fastcc i32 @get1bit()
  %44 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 5
  store i32 %43, i32* %44, align 4
  %45 = tail call i32 @getbits_fast(i32 5) #6
  %46 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 0
  store i32 %45, i32* %46, align 8
  %47 = tail call i32 @getbits_fast(i32 5) #6
  %48 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 1
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 2
  store i32 0, i32* %49, align 8
  %50 = tail call i32 @getbits_fast(i32 3) #6
  %51 = shl i32 %50, 3
  %52 = load double*, double** %34, align 8
  %53 = zext i32 %51 to i64
  %54 = getelementptr inbounds double, double* %52, i64 %53
  %55 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 16, i64 0
  store double* %54, double** %55, align 8
  %56 = tail call i32 @getbits_fast(i32 3) #6
  %57 = shl i32 %56, 3
  %58 = load double*, double** %34, align 8
  %59 = zext i32 %57 to i64
  %60 = getelementptr inbounds double, double* %58, i64 %59
  %61 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 16, i64 1
  store double* %60, double** %61, align 8
  %62 = tail call i32 @getbits_fast(i32 3) #6
  %63 = shl i32 %62, 3
  %64 = load double*, double** %34, align 8
  %65 = zext i32 %63 to i64
  %66 = getelementptr inbounds double, double* %64, i64 %65
  %67 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 16, i64 2
  store double* %66, double** %67, align 8
  %68 = load i32, i32* %42, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %73

; <label>:70:                                     ; preds = %40
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %72 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %71) #8
  tail call void @exit(i32 1) #9
  unreachable

; <label>:73:                                     ; preds = %40
  %74 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 11
  store i32 18, i32* %74, align 4
  %75 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 12
  store i32 288, i32* %75, align 8
  br label %101

.preheader:                                       ; preds = %28
  %76 = tail call i32 @getbits_fast(i32 5) #6
  %77 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 0
  store i32 %76, i32* %77, align 4
  %78 = tail call i32 @getbits_fast(i32 5) #6
  %79 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 1
  store i32 %78, i32* %79, align 4
  %80 = tail call i32 @getbits_fast(i32 5) #6
  %81 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 6, i64 2
  store i32 %80, i32* %81, align 4
  %82 = tail call i32 @getbits_fast(i32 4) #6
  %83 = tail call i32 @getbits_fast(i32 3) #6
  %84 = add nsw i32 %82, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %3, i32 0, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = ashr i32 %88, 1
  %90 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 11
  store i32 %89, i32* %90, align 4
  %91 = add i32 %83, 1
  %92 = add i32 %91, %84
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %3, i32 0, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = ashr i32 %96, 1
  %98 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 12
  store i32 %97, i32* %98, align 8
  %99 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 4
  store i32 0, i32* %99, align 8
  %100 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 5
  store i32 0, i32* %100, align 4
  br label %101

; <label>:101:                                    ; preds = %.preheader, %73
  %102 = tail call fastcc i32 @get1bit()
  %103 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 13
  store i32 %102, i32* %103, align 4
  %104 = tail call fastcc i32 @get1bit()
  %105 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 14
  store i32 %104, i32* %105, align 8
  %106 = tail call fastcc i32 @get1bit()
  %107 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %0, i64 0, i32 2, i64 %indvars.iv, i32 0, i64 %indvars.iv15, i32 15
  store i32 %106, i32* %107, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %108 = icmp slt i64 %indvars.iv.next, %16
  br i1 %108, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %101
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader6
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %109 = icmp slt i64 %indvars.iv.next16, 2
  br i1 %109, label %.preheader6, label %110

; <label>:110:                                    ; preds = %._crit_edge
  ret void
}

declare i32 @set_pointer(i64) local_unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define internal fastcc i32 @III_get_scale_factors_2(i32* nocapture, %struct.gr_info_s* nocapture, i32) unnamed_addr #0 {
  %4 = icmp eq i32 %2, 0
  %5 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* @i_slen2, i64 0, i64 %8
  %10 = zext i32 %6 to i64
  %11 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %10
  %.05.in = select i1 %4, i32* %11, i32* %9
  %.05 = load i32, i32* %.05.in, align 4
  %12 = lshr i32 %.05, 15
  %13 = and i32 %12, 1
  %14 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 13
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %22

; <label>:18:                                     ; preds = %3
  %19 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  %. = select i1 %21, i32 1, i32 2
  br label %22

; <label>:22:                                     ; preds = %3, %18
  %.14 = phi i32 [ %., %18 ], [ 0, %3 ]
  %23 = zext i32 %.14 to i64
  %24 = lshr i32 %.05, 12
  %25 = and i32 %24, 7
  %26 = zext i32 %25 to i64
  %27 = and i32 %.05, 7
  %28 = lshr i32 %.05, 3
  %29 = icmp eq i32 %27, 0
  %30 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %23, i64 %26, i64 0
  %31 = load i8, i8* %30, align 4
  %32 = icmp ne i8 %31, 0
  br i1 %29, label %.preheader, label %.preheader11

.preheader11:                                     ; preds = %22
  %33 = zext i8 %31 to i32
  br i1 %32, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader11
  br label %.lr.ph

.preheader:                                       ; preds = %22
  br i1 %32, label %.lr.ph19.preheader, label %.loopexit

.lr.ph19.preheader:                               ; preds = %.preheader
  %34 = load i8, i8* %30, align 4
  %35 = zext i8 %34 to i32
  %36 = icmp ugt i32 %35, 1
  %smax = select i1 %36, i32 %35, i32 1
  %37 = add nsw i32 %smax, -1
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 1
  %min.iters.check = icmp ult i64 %39, 8
  br i1 %min.iters.check, label %.lr.ph19.preheader57, label %min.iters.checked

.lr.ph19.preheader57:                             ; preds = %middle.block, %min.iters.checked, %.lr.ph19.preheader
  %.218.ph = phi i32* [ %0, %min.iters.checked ], [ %0, %.lr.ph19.preheader ], [ %ind.end, %middle.block ]
  %.11017.ph = phi i32 [ 0, %min.iters.checked ], [ 0, %.lr.ph19.preheader ], [ %cast.crd, %middle.block ]
  br label %.lr.ph19

min.iters.checked:                                ; preds = %.lr.ph19.preheader
  %n.vec = and i64 %39, 8589934584
  %cmp.zero = icmp eq i64 %n.vec, 0
  %ind.end = getelementptr i32, i32* %0, i64 %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  br i1 %cmp.zero, label %.lr.ph19.preheader57, label %vector.body.preheader

vector.body.preheader:                            ; preds = %min.iters.checked
  %40 = add nsw i64 %n.vec, -8
  %41 = lshr exact i64 %40, 3
  %42 = add nuw nsw i64 %41, 1
  %xtraiter = and i64 %42, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %vector.body.prol.loopexit, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %next.gep.prol = getelementptr i32, i32* %0, i64 %index.prol
  %43 = bitcast i32* %next.gep.prol to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %43, align 4
  %44 = getelementptr i32, i32* %next.gep.prol, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %45, align 4
  %index.next.prol = add i64 %index.prol, 8
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.prol.loopexit.unr-lcssa, label %vector.body.prol, !llvm.loop !5

vector.body.prol.loopexit.unr-lcssa:              ; preds = %vector.body.prol
  br label %vector.body.prol.loopexit

vector.body.prol.loopexit:                        ; preds = %vector.body.preheader, %vector.body.prol.loopexit.unr-lcssa
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol, %vector.body.prol.loopexit.unr-lcssa ]
  %46 = icmp ult i64 %40, 56
  br i1 %46, label %middle.block, label %vector.body.preheader.new

vector.body.preheader.new:                        ; preds = %vector.body.prol.loopexit
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.new
  %index = phi i64 [ %index.unr, %vector.body.preheader.new ], [ %index.next.7, %vector.body ]
  %next.gep = getelementptr i32, i32* %0, i64 %index
  %47 = bitcast i32* %next.gep to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %47, align 4
  %48 = getelementptr i32, i32* %next.gep, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %49, align 4
  %index.next = add i64 %index, 8
  %next.gep.1 = getelementptr i32, i32* %0, i64 %index.next
  %50 = bitcast i32* %next.gep.1 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %50, align 4
  %51 = getelementptr i32, i32* %next.gep.1, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %52, align 4
  %index.next.1 = add i64 %index, 16
  %next.gep.2 = getelementptr i32, i32* %0, i64 %index.next.1
  %53 = bitcast i32* %next.gep.2 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %53, align 4
  %54 = getelementptr i32, i32* %next.gep.2, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %55, align 4
  %index.next.2 = add i64 %index, 24
  %next.gep.3 = getelementptr i32, i32* %0, i64 %index.next.2
  %56 = bitcast i32* %next.gep.3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %56, align 4
  %57 = getelementptr i32, i32* %next.gep.3, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %58, align 4
  %index.next.3 = add i64 %index, 32
  %next.gep.4 = getelementptr i32, i32* %0, i64 %index.next.3
  %59 = bitcast i32* %next.gep.4 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %59, align 4
  %60 = getelementptr i32, i32* %next.gep.4, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %61, align 4
  %index.next.4 = add i64 %index, 40
  %next.gep.5 = getelementptr i32, i32* %0, i64 %index.next.4
  %62 = bitcast i32* %next.gep.5 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %62, align 4
  %63 = getelementptr i32, i32* %next.gep.5, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %64, align 4
  %index.next.5 = add i64 %index, 48
  %next.gep.6 = getelementptr i32, i32* %0, i64 %index.next.5
  %65 = bitcast i32* %next.gep.6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %65, align 4
  %66 = getelementptr i32, i32* %next.gep.6, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %67, align 4
  %index.next.6 = add i64 %index, 56
  %next.gep.7 = getelementptr i32, i32* %0, i64 %index.next.6
  %68 = bitcast i32* %next.gep.7 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %68, align 4
  %69 = getelementptr i32, i32* %next.gep.7, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %70, align 4
  %index.next.7 = add i64 %index, 64
  %71 = icmp eq i64 %index.next.7, %n.vec
  br i1 %71, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !6

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.prol.loopexit, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %39, %n.vec
  br i1 %cmp.n, label %.loopexit, label %.lr.ph19.preheader57

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.115 = phi i32* [ %73, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  %.0914 = phi i32 [ %74, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %72 = tail call i32 @getbits_fast(i32 %27) #6
  store i32 %72, i32* %.115, align 4
  %73 = getelementptr inbounds i32, i32* %.115, i64 1
  %74 = add nuw nsw i32 %.0914, 1
  %75 = load i8, i8* %30, align 4
  %76 = zext i8 %75 to i32
  %77 = icmp slt i32 %74, %76
  br i1 %77, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader11
  %.1.lcssa = phi i32* [ %0, %.preheader11 ], [ %73, %._crit_edge.loopexit ]
  %.lcssa = phi i32 [ %33, %.preheader11 ], [ %76, %._crit_edge.loopexit ]
  %78 = mul nuw nsw i32 %.lcssa, %27
  br label %.loopexit

.lr.ph19:                                         ; preds = %.lr.ph19.preheader57, %.lr.ph19
  %.218 = phi i32* [ %79, %.lr.ph19 ], [ %.218.ph, %.lr.ph19.preheader57 ]
  %.11017 = phi i32 [ %80, %.lr.ph19 ], [ %.11017.ph, %.lr.ph19.preheader57 ]
  store i32 0, i32* %.218, align 4
  %79 = getelementptr inbounds i32, i32* %.218, i64 1
  %80 = add nuw nsw i32 %.11017, 1
  %81 = icmp slt i32 %80, %35
  br i1 %81, label %.lr.ph19, label %.loopexit.loopexit, !llvm.loop !9

.loopexit.loopexit:                               ; preds = %.lr.ph19
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %middle.block, %.preheader, %._crit_edge
  %.12 = phi i32 [ %78, %._crit_edge ], [ 0, %.preheader ], [ 0, %middle.block ], [ 0, %.loopexit.loopexit ]
  %.3 = phi i32* [ %.1.lcssa, %._crit_edge ], [ %0, %.preheader ], [ %ind.end, %middle.block ], [ %79, %.loopexit.loopexit ]
  %82 = and i32 %28, 7
  %83 = lshr i32 %.05, 6
  %84 = icmp eq i32 %82, 0
  %85 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %23, i64 %26, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = icmp ne i8 %86, 0
  br i1 %84, label %.preheader.1, label %.preheader11.1

.loopexit.loopexit.3.loopexit:                    ; preds = %.lr.ph19.3
  br label %.loopexit.loopexit.3

.loopexit.loopexit.3:                             ; preds = %.loopexit.loopexit.3.loopexit, %._crit_edge.3, %.preheader.3
  %.12.3 = phi i32 [ %140, %._crit_edge.3 ], [ %.12.2, %.preheader.3 ], [ %.12.2, %.loopexit.loopexit.3.loopexit ]
  %.3.3 = phi i32* [ %.1.lcssa.3, %._crit_edge.3 ], [ %.3.2, %.preheader.3 ], [ %141, %.loopexit.loopexit.3.loopexit ]
  %.3.lcssa28 = bitcast i32* %.3.3 to i8*
  %88 = shl nuw nsw i32 %.14, 3
  %89 = or i32 %88, 4
  %90 = add nsw i32 %89, -4
  %91 = or i32 %90, 4
  %92 = zext i32 %91 to i64
  call void @llvm.memset.p0i8.i64(i8* %.3.lcssa28, i8 0, i64 %92, i32 4, i1 false)
  ret i32 %.12.3

.preheader11.1:                                   ; preds = %.loopexit
  %93 = zext i8 %86 to i32
  br i1 %87, label %.lr.ph.1.preheader, label %._crit_edge.1

.lr.ph.1.preheader:                               ; preds = %.preheader11.1
  br label %.lr.ph.1

.lr.ph.1:                                         ; preds = %.lr.ph.1.preheader, %.lr.ph.1
  %.115.1 = phi i32* [ %95, %.lr.ph.1 ], [ %.3, %.lr.ph.1.preheader ]
  %.0914.1 = phi i32 [ %96, %.lr.ph.1 ], [ 0, %.lr.ph.1.preheader ]
  %94 = tail call i32 @getbits_fast(i32 %82) #6
  store i32 %94, i32* %.115.1, align 4
  %95 = getelementptr inbounds i32, i32* %.115.1, i64 1
  %96 = add nuw nsw i32 %.0914.1, 1
  %97 = load i8, i8* %85, align 1
  %98 = zext i8 %97 to i32
  %99 = icmp slt i32 %96, %98
  br i1 %99, label %.lr.ph.1, label %._crit_edge.1.loopexit

._crit_edge.1.loopexit:                           ; preds = %.lr.ph.1
  br label %._crit_edge.1

._crit_edge.1:                                    ; preds = %._crit_edge.1.loopexit, %.preheader11.1
  %.1.lcssa.1 = phi i32* [ %.3, %.preheader11.1 ], [ %95, %._crit_edge.1.loopexit ]
  %.lcssa.1 = phi i32 [ %93, %.preheader11.1 ], [ %98, %._crit_edge.1.loopexit ]
  %100 = mul nuw nsw i32 %.lcssa.1, %82
  %101 = add nsw i32 %100, %.12
  br label %.loopexit.1

.preheader.1:                                     ; preds = %.loopexit
  br i1 %87, label %.lr.ph19.1.preheader, label %.loopexit.1

.lr.ph19.1.preheader:                             ; preds = %.preheader.1
  br label %.lr.ph19.1

.lr.ph19.1:                                       ; preds = %.lr.ph19.1.preheader, %.lr.ph19.1
  %.218.1 = phi i32* [ %102, %.lr.ph19.1 ], [ %.3, %.lr.ph19.1.preheader ]
  %.11017.1 = phi i32 [ %103, %.lr.ph19.1 ], [ 0, %.lr.ph19.1.preheader ]
  store i32 0, i32* %.218.1, align 4
  %102 = getelementptr inbounds i32, i32* %.218.1, i64 1
  %103 = add nuw nsw i32 %.11017.1, 1
  %104 = load i8, i8* %85, align 1
  %105 = zext i8 %104 to i32
  %106 = icmp slt i32 %103, %105
  br i1 %106, label %.lr.ph19.1, label %.loopexit.1.loopexit

.loopexit.1.loopexit:                             ; preds = %.lr.ph19.1
  br label %.loopexit.1

.loopexit.1:                                      ; preds = %.loopexit.1.loopexit, %.preheader.1, %._crit_edge.1
  %.12.1 = phi i32 [ %101, %._crit_edge.1 ], [ %.12, %.preheader.1 ], [ %.12, %.loopexit.1.loopexit ]
  %.3.1 = phi i32* [ %.1.lcssa.1, %._crit_edge.1 ], [ %.3, %.preheader.1 ], [ %102, %.loopexit.1.loopexit ]
  %107 = and i32 %83, 7
  %108 = lshr i32 %.05, 9
  %109 = icmp eq i32 %107, 0
  %110 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %23, i64 %26, i64 2
  %111 = load i8, i8* %110, align 2
  %112 = icmp ne i8 %111, 0
  br i1 %109, label %.preheader.2, label %.preheader11.2

.preheader11.2:                                   ; preds = %.loopexit.1
  %113 = zext i8 %111 to i32
  br i1 %112, label %.lr.ph.2.preheader, label %._crit_edge.2

.lr.ph.2.preheader:                               ; preds = %.preheader11.2
  br label %.lr.ph.2

.lr.ph.2:                                         ; preds = %.lr.ph.2.preheader, %.lr.ph.2
  %.115.2 = phi i32* [ %115, %.lr.ph.2 ], [ %.3.1, %.lr.ph.2.preheader ]
  %.0914.2 = phi i32 [ %116, %.lr.ph.2 ], [ 0, %.lr.ph.2.preheader ]
  %114 = tail call i32 @getbits_fast(i32 %107) #6
  store i32 %114, i32* %.115.2, align 4
  %115 = getelementptr inbounds i32, i32* %.115.2, i64 1
  %116 = add nuw nsw i32 %.0914.2, 1
  %117 = load i8, i8* %110, align 2
  %118 = zext i8 %117 to i32
  %119 = icmp slt i32 %116, %118
  br i1 %119, label %.lr.ph.2, label %._crit_edge.2.loopexit

._crit_edge.2.loopexit:                           ; preds = %.lr.ph.2
  br label %._crit_edge.2

._crit_edge.2:                                    ; preds = %._crit_edge.2.loopexit, %.preheader11.2
  %.1.lcssa.2 = phi i32* [ %.3.1, %.preheader11.2 ], [ %115, %._crit_edge.2.loopexit ]
  %.lcssa.2 = phi i32 [ %113, %.preheader11.2 ], [ %118, %._crit_edge.2.loopexit ]
  %120 = mul nuw nsw i32 %.lcssa.2, %107
  %121 = add nsw i32 %120, %.12.1
  br label %.loopexit.2

.preheader.2:                                     ; preds = %.loopexit.1
  br i1 %112, label %.lr.ph19.2.preheader, label %.loopexit.2

.lr.ph19.2.preheader:                             ; preds = %.preheader.2
  br label %.lr.ph19.2

.lr.ph19.2:                                       ; preds = %.lr.ph19.2.preheader, %.lr.ph19.2
  %.218.2 = phi i32* [ %122, %.lr.ph19.2 ], [ %.3.1, %.lr.ph19.2.preheader ]
  %.11017.2 = phi i32 [ %123, %.lr.ph19.2 ], [ 0, %.lr.ph19.2.preheader ]
  store i32 0, i32* %.218.2, align 4
  %122 = getelementptr inbounds i32, i32* %.218.2, i64 1
  %123 = add nuw nsw i32 %.11017.2, 1
  %124 = load i8, i8* %110, align 2
  %125 = zext i8 %124 to i32
  %126 = icmp slt i32 %123, %125
  br i1 %126, label %.lr.ph19.2, label %.loopexit.2.loopexit

.loopexit.2.loopexit:                             ; preds = %.lr.ph19.2
  br label %.loopexit.2

.loopexit.2:                                      ; preds = %.loopexit.2.loopexit, %.preheader.2, %._crit_edge.2
  %.12.2 = phi i32 [ %121, %._crit_edge.2 ], [ %.12.1, %.preheader.2 ], [ %.12.1, %.loopexit.2.loopexit ]
  %.3.2 = phi i32* [ %.1.lcssa.2, %._crit_edge.2 ], [ %.3.1, %.preheader.2 ], [ %122, %.loopexit.2.loopexit ]
  %127 = and i32 %108, 7
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %23, i64 %26, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = icmp ne i8 %130, 0
  br i1 %128, label %.preheader.3, label %.preheader11.3

.preheader11.3:                                   ; preds = %.loopexit.2
  %132 = zext i8 %130 to i32
  br i1 %131, label %.lr.ph.3.preheader, label %._crit_edge.3

.lr.ph.3.preheader:                               ; preds = %.preheader11.3
  br label %.lr.ph.3

.lr.ph.3:                                         ; preds = %.lr.ph.3.preheader, %.lr.ph.3
  %.115.3 = phi i32* [ %134, %.lr.ph.3 ], [ %.3.2, %.lr.ph.3.preheader ]
  %.0914.3 = phi i32 [ %135, %.lr.ph.3 ], [ 0, %.lr.ph.3.preheader ]
  %133 = tail call i32 @getbits_fast(i32 %127) #6
  store i32 %133, i32* %.115.3, align 4
  %134 = getelementptr inbounds i32, i32* %.115.3, i64 1
  %135 = add nuw nsw i32 %.0914.3, 1
  %136 = load i8, i8* %129, align 1
  %137 = zext i8 %136 to i32
  %138 = icmp slt i32 %135, %137
  br i1 %138, label %.lr.ph.3, label %._crit_edge.3.loopexit

._crit_edge.3.loopexit:                           ; preds = %.lr.ph.3
  br label %._crit_edge.3

._crit_edge.3:                                    ; preds = %._crit_edge.3.loopexit, %.preheader11.3
  %.1.lcssa.3 = phi i32* [ %.3.2, %.preheader11.3 ], [ %134, %._crit_edge.3.loopexit ]
  %.lcssa.3 = phi i32 [ %132, %.preheader11.3 ], [ %137, %._crit_edge.3.loopexit ]
  %139 = mul nuw nsw i32 %.lcssa.3, %127
  %140 = add nsw i32 %139, %.12.2
  br label %.loopexit.loopexit.3

.preheader.3:                                     ; preds = %.loopexit.2
  br i1 %131, label %.lr.ph19.3.preheader, label %.loopexit.loopexit.3

.lr.ph19.3.preheader:                             ; preds = %.preheader.3
  br label %.lr.ph19.3

.lr.ph19.3:                                       ; preds = %.lr.ph19.3.preheader, %.lr.ph19.3
  %.218.3 = phi i32* [ %141, %.lr.ph19.3 ], [ %.3.2, %.lr.ph19.3.preheader ]
  %.11017.3 = phi i32 [ %142, %.lr.ph19.3 ], [ 0, %.lr.ph19.3.preheader ]
  store i32 0, i32* %.218.3, align 4
  %141 = getelementptr inbounds i32, i32* %.218.3, i64 1
  %142 = add nuw nsw i32 %.11017.3, 1
  %143 = load i8, i8* %129, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp slt i32 %142, %144
  br i1 %145, label %.lr.ph19.3, label %.loopexit.loopexit.3.loopexit
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc i32 @III_get_scale_factors_1(i32* nocapture, %struct.gr_info_s* nocapture readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* @III_get_scale_factors_1.slen.0, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* @III_get_scale_factors_1.slen.1, i64 0, i64 %5
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %83

; <label>:15:                                     ; preds = %2
  %16 = add nuw nsw i32 %11, %8
  %17 = mul nuw nsw i32 %16, 18
  %18 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %37, label %.preheader21

.preheader21:                                     ; preds = %15
  %21 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %21, i32* %0, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 1
  %23 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %23, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %0, i64 2
  %25 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %25, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %0, i64 3
  %27 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %27, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %0, i64 4
  %29 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %29, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %0, i64 5
  %31 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %31, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 6
  %33 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %33, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %0, i64 7
  %35 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %35, i32* %34, align 4
  %scevgep56 = getelementptr i32, i32* %0, i64 8
  %36 = sub nsw i32 %17, %8
  br label %37

; <label>:37:                                     ; preds = %15, %.preheader21
  %.118 = phi i32 [ 9, %.preheader21 ], [ 18, %15 ]
  %.010 = phi i32 [ %36, %.preheader21 ], [ %17, %15 ]
  %.1 = phi i32* [ %scevgep56, %.preheader21 ], [ %0, %15 ]
  %38 = add nsw i32 %.118, -1
  %39 = zext i32 %38 to i64
  %40 = add nuw nsw i64 %39, 1
  br label %41

; <label>:41:                                     ; preds = %37, %41
  %.231 = phi i32* [ %.1, %37 ], [ %43, %41 ]
  %.21930 = phi i32 [ %.118, %37 ], [ %44, %41 ]
  %42 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %42, i32* %.231, align 4
  %43 = getelementptr inbounds i32, i32* %.231, i64 1
  %44 = add nsw i32 %.21930, -1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %.preheader, label %41

.preheader:                                       ; preds = %41
  %scevgep55 = getelementptr i32, i32* %.1, i64 %40
  %scevgep = getelementptr i32, i32* %scevgep55, i64 17
  %46 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %46, i32* %scevgep55, align 4
  %47 = getelementptr inbounds i32, i32* %scevgep55, i64 1
  %48 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %48, i32* %47, align 4
  %49 = getelementptr inbounds i32, i32* %47, i64 1
  %50 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %50, i32* %49, align 4
  %51 = getelementptr inbounds i32, i32* %49, i64 1
  %52 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %52, i32* %51, align 4
  %53 = getelementptr inbounds i32, i32* %51, i64 1
  %54 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %54, i32* %53, align 4
  %55 = getelementptr inbounds i32, i32* %53, i64 1
  %56 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %56, i32* %55, align 4
  %57 = getelementptr inbounds i32, i32* %55, i64 1
  %58 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %58, i32* %57, align 4
  %59 = getelementptr inbounds i32, i32* %57, i64 1
  %60 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %60, i32* %59, align 4
  %61 = getelementptr inbounds i32, i32* %59, i64 1
  %62 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %62, i32* %61, align 4
  %63 = getelementptr inbounds i32, i32* %61, i64 1
  %64 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %64, i32* %63, align 4
  %65 = getelementptr inbounds i32, i32* %63, i64 1
  %66 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %66, i32* %65, align 4
  %67 = getelementptr inbounds i32, i32* %65, i64 1
  %68 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %68, i32* %67, align 4
  %69 = getelementptr inbounds i32, i32* %67, i64 1
  %70 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %70, i32* %69, align 4
  %71 = getelementptr inbounds i32, i32* %69, i64 1
  %72 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %72, i32* %71, align 4
  %73 = getelementptr inbounds i32, i32* %71, i64 1
  %74 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %74, i32* %73, align 4
  %75 = getelementptr inbounds i32, i32* %73, i64 1
  %76 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %76, i32* %75, align 4
  %77 = getelementptr inbounds i32, i32* %75, i64 1
  %78 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %78, i32* %77, align 4
  %79 = getelementptr inbounds i32, i32* %77, i64 1
  %80 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %80, i32* %79, align 4
  %scevgep54 = getelementptr i32, i32* %scevgep55, i64 18
  %81 = getelementptr inbounds i32, i32* %scevgep, i64 2
  store i32 0, i32* %scevgep54, align 4
  %82 = getelementptr inbounds i32, i32* %scevgep, i64 3
  store i32 0, i32* %81, align 4
  br label %189

; <label>:83:                                     ; preds = %2
  %84 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %.preheader22, label %130

.preheader22:                                     ; preds = %83
  %87 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %87, i32* %0, align 4
  %88 = getelementptr inbounds i32, i32* %0, i64 1
  %89 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %89, i32* %88, align 4
  %90 = getelementptr inbounds i32, i32* %0, i64 2
  %91 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %91, i32* %90, align 4
  %92 = getelementptr inbounds i32, i32* %0, i64 3
  %93 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %93, i32* %92, align 4
  %94 = getelementptr inbounds i32, i32* %0, i64 4
  %95 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %95, i32* %94, align 4
  %96 = getelementptr inbounds i32, i32* %0, i64 5
  %97 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %97, i32* %96, align 4
  %98 = getelementptr inbounds i32, i32* %0, i64 6
  %99 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %99, i32* %98, align 4
  %100 = getelementptr inbounds i32, i32* %0, i64 7
  %101 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %101, i32* %100, align 4
  %102 = getelementptr inbounds i32, i32* %0, i64 8
  %103 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %103, i32* %102, align 4
  %104 = getelementptr inbounds i32, i32* %0, i64 9
  %105 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %105, i32* %104, align 4
  %106 = getelementptr inbounds i32, i32* %0, i64 10
  %107 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %107, i32* %106, align 4
  %scevgep58 = getelementptr i32, i32* %0, i64 11
  %108 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %108, i32* %scevgep58, align 4
  %109 = getelementptr inbounds i32, i32* %0, i64 12
  %110 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %110, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %0, i64 13
  %112 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %112, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %0, i64 14
  %114 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %114, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %0, i64 15
  %116 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %116, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %0, i64 16
  %118 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %118, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %0, i64 17
  %120 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %120, i32* %119, align 4
  %121 = getelementptr inbounds i32, i32* %0, i64 18
  %122 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %122, i32* %121, align 4
  %123 = getelementptr inbounds i32, i32* %0, i64 19
  %124 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %124, i32* %123, align 4
  %125 = getelementptr inbounds i32, i32* %0, i64 20
  %126 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %126, i32* %125, align 4
  %scevgep57 = getelementptr i32, i32* %0, i64 21
  %127 = add nuw nsw i32 %11, %8
  %128 = mul nuw nsw i32 %127, 10
  %129 = add nuw nsw i32 %128, %8
  br label %189

; <label>:130:                                    ; preds = %83
  %131 = and i32 %85, 8
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %.preheader27, label %145

.preheader27:                                     ; preds = %130
  %133 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %133, i32* %0, align 4
  %134 = getelementptr inbounds i32, i32* %0, i64 1
  %135 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %135, i32* %134, align 4
  %136 = getelementptr inbounds i32, i32* %0, i64 2
  %137 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %137, i32* %136, align 4
  %138 = getelementptr inbounds i32, i32* %0, i64 3
  %139 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %139, i32* %138, align 4
  %140 = getelementptr inbounds i32, i32* %0, i64 4
  %141 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %141, i32* %140, align 4
  %142 = getelementptr inbounds i32, i32* %0, i64 5
  %143 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %143, i32* %142, align 4
  %144 = mul nuw nsw i32 %8, 6
  br label %145

; <label>:145:                                    ; preds = %130, %.preheader27
  %.111 = phi i32 [ %144, %.preheader27 ], [ 0, %130 ]
  %146 = and i32 %85, 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %.preheader26, label %159

.preheader26:                                     ; preds = %145
  %.7 = getelementptr i32, i32* %0, i64 6
  %148 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %148, i32* %.7, align 4
  %149 = getelementptr inbounds i32, i32* %0, i64 7
  %150 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %150, i32* %149, align 4
  %151 = getelementptr inbounds i32, i32* %0, i64 8
  %152 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %152, i32* %151, align 4
  %153 = getelementptr inbounds i32, i32* %0, i64 9
  %154 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %154, i32* %153, align 4
  %155 = getelementptr inbounds i32, i32* %0, i64 10
  %156 = tail call i32 @getbits_fast(i32 %8) #6
  store i32 %156, i32* %155, align 4
  %157 = mul nuw nsw i32 %8, 5
  %158 = add nsw i32 %.111, %157
  br label %159

; <label>:159:                                    ; preds = %145, %.preheader26
  %.212 = phi i32 [ %158, %.preheader26 ], [ %.111, %145 ]
  %160 = and i32 %85, 2
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %.preheader25, label %173

.preheader25:                                     ; preds = %159
  %.9 = getelementptr i32, i32* %0, i64 11
  %162 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %162, i32* %.9, align 4
  %163 = getelementptr inbounds i32, i32* %0, i64 12
  %164 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %164, i32* %163, align 4
  %165 = getelementptr inbounds i32, i32* %0, i64 13
  %166 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %0, i64 14
  %168 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %168, i32* %167, align 4
  %169 = getelementptr inbounds i32, i32* %0, i64 15
  %170 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %170, i32* %169, align 4
  %171 = mul nuw nsw i32 %11, 5
  %172 = add nsw i32 %.212, %171
  br label %173

; <label>:173:                                    ; preds = %159, %.preheader25
  %.313 = phi i32 [ %172, %.preheader25 ], [ %.212, %159 ]
  %174 = and i32 %85, 1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %.preheader24, label %187

.preheader24:                                     ; preds = %173
  %.11 = getelementptr i32, i32* %0, i64 16
  %176 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %176, i32* %.11, align 4
  %177 = getelementptr inbounds i32, i32* %0, i64 17
  %178 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %0, i64 18
  %180 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %180, i32* %179, align 4
  %181 = getelementptr inbounds i32, i32* %0, i64 19
  %182 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %182, i32* %181, align 4
  %183 = getelementptr inbounds i32, i32* %0, i64 20
  %184 = tail call i32 @getbits_fast(i32 %11) #6
  store i32 %184, i32* %183, align 4
  %scevgep59 = getelementptr i32, i32* %0, i64 21
  %185 = mul nuw nsw i32 %11, 5
  %186 = add nsw i32 %.313, %185
  br label %189

; <label>:187:                                    ; preds = %173
  %188 = getelementptr inbounds i32, i32* %0, i64 21
  br label %189

; <label>:189:                                    ; preds = %.preheader22, %187, %.preheader24, %.preheader
  %.14.sink = phi i32* [ %82, %.preheader ], [ %scevgep57, %.preheader22 ], [ %188, %187 ], [ %scevgep59, %.preheader24 ]
  %.616 = phi i32 [ %.010, %.preheader ], [ %129, %.preheader22 ], [ %.313, %187 ], [ %186, %.preheader24 ]
  store i32 0, i32* %.14.sink, align 4
  ret i32 %.616
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc i32 @III_dequantize_sample([18 x double]*, i32* nocapture readonly, %struct.gr_info_s*, i32, i32) unnamed_addr #0 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca [4 x i32], align 16
  %8 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, 1
  %11 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 0
  %12 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %13, %4
  %15 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 11
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = sub nsw i32 288, %16
  %22 = ashr i32 %21, 1
  %23 = icmp sgt i32 %16, %18
  %24 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 0
  br i1 %23, label %27, label %25

; <label>:25:                                     ; preds = %5
  store i32 %16, i32* %24, align 4
  %26 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %26, align 4
  br label %36

; <label>:27:                                     ; preds = %5
  store i32 %18, i32* %24, align 4
  %28 = icmp sgt i32 %16, %20
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %27
  %30 = sub nsw i32 %16, %18
  %31 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 %30, i32* %31, align 4
  br label %36

; <label>:32:                                     ; preds = %27
  %33 = sub nsw i32 %20, %18
  %34 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = sub nsw i32 %16, %20
  br label %36

; <label>:36:                                     ; preds = %29, %32, %25
  %.sink.sink = phi i32 [ 0, %25 ], [ %35, %32 ], [ 0, %29 ]
  %37 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 2
  store i32 %.sink.sink, i32* %37, align 4
  %38 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %41, label %274

; <label>:41:                                     ; preds = %36
  %42 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 5
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 -1, i32* %45, align 4
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %.sink208 = select i1 %44, i32 -1, i32 2
  %.sink203 = zext i1 %44 to i64
  store i32 %.sink208, i32* %46, align 8
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %.sink208, i32* %47, align 4
  %48 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  store i32 %.sink208, i32* %48, align 16
  %49 = sext i32 %3 to i64
  %50 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %49, i64 %.sink203
  %51 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %49, i64 %.sink203
  %.057 = load i32*, i32** %51, align 8
  %.0116 = load i32*, i32** %50, align 8
  %52 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %56

.preheader233:                                    ; preds = %._crit_edge302
  %53 = icmp sgt i32 %.133.lcssa, 0
  %not.224264 = icmp ne i32 %22, 0
  %.265 = and i1 %53, %not.224264
  br i1 %.265, label %.lr.ph276, label %.preheader

.lr.ph276:                                        ; preds = %.preheader233
  %54 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 15
  %55 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %161

; <label>:56:                                     ; preds = %._crit_edge302, %41
  %indvars.iv = phi i64 [ 0, %41 ], [ %indvars.iv.next, %._crit_edge302 ]
  %.02321 = phi i32* [ %1, %41 ], [ %.1.lcssa, %._crit_edge302 ]
  %.011320 = phi double* [ %11, %41 ], [ %.112.lcssa, %._crit_edge302 ]
  %.032319 = phi i32 [ %14, %41 ], [ %.133.lcssa, %._crit_edge302 ]
  %.077317 = phi i32 [ 0, %41 ], [ %.178.lcssa, %._crit_edge302 ]
  %.090316 = phi i32 [ 0, %41 ], [ %.191.lcssa, %._crit_edge302 ]
  %.098315 = phi i32 [ 0, %41 ], [ %.199.lcssa, %._crit_edge302 ]
  %.0106314 = phi double [ 0.000000e+00, %41 ], [ %.1107.lcssa, %._crit_edge302 ]
  %.1117313 = phi i32* [ %.0116, %41 ], [ %.2118.lcssa, %._crit_edge302 ]
  %.0127312 = phi i32 [ 0, %41 ], [ %.1128.lcssa, %._crit_edge302 ]
  %57 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 %indvars.iv
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 6, i64 %indvars.iv
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht, i64 0, i64 %61
  %63 = icmp eq i32 %58, 0
  br i1 %63, label %._crit_edge302, label %.lr.ph301

.lr.ph301:                                        ; preds = %56
  %64 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht, i64 0, i64 %61, i32 1
  %65 = getelementptr inbounds %struct.newhuff, %struct.newhuff* %62, i64 0, i32 0
  %66 = getelementptr inbounds %struct.newhuff, %struct.newhuff* %62, i64 0, i32 0
  br label %67

; <label>:67:                                     ; preds = %.lr.ph301, %155
  %.1299 = phi i32* [ %.02321, %.lr.ph301 ], [ %.3, %155 ]
  %.112298 = phi double* [ %.011320, %.lr.ph301 ], [ %156, %155 ]
  %.133297 = phi i32 [ %.032319, %.lr.ph301 ], [ %.638, %155 ]
  %.178296 = phi i32 [ %.077317, %.lr.ph301 ], [ %.380, %155 ]
  %.191295 = phi i32 [ %.090316, %.lr.ph301 ], [ %.292, %155 ]
  %.199294 = phi i32 [ %.098315, %.lr.ph301 ], [ %.2100, %155 ]
  %.1107293 = phi double [ %.0106314, %.lr.ph301 ], [ %.3109, %155 ]
  %.2118292 = phi i32* [ %.1117313, %.lr.ph301 ], [ %.3119, %155 ]
  %.1128291 = phi i32 [ %.0127312, %.lr.ph301 ], [ %158, %155 ]
  %.0137290 = phi i32 [ %58, %.lr.ph301 ], [ %157, %155 ]
  %68 = icmp eq i32 %.1128291, 0
  br i1 %68, label %69, label %88

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds i32, i32* %.2118292, i64 1
  %71 = load i32, i32* %.2118292, align 4
  %72 = getelementptr inbounds i32, i32* %.2118292, i64 2
  %73 = load i32, i32* %70, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %74
  %76 = getelementptr inbounds i32, i32* %.2118292, i64 3
  %77 = load i32, i32* %72, align 4
  %78 = getelementptr inbounds i32, i32* %.2118292, i64 4
  %79 = load i32, i32* %76, align 4
  %80 = icmp eq i32 %77, 3
  %81 = sext i32 %77 to i64
  %82 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 16, i64 %81
  %.sink213 = select i1 %80, double** %52, double** %82
  %.279 = select i1 %80, i32 1, i32 3
  %83 = load double*, double** %.sink213, align 8
  %84 = load i32, i32* %.1299, align 4
  %85 = shl i32 %84, %10
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, double* %83, i64 %86
  %.2 = getelementptr inbounds i32, i32* %.1299, i64 1
  %.2108 = load double, double* %87, align 8
  br label %88

; <label>:88:                                     ; preds = %67, %69
  %.2129 = phi i32 [ %.1128291, %67 ], [ %71, %69 ]
  %.3119 = phi i32* [ %.2118292, %67 ], [ %78, %69 ]
  %.3109 = phi double [ %.1107293, %67 ], [ %.2108, %69 ]
  %.2100 = phi i32 [ %.199294, %67 ], [ %79, %69 ]
  %.292 = phi i32 [ %.191295, %67 ], [ %77, %69 ]
  %.380 = phi i32 [ %.178296, %67 ], [ %.279, %69 ]
  %.213 = phi double* [ %.112298, %67 ], [ %75, %69 ]
  %.3 = phi i32* [ %.1299, %67 ], [ %.2, %69 ]
  %89 = load i16*, i16** %64, align 8
  %90 = load i16, i16* %89, align 2
  %91 = icmp slt i16 %90, 0
  br i1 %91, label %.lr.ph284.preheader, label %._crit_edge285

.lr.ph284.preheader:                              ; preds = %88
  br label %.lr.ph284

.lr.ph284:                                        ; preds = %.lr.ph284.preheader, %.lr.ph284
  %92 = phi i16 [ %100, %.lr.ph284 ], [ %90, %.lr.ph284.preheader ]
  %.1147.pn = phi i16* [ %.1147, %.lr.ph284 ], [ %89, %.lr.ph284.preheader ]
  %.234282 = phi i32 [ %99, %.lr.ph284 ], [ %.133297, %.lr.ph284.preheader ]
  %93 = getelementptr inbounds i16, i16* %.1147.pn, i64 1
  %94 = tail call fastcc i32 @get1bit()
  %95 = icmp eq i32 %94, 0
  %96 = sext i16 %92 to i64
  %97 = sub nsw i64 0, %96
  %98 = getelementptr inbounds i16, i16* %93, i64 %97
  %.1147 = select i1 %95, i16* %93, i16* %98
  %99 = add nsw i32 %.234282, -1
  %100 = load i16, i16* %.1147, align 2
  %101 = icmp slt i16 %100, 0
  br i1 %101, label %.lr.ph284, label %._crit_edge285.loopexit

._crit_edge285.loopexit:                          ; preds = %.lr.ph284
  br label %._crit_edge285

._crit_edge285:                                   ; preds = %._crit_edge285.loopexit, %88
  %.234.lcssa = phi i32 [ %.133297, %88 ], [ %99, %._crit_edge285.loopexit ]
  %.lcssa235 = phi i16 [ %90, %88 ], [ %100, %._crit_edge285.loopexit ]
  %.lcssa = sext i16 %.lcssa235 to i32
  %102 = ashr i32 %.lcssa, 4
  %103 = and i32 %.lcssa, 15
  switch i32 %102, label %117 [
    i32 15, label %104
    i32 0, label %127
  ]

; <label>:104:                                    ; preds = %._crit_edge285
  %105 = sext i32 %.292 to i64
  %106 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %105
  store i32 %.2100, i32* %106, align 4
  %107 = load i32, i32* %66, align 16
  %.neg230 = add i32 %.234.lcssa, -1
  %108 = sub i32 %.neg230, %107
  %109 = tail call i32 @getbits(i32 %107) #6
  %110 = add i32 %109, %102
  %111 = tail call fastcc i32 @get1bit()
  %112 = icmp eq i32 %111, 0
  %113 = sext i32 %110 to i64
  %114 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %113
  %115 = load double, double* %114, align 8
  %116 = fsub double -0.000000e+00, %115
  %.pn197 = select i1 %112, double %115, double %116
  %storemerge196 = fmul double %.3109, %.pn197
  store double %storemerge196, double* %.213, align 8
  br label %128

; <label>:117:                                    ; preds = %._crit_edge285
  %118 = sext i32 %.292 to i64
  %119 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %118
  store i32 %.2100, i32* %119, align 4
  %120 = tail call fastcc i32 @get1bit()
  %121 = icmp eq i32 %120, 0
  %122 = sext i32 %102 to i64
  %123 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %122
  %124 = load double, double* %123, align 8
  %125 = fsub double -0.000000e+00, %124
  %.pn195 = select i1 %121, double %124, double %125
  %storemerge194 = fmul double %.3109, %.pn195
  store double %storemerge194, double* %.213, align 8
  %126 = add nsw i32 %.234.lcssa, -1
  br label %128

; <label>:127:                                    ; preds = %._crit_edge285
  store double 0.000000e+00, double* %.213, align 8
  br label %128

; <label>:128:                                    ; preds = %117, %127, %104
  %.436 = phi i32 [ %108, %104 ], [ %126, %117 ], [ %.234.lcssa, %127 ]
  %129 = sext i32 %.380 to i64
  %130 = getelementptr inbounds double, double* %.213, i64 %129
  %trunc225 = trunc i16 %.lcssa235 to i4
  switch i4 %trunc225, label %144 [
    i4 -1, label %131
    i4 0, label %154
  ]

; <label>:131:                                    ; preds = %128
  %132 = sext i32 %.292 to i64
  %133 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %132
  store i32 %.2100, i32* %133, align 4
  %134 = load i32, i32* %65, align 16
  %.neg232 = add i32 %.436, -1
  %135 = sub i32 %.neg232, %134
  %136 = tail call i32 @getbits(i32 %134) #6
  %137 = add i32 %136, %103
  %138 = tail call fastcc i32 @get1bit()
  %139 = icmp eq i32 %138, 0
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fsub double -0.000000e+00, %142
  %.pn193 = select i1 %139, double %142, double %143
  %storemerge192 = fmul double %.3109, %.pn193
  store double %storemerge192, double* %130, align 8
  br label %155

; <label>:144:                                    ; preds = %128
  %145 = sext i32 %.292 to i64
  %146 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %145
  store i32 %.2100, i32* %146, align 4
  %147 = tail call fastcc i32 @get1bit()
  %148 = icmp eq i32 %147, 0
  %149 = zext i32 %103 to i64
  %150 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %149
  %151 = load double, double* %150, align 8
  %152 = fsub double -0.000000e+00, %151
  %.pn191 = select i1 %148, double %151, double %152
  %storemerge190 = fmul double %.3109, %.pn191
  store double %storemerge190, double* %130, align 8
  %153 = add nsw i32 %.436, -1
  br label %155

; <label>:154:                                    ; preds = %128
  store double 0.000000e+00, double* %130, align 8
  br label %155

; <label>:155:                                    ; preds = %131, %154, %144
  %.638 = phi i32 [ %135, %131 ], [ %153, %144 ], [ %.436, %154 ]
  %156 = getelementptr inbounds double, double* %130, i64 %129
  %157 = add nsw i32 %.0137290, -1
  %158 = add nsw i32 %.2129, -1
  %159 = icmp eq i32 %157, 0
  br i1 %159, label %._crit_edge302.loopexit, label %67

._crit_edge302.loopexit:                          ; preds = %155
  br label %._crit_edge302

._crit_edge302:                                   ; preds = %._crit_edge302.loopexit, %56
  %.1128.lcssa = phi i32 [ %.0127312, %56 ], [ %158, %._crit_edge302.loopexit ]
  %.2118.lcssa = phi i32* [ %.1117313, %56 ], [ %.3119, %._crit_edge302.loopexit ]
  %.1107.lcssa = phi double [ %.0106314, %56 ], [ %.3109, %._crit_edge302.loopexit ]
  %.199.lcssa = phi i32 [ %.098315, %56 ], [ %.2100, %._crit_edge302.loopexit ]
  %.191.lcssa = phi i32 [ %.090316, %56 ], [ %.292, %._crit_edge302.loopexit ]
  %.178.lcssa = phi i32 [ %.077317, %56 ], [ %.380, %._crit_edge302.loopexit ]
  %.133.lcssa = phi i32 [ %.032319, %56 ], [ %.638, %._crit_edge302.loopexit ]
  %.112.lcssa = phi double* [ %.011320, %56 ], [ %156, %._crit_edge302.loopexit ]
  %.1.lcssa = phi i32* [ %.02321, %56 ], [ %.3, %._crit_edge302.loopexit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2
  br i1 %exitcond, label %.preheader233, label %56

.preheader.loopexit:                              ; preds = %211
  br label %.preheader

.preheader.loopexit460:                           ; preds = %225
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit460, %.preheader.loopexit, %.preheader233
  %.3130.lcssa = phi i32 [ %.1128.lcssa, %.preheader233 ], [ %.6133, %.preheader.loopexit ], [ %.6133, %.preheader.loopexit460 ]
  %.4120.lcssa = phi i32* [ %.2118.lcssa, %.preheader233 ], [ %.7123, %.preheader.loopexit ], [ %.7123, %.preheader.loopexit460 ]
  %.481.lcssa = phi i32 [ %.178.lcssa, %.preheader233 ], [ %.885, %.preheader.loopexit ], [ %.885, %.preheader.loopexit460 ]
  %.739.lcssa = phi i32 [ %.133.lcssa, %.preheader233 ], [ %.1042261, %.preheader.loopexit ], [ %.1143, %.preheader.loopexit460 ]
  %.314.lcssa = phi double* [ %.112.lcssa, %.preheader233 ], [ %.617, %.preheader.loopexit ], [ %222, %.preheader.loopexit460 ]
  %160 = icmp ult i32* %.4120.lcssa, %.057
  br i1 %160, label %.lr.ph243.preheader, label %._crit_edge244

.lr.ph243.preheader:                              ; preds = %.preheader
  br label %.lr.ph243

; <label>:161:                                    ; preds = %.lr.ph276, %225
  %.4275 = phi i32* [ %.1.lcssa, %.lr.ph276 ], [ %.8, %225 ]
  %.314274 = phi double* [ %.112.lcssa, %.lr.ph276 ], [ %222, %225 ]
  %.030273 = phi i32 [ %22, %.lr.ph276 ], [ %226, %225 ]
  %.739272 = phi i32 [ %.133.lcssa, %.lr.ph276 ], [ %.1143, %225 ]
  %.481271 = phi i32 [ %.178.lcssa, %.lr.ph276 ], [ %.885, %225 ]
  %.393270 = phi i32 [ %.191.lcssa, %.lr.ph276 ], [ %.696, %225 ]
  %.3101269 = phi i32 [ %.199.lcssa, %.lr.ph276 ], [ %.6104, %225 ]
  %.4110268 = phi double [ %.1107.lcssa, %.lr.ph276 ], [ %.8114, %225 ]
  %.4120267 = phi i32* [ %.2118.lcssa, %.lr.ph276 ], [ %.7123, %225 ]
  %.3130266 = phi i32 [ %.1128.lcssa, %.lr.ph276 ], [ %.6133, %225 ]
  %162 = load i32, i32* %54, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [2 x %struct.newhuff], [2 x %struct.newhuff]* @htc, i64 0, i64 %163, i32 1
  %165 = load i16*, i16** %164, align 8
  %166 = load i16, i16* %165, align 2
  %167 = icmp slt i16 %166, 0
  br i1 %167, label %.lr.ph247.preheader, label %._crit_edge248

.lr.ph247.preheader:                              ; preds = %161
  br label %.lr.ph247

.lr.ph247:                                        ; preds = %.lr.ph247.preheader, %171
  %168 = phi i16 [ %178, %171 ], [ %166, %.lr.ph247.preheader ]
  %.1157.pn = phi i16* [ %.1157, %171 ], [ %165, %.lr.ph247.preheader ]
  %.840245 = phi i32 [ %172, %171 ], [ %.739272, %.lr.ph247.preheader ]
  %169 = getelementptr inbounds i16, i16* %.1157.pn, i64 1
  %170 = icmp slt i32 %.840245, 1
  br i1 %170, label %._crit_edge248.loopexit, label %171

; <label>:171:                                    ; preds = %.lr.ph247
  %172 = add nsw i32 %.840245, -1
  %173 = tail call fastcc i32 @get1bit()
  %174 = icmp eq i32 %173, 0
  %175 = sext i16 %168 to i64
  %176 = sub nsw i64 0, %175
  %177 = getelementptr inbounds i16, i16* %169, i64 %176
  %.1157 = select i1 %174, i16* %169, i16* %177
  %178 = load i16, i16* %.1157, align 2
  %179 = icmp slt i16 %178, 0
  br i1 %179, label %.lr.ph247, label %._crit_edge248.loopexit

._crit_edge248.loopexit:                          ; preds = %.lr.ph247, %171
  %.840.lcssa.ph = phi i32 [ %.840245, %.lr.ph247 ], [ %172, %171 ]
  %.0158.ph = phi i16 [ 0, %.lr.ph247 ], [ %178, %171 ]
  br label %._crit_edge248

._crit_edge248:                                   ; preds = %._crit_edge248.loopexit, %161
  %.840.lcssa = phi i32 [ %.739272, %161 ], [ %.840.lcssa.ph, %._crit_edge248.loopexit ]
  %.0158 = phi i16 [ %166, %161 ], [ %.0158.ph, %._crit_edge248.loopexit ]
  %180 = sext i16 %.0158 to i32
  br label %181

; <label>:181:                                    ; preds = %._crit_edge248, %220
  %.5263 = phi i32* [ %.4275, %._crit_edge248 ], [ %.8, %220 ]
  %.415262 = phi double* [ %.314274, %._crit_edge248 ], [ %222, %220 ]
  %.1042261 = phi i32 [ %.840.lcssa, %._crit_edge248 ], [ %.1143, %220 ]
  %.176260 = phi i32 [ 0, %._crit_edge248 ], [ %223, %220 ]
  %.582259 = phi i32 [ %.481271, %._crit_edge248 ], [ %.885, %220 ]
  %.494258 = phi i32 [ %.393270, %._crit_edge248 ], [ %.696, %220 ]
  %.4102257 = phi i32 [ %.3101269, %._crit_edge248 ], [ %.6104, %220 ]
  %.5111256 = phi double [ %.4110268, %._crit_edge248 ], [ %.8114, %220 ]
  %.5121255 = phi i32* [ %.4120267, %._crit_edge248 ], [ %.7123, %220 ]
  %.4131254 = phi i32 [ %.3130266, %._crit_edge248 ], [ %.6133, %220 ]
  %182 = and i32 %.176260, 1
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %207

; <label>:184:                                    ; preds = %181
  %185 = icmp eq i32 %.4131254, 0
  br i1 %185, label %186, label %205

; <label>:186:                                    ; preds = %184
  %187 = getelementptr inbounds i32, i32* %.5121255, i64 1
  %188 = load i32, i32* %.5121255, align 4
  %189 = getelementptr inbounds i32, i32* %.5121255, i64 2
  %190 = load i32, i32* %187, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %191
  %193 = getelementptr inbounds i32, i32* %.5121255, i64 3
  %194 = load i32, i32* %189, align 4
  %195 = getelementptr inbounds i32, i32* %.5121255, i64 4
  %196 = load i32, i32* %193, align 4
  %197 = icmp eq i32 %194, 3
  %198 = sext i32 %194 to i64
  %199 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 16, i64 %198
  %.sink218 = select i1 %197, double** %55, double** %199
  %.683 = select i1 %197, i32 1, i32 3
  %200 = load double*, double** %.sink218, align 8
  %201 = load i32, i32* %.5263, align 4
  %202 = shl i32 %201, %10
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds double, double* %200, i64 %203
  %.6 = getelementptr inbounds i32, i32* %.5263, i64 1
  %.6112 = load double, double* %204, align 8
  br label %205

; <label>:205:                                    ; preds = %184, %186
  %.5132 = phi i32 [ %.4131254, %184 ], [ %188, %186 ]
  %.6122 = phi i32* [ %.5121255, %184 ], [ %195, %186 ]
  %.7113 = phi double [ %.5111256, %184 ], [ %.6112, %186 ]
  %.5103 = phi i32 [ %.4102257, %184 ], [ %196, %186 ]
  %.595 = phi i32 [ %.494258, %184 ], [ %194, %186 ]
  %.784 = phi i32 [ %.582259, %184 ], [ %.683, %186 ]
  %.516 = phi double* [ %.415262, %184 ], [ %192, %186 ]
  %.7 = phi i32* [ %.5263, %184 ], [ %.6, %186 ]
  %206 = add nsw i32 %.5132, -1
  br label %207

; <label>:207:                                    ; preds = %181, %205
  %.6133 = phi i32 [ %.4131254, %181 ], [ %206, %205 ]
  %.7123 = phi i32* [ %.5121255, %181 ], [ %.6122, %205 ]
  %.8114 = phi double [ %.5111256, %181 ], [ %.7113, %205 ]
  %.6104 = phi i32 [ %.4102257, %181 ], [ %.5103, %205 ]
  %.696 = phi i32 [ %.494258, %181 ], [ %.595, %205 ]
  %.885 = phi i32 [ %.582259, %181 ], [ %.784, %205 ]
  %.617 = phi double* [ %.415262, %181 ], [ %.516, %205 ]
  %.8 = phi i32* [ %.5263, %181 ], [ %.7, %205 ]
  %208 = lshr i32 8, %.176260
  %209 = and i32 %208, %180
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %220, label %211

; <label>:211:                                    ; preds = %207
  %212 = sext i32 %.696 to i64
  %213 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %212
  store i32 %.6104, i32* %213, align 4
  %214 = icmp slt i32 %.1042261, 1
  br i1 %214, label %.preheader.loopexit, label %215

; <label>:215:                                    ; preds = %211
  %216 = add nsw i32 %.1042261, -1
  %217 = tail call fastcc i32 @get1bit()
  %218 = icmp eq i32 %217, 0
  %219 = fsub double -0.000000e+00, %.8114
  %storemerge188 = select i1 %218, double %.8114, double %219
  br label %220

; <label>:220:                                    ; preds = %207, %215
  %storemerge189 = phi double [ %storemerge188, %215 ], [ 0.000000e+00, %207 ]
  %.1143 = phi i32 [ %216, %215 ], [ %.1042261, %207 ]
  store double %storemerge189, double* %.617, align 8
  %221 = sext i32 %.885 to i64
  %222 = getelementptr inbounds double, double* %.617, i64 %221
  %223 = add nuw nsw i32 %.176260, 1
  %224 = icmp slt i32 %223, 4
  br i1 %224, label %181, label %225

; <label>:225:                                    ; preds = %220
  %226 = add nsw i32 %.030273, -1
  %227 = icmp sgt i32 %.1143, 0
  %not.224 = icmp ne i32 %226, 0
  %. = and i1 %227, %not.224
  br i1 %., label %161, label %.preheader.loopexit460

.lr.ph243:                                        ; preds = %.lr.ph243.preheader, %239
  %.819242 = phi double* [ %243, %239 ], [ %.314.lcssa, %.lr.ph243.preheader ]
  %.1087241 = phi i32 [ %.1289, %239 ], [ %.481.lcssa, %.lr.ph243.preheader ]
  %.9125240 = phi i32* [ %.10126, %239 ], [ %.4120.lcssa, %.lr.ph243.preheader ]
  %.8135239 = phi i32 [ %240, %239 ], [ %.3130.lcssa, %.lr.ph243.preheader ]
  %228 = icmp eq i32 %.8135239, 0
  br i1 %228, label %229, label %239

; <label>:229:                                    ; preds = %.lr.ph243
  %230 = getelementptr inbounds i32, i32* %.9125240, i64 1
  %231 = load i32, i32* %.9125240, align 4
  %232 = getelementptr inbounds i32, i32* %.9125240, i64 2
  %233 = load i32, i32* %230, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %234
  %236 = load i32, i32* %232, align 4
  %237 = icmp eq i32 %236, 3
  %.219 = select i1 %237, i32 1, i32 3
  %238 = getelementptr inbounds i32, i32* %.9125240, i64 4
  br label %239

; <label>:239:                                    ; preds = %.lr.ph243, %229
  %.9136 = phi i32 [ %.8135239, %.lr.ph243 ], [ %231, %229 ]
  %.10126 = phi i32* [ %.9125240, %.lr.ph243 ], [ %238, %229 ]
  %.1289 = phi i32 [ %.1087241, %.lr.ph243 ], [ %.219, %229 ]
  %.920 = phi double* [ %.819242, %.lr.ph243 ], [ %235, %229 ]
  %240 = add nsw i32 %.9136, -1
  store double 0.000000e+00, double* %.920, align 8
  %241 = sext i32 %.1289 to i64
  %242 = getelementptr inbounds double, double* %.920, i64 %241
  store double 0.000000e+00, double* %242, align 8
  %243 = getelementptr inbounds double, double* %242, i64 %241
  %244 = icmp ult i32* %.10126, %.057
  br i1 %244, label %.lr.ph243, label %._crit_edge244.loopexit

._crit_edge244.loopexit:                          ; preds = %239
  br label %._crit_edge244

._crit_edge244:                                   ; preds = %._crit_edge244.loopexit, %.preheader
  %245 = load i32, i32* %48, align 16
  %246 = add nsw i32 %245, 1
  %247 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 8, i64 0
  store i32 %246, i32* %247, align 8
  %248 = load i32, i32* %47, align 4
  %249 = add nsw i32 %248, 1
  %250 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 8, i64 1
  store i32 %249, i32* %250, align 4
  %251 = load i32, i32* %46, align 8
  %252 = add nsw i32 %251, 1
  %253 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 8, i64 2
  store i32 %252, i32* %253, align 8
  %254 = load i32, i32* %45, align 4
  %255 = add nsw i32 %254, 1
  %256 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 9
  store i32 %255, i32* %256, align 4
  %257 = load i32, i32* %48, align 16
  %258 = load i32, i32* %47, align 4
  %259 = icmp sgt i32 %257, %258
  %260 = select i1 %259, i32 %257, i32 %258
  %261 = load i32, i32* %46, align 8
  %262 = icmp sgt i32 %260, %261
  %263 = select i1 %262, i32 %260, i32 %261
  %264 = add nsw i32 %263, 1
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %269, label %266

; <label>:266:                                    ; preds = %._crit_edge244
  %267 = sext i32 %264 to i64
  %268 = getelementptr inbounds [9 x [14 x i32]], [9 x [14 x i32]]* @shortLimit, i64 0, i64 %49, i64 %267
  br label %443

; <label>:269:                                    ; preds = %._crit_edge244
  %270 = load i32, i32* %45, align 4
  %271 = add nsw i32 %270, 1
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %49, i64 %272
  br label %443

; <label>:274:                                    ; preds = %36
  %275 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 13
  %276 = load i32, i32* %275, align 4
  %277 = icmp ne i32 %276, 0
  %278 = select i1 %277, i32* getelementptr inbounds ([22 x i32], [22 x i32]* @pretab1, i64 0, i64 0), i32* getelementptr inbounds ([22 x i32], [22 x i32]* @pretab2, i64 0, i64 0)
  %279 = sext i32 %3 to i64
  %280 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %279, i64 2
  %281 = load i32*, i32** %280, align 8
  %282 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %286

.preheader234:                                    ; preds = %._crit_edge383
  %283 = icmp sgt i32 %.1446.lcssa, 0
  %not.346 = icmp ne i32 %22, 0
  %.223347 = and i1 %283, %not.346
  br i1 %.223347, label %.lr.ph358, label %._crit_edge359

.lr.ph358:                                        ; preds = %.preheader234
  %284 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 15
  %285 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %378

; <label>:286:                                    ; preds = %._crit_edge383, %274
  %indvars.iv413 = phi i64 [ 0, %274 ], [ %indvars.iv.next414, %._crit_edge383 ]
  %.10402 = phi i32* [ %1, %274 ], [ %.11.lcssa, %._crit_edge383 ]
  %.1021401 = phi double* [ %11, %274 ], [ %.1122.lcssa, %._crit_edge383 ]
  %.1345400 = phi i32 [ %14, %274 ], [ %.1446.lcssa, %._crit_edge383 ]
  %.059399 = phi i32 [ 0, %274 ], [ %.160.lcssa, %._crit_edge383 ]
  %.067398 = phi double [ 0.000000e+00, %274 ], [ %.168.lcssa, %._crit_edge383 ]
  %.0138397 = phi i32* [ %281, %274 ], [ %.1139.lcssa, %._crit_edge383 ]
  %.0148396 = phi i32 [ 0, %274 ], [ %.1149.lcssa, %._crit_edge383 ]
  %.0159395 = phi i32* [ %278, %274 ], [ %.1160.lcssa, %._crit_edge383 ]
  %.0170393 = phi i32 [ -1, %274 ], [ %.1171.lcssa, %._crit_edge383 ]
  %287 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 %indvars.iv413
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 6, i64 %indvars.iv413
  %290 = load i32, i32* %289, align 4
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht, i64 0, i64 %291
  %293 = icmp eq i32 %288, 0
  br i1 %293, label %._crit_edge383, label %.lr.ph382

.lr.ph382:                                        ; preds = %286
  %294 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht, i64 0, i64 %291, i32 1
  %295 = getelementptr inbounds %struct.newhuff, %struct.newhuff* %292, i64 0, i32 0
  %296 = getelementptr inbounds %struct.newhuff, %struct.newhuff* %292, i64 0, i32 0
  %297 = add i32 %288, -1
  %298 = zext i32 %297 to i64
  %299 = shl nuw nsw i64 %298, 1
  br label %300

; <label>:300:                                    ; preds = %.lr.ph382, %374
  %.11380 = phi i32* [ %.10402, %.lr.ph382 ], [ %.12, %374 ]
  %.1122379 = phi double* [ %.1021401, %.lr.ph382 ], [ %.19, %374 ]
  %.1446378 = phi i32 [ %.1345400, %.lr.ph382 ], [ %.1951, %374 ]
  %.058377 = phi i32 [ %288, %.lr.ph382 ], [ %375, %374 ]
  %.160376 = phi i32 [ %.059399, %.lr.ph382 ], [ %376, %374 ]
  %.168375 = phi double [ %.067398, %.lr.ph382 ], [ %.269, %374 ]
  %.1139374 = phi i32* [ %.0138397, %.lr.ph382 ], [ %.2140, %374 ]
  %.1149373 = phi i32 [ %.0148396, %.lr.ph382 ], [ %.2150, %374 ]
  %.1160372 = phi i32* [ %.0159395, %.lr.ph382 ], [ %.2161, %374 ]
  %.1171371 = phi i32 [ %.0170393, %.lr.ph382 ], [ %.5175, %374 ]
  %301 = icmp eq i32 %.160376, 0
  br i1 %301, label %302, label %317

; <label>:302:                                    ; preds = %300
  %303 = getelementptr inbounds i32, i32* %.1139374, i64 1
  %304 = load i32, i32* %.1139374, align 4
  %305 = load double*, double** %282, align 8
  %306 = getelementptr inbounds i32, i32* %.11380, i64 1
  %307 = load i32, i32* %.11380, align 4
  %308 = getelementptr inbounds i32, i32* %.1160372, i64 1
  %309 = load i32, i32* %.1160372, align 4
  %310 = add nsw i32 %309, %307
  %311 = shl i32 %310, %10
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds double, double* %305, i64 %312
  %314 = load double, double* %313, align 8
  %315 = getelementptr inbounds i32, i32* %.1139374, i64 2
  %316 = load i32, i32* %303, align 4
  br label %317

; <label>:317:                                    ; preds = %300, %302
  %.2161 = phi i32* [ %.1160372, %300 ], [ %308, %302 ]
  %.2150 = phi i32 [ %.1149373, %300 ], [ %316, %302 ]
  %.2140 = phi i32* [ %.1139374, %300 ], [ %315, %302 ]
  %.269 = phi double [ %.168375, %300 ], [ %314, %302 ]
  %.261 = phi i32 [ %.160376, %300 ], [ %304, %302 ]
  %.12 = phi i32* [ %.11380, %300 ], [ %306, %302 ]
  %318 = load i16*, i16** %294, align 8
  %319 = load i16, i16* %318, align 2
  %320 = icmp slt i16 %319, 0
  br i1 %320, label %.lr.ph365.preheader, label %._crit_edge366

.lr.ph365.preheader:                              ; preds = %317
  br label %.lr.ph365

.lr.ph365:                                        ; preds = %.lr.ph365.preheader, %.lr.ph365
  %321 = phi i16 [ %329, %.lr.ph365 ], [ %319, %.lr.ph365.preheader ]
  %.110.pn = phi i16* [ %.110, %.lr.ph365 ], [ %318, %.lr.ph365.preheader ]
  %.1547363 = phi i32 [ %328, %.lr.ph365 ], [ %.1446378, %.lr.ph365.preheader ]
  %322 = getelementptr inbounds i16, i16* %.110.pn, i64 1
  %323 = tail call fastcc i32 @get1bit()
  %324 = icmp eq i32 %323, 0
  %325 = sext i16 %321 to i64
  %326 = sub nsw i64 0, %325
  %327 = getelementptr inbounds i16, i16* %322, i64 %326
  %.110 = select i1 %324, i16* %322, i16* %327
  %328 = add nsw i32 %.1547363, -1
  %329 = load i16, i16* %.110, align 2
  %330 = icmp slt i16 %329, 0
  br i1 %330, label %.lr.ph365, label %._crit_edge366.loopexit

._crit_edge366.loopexit:                          ; preds = %.lr.ph365
  br label %._crit_edge366

._crit_edge366:                                   ; preds = %._crit_edge366.loopexit, %317
  %.1547.lcssa = phi i32 [ %.1446378, %317 ], [ %328, %._crit_edge366.loopexit ]
  %.lcssa237 = phi i16 [ %319, %317 ], [ %329, %._crit_edge366.loopexit ]
  %.lcssa236 = sext i16 %.lcssa237 to i32
  %331 = ashr i32 %.lcssa236, 4
  %332 = and i32 %.lcssa236, 15
  switch i32 %331, label %344 [
    i32 15, label %333
    i32 0, label %352
  ]

; <label>:333:                                    ; preds = %._crit_edge366
  %334 = load i32, i32* %296, align 16
  %.neg226 = add i32 %.1547.lcssa, -1
  %335 = sub i32 %.neg226, %334
  %336 = tail call i32 @getbits(i32 %334) #6
  %337 = add i32 %336, %331
  %338 = tail call fastcc i32 @get1bit()
  %339 = icmp eq i32 %338, 0
  %340 = sext i32 %337 to i64
  %341 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %340
  %342 = load double, double* %341, align 8
  %343 = fsub double -0.000000e+00, %342
  %.pn187 = select i1 %339, double %342, double %343
  %storemerge186 = fmul double %.269, %.pn187
  store double %storemerge186, double* %.1122379, align 8
  br label %353

; <label>:344:                                    ; preds = %._crit_edge366
  %345 = tail call fastcc i32 @get1bit()
  %346 = icmp eq i32 %345, 0
  %347 = sext i32 %331 to i64
  %348 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %347
  %349 = load double, double* %348, align 8
  %350 = fsub double -0.000000e+00, %349
  %.pn185 = select i1 %346, double %349, double %350
  %storemerge184 = fmul double %.269, %.pn185
  store double %storemerge184, double* %.1122379, align 8
  %351 = add nsw i32 %.1547.lcssa, -1
  br label %353

; <label>:352:                                    ; preds = %._crit_edge366
  store double 0.000000e+00, double* %.1122379, align 8
  br label %353

; <label>:353:                                    ; preds = %344, %352, %333
  %.3173 = phi i32 [ %.2150, %333 ], [ %.2150, %344 ], [ %.1171371, %352 ]
  %.1749 = phi i32 [ %335, %333 ], [ %351, %344 ], [ %.1547.lcssa, %352 ]
  %.1526 = getelementptr inbounds double, double* %.1122379, i64 1
  %trunc = trunc i16 %.lcssa237 to i4
  switch i4 %trunc, label %365 [
    i4 -1, label %354
    i4 0, label %373
  ]

; <label>:354:                                    ; preds = %353
  %355 = load i32, i32* %295, align 16
  %.neg228 = add i32 %.1749, -1
  %356 = sub i32 %.neg228, %355
  %357 = tail call i32 @getbits(i32 %355) #6
  %358 = add i32 %357, %332
  %359 = tail call fastcc i32 @get1bit()
  %360 = icmp eq i32 %359, 0
  %361 = sext i32 %358 to i64
  %362 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %361
  %363 = load double, double* %362, align 8
  %364 = fsub double -0.000000e+00, %363
  %.pn183 = select i1 %360, double %363, double %364
  %storemerge182 = fmul double %.269, %.pn183
  store double %storemerge182, double* %.1526, align 8
  br label %374

; <label>:365:                                    ; preds = %353
  %366 = tail call fastcc i32 @get1bit()
  %367 = icmp eq i32 %366, 0
  %368 = zext i32 %332 to i64
  %369 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %368
  %370 = load double, double* %369, align 8
  %371 = fsub double -0.000000e+00, %370
  %.pn = select i1 %367, double %370, double %371
  %storemerge181 = fmul double %.269, %.pn
  store double %storemerge181, double* %.1526, align 8
  %372 = add nsw i32 %.1749, -1
  br label %374

; <label>:373:                                    ; preds = %353
  store double 0.000000e+00, double* %.1526, align 8
  br label %374

; <label>:374:                                    ; preds = %354, %373, %365
  %.5175 = phi i32 [ %.2150, %354 ], [ %.2150, %365 ], [ %.3173, %373 ]
  %.1951 = phi i32 [ %356, %354 ], [ %372, %365 ], [ %.1749, %373 ]
  %.19 = getelementptr inbounds double, double* %.1122379, i64 2
  %375 = add nsw i32 %.058377, -1
  %376 = add nsw i32 %.261, -1
  %377 = icmp eq i32 %375, 0
  br i1 %377, label %._crit_edge383.loopexit, label %300

._crit_edge383.loopexit:                          ; preds = %374
  %scevgep = getelementptr double, double* %.1021401, i64 2
  %scevgep412 = getelementptr double, double* %scevgep, i64 %299
  br label %._crit_edge383

._crit_edge383:                                   ; preds = %._crit_edge383.loopexit, %286
  %.1171.lcssa = phi i32 [ %.0170393, %286 ], [ %.5175, %._crit_edge383.loopexit ]
  %.1160.lcssa = phi i32* [ %.0159395, %286 ], [ %.2161, %._crit_edge383.loopexit ]
  %.1149.lcssa = phi i32 [ %.0148396, %286 ], [ %.2150, %._crit_edge383.loopexit ]
  %.1139.lcssa = phi i32* [ %.0138397, %286 ], [ %.2140, %._crit_edge383.loopexit ]
  %.168.lcssa = phi double [ %.067398, %286 ], [ %.269, %._crit_edge383.loopexit ]
  %.160.lcssa = phi i32 [ %.059399, %286 ], [ %376, %._crit_edge383.loopexit ]
  %.1446.lcssa = phi i32 [ %.1345400, %286 ], [ %.1951, %._crit_edge383.loopexit ]
  %.1122.lcssa = phi double* [ %.1021401, %286 ], [ %scevgep412, %._crit_edge383.loopexit ]
  %.11.lcssa = phi i32* [ %.10402, %286 ], [ %.12, %._crit_edge383.loopexit ]
  %indvars.iv.next414 = add nuw nsw i64 %indvars.iv413, 1
  %exitcond415 = icmp eq i64 %indvars.iv.next414, 3
  br i1 %exitcond415, label %.preheader234, label %286

; <label>:378:                                    ; preds = %.lr.ph358, %425
  %.13357 = phi i32* [ %.11.lcssa, %.lr.ph358 ], [ %.15.2, %425 ]
  %.20356 = phi double* [ %.1122.lcssa, %.lr.ph358 ], [ %.23.3, %425 ]
  %.131355 = phi i32 [ %22, %.lr.ph358 ], [ %426, %425 ]
  %.2052354 = phi i32 [ %.1446.lcssa, %.lr.ph358 ], [ %.2456.3, %425 ]
  %.362353 = phi i32 [ %.160.lcssa, %.lr.ph358 ], [ %492, %425 ]
  %.370352 = phi double [ %.168.lcssa, %.lr.ph358 ], [ %.572.2, %425 ]
  %.3141351 = phi i32* [ %.1139.lcssa, %.lr.ph358 ], [ %.5143.2, %425 ]
  %.3151350 = phi i32 [ %.1149.lcssa, %.lr.ph358 ], [ %.5153.2, %425 ]
  %.3162349 = phi i32* [ %.1160.lcssa, %.lr.ph358 ], [ %.5164.2, %425 ]
  %.6176348 = phi i32 [ %.1171.lcssa, %.lr.ph358 ], [ %.8178.3, %425 ]
  %379 = load i32, i32* %284, align 4
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds [2 x %struct.newhuff], [2 x %struct.newhuff]* @htc, i64 0, i64 %380, i32 1
  %382 = load i16*, i16** %381, align 8
  %383 = load i16, i16* %382, align 2
  %384 = icmp slt i16 %383, 0
  br i1 %384, label %.lr.ph329.preheader, label %.loopexit

.lr.ph329.preheader:                              ; preds = %378
  br label %.lr.ph329

.lr.ph329:                                        ; preds = %.lr.ph329.preheader, %388
  %385 = phi i16 [ %395, %388 ], [ %383, %.lr.ph329.preheader ]
  %.18.pn = phi i16* [ %.18, %388 ], [ %382, %.lr.ph329.preheader ]
  %.2153327 = phi i32 [ %389, %388 ], [ %.2052354, %.lr.ph329.preheader ]
  %386 = getelementptr inbounds i16, i16* %.18.pn, i64 1
  %387 = icmp slt i32 %.2153327, 1
  br i1 %387, label %.loopexit.loopexit, label %388

; <label>:388:                                    ; preds = %.lr.ph329
  %389 = add nsw i32 %.2153327, -1
  %390 = tail call fastcc i32 @get1bit()
  %391 = icmp eq i32 %390, 0
  %392 = sext i16 %385 to i64
  %393 = sub nsw i64 0, %392
  %394 = getelementptr inbounds i16, i16* %386, i64 %393
  %.18 = select i1 %391, i16* %386, i16* %394
  %395 = load i16, i16* %.18, align 2
  %396 = icmp slt i16 %395, 0
  br i1 %396, label %.lr.ph329, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph329, %388
  %.2153.lcssa.ph = phi i32 [ %.2153327, %.lr.ph329 ], [ %389, %388 ]
  %.01.ph = phi i16 [ 0, %.lr.ph329 ], [ %395, %388 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %378
  %.2153.lcssa = phi i32 [ %.2052354, %378 ], [ %.2153.lcssa.ph, %.loopexit.loopexit ]
  %.01 = phi i16 [ %383, %378 ], [ %.01.ph, %.loopexit.loopexit ]
  %397 = sext i16 %.01 to i32
  %398 = icmp eq i32 %.362353, 0
  br i1 %398, label %399, label %414

; <label>:399:                                    ; preds = %.loopexit
  %400 = getelementptr inbounds i32, i32* %.3141351, i64 1
  %401 = load i32, i32* %.3141351, align 4
  %402 = getelementptr inbounds i32, i32* %.3141351, i64 2
  %403 = load i32, i32* %400, align 4
  %404 = load double*, double** %285, align 8
  %405 = getelementptr inbounds i32, i32* %.13357, i64 1
  %406 = load i32, i32* %.13357, align 4
  %407 = getelementptr inbounds i32, i32* %.3162349, i64 1
  %408 = load i32, i32* %.3162349, align 4
  %409 = add nsw i32 %408, %406
  %410 = shl i32 %409, %10
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %404, i64 %411
  %413 = load double, double* %412, align 8
  br label %414

; <label>:414:                                    ; preds = %399, %.loopexit
  %.5164 = phi i32* [ %.3162349, %.loopexit ], [ %407, %399 ]
  %.5153 = phi i32 [ %.3151350, %.loopexit ], [ %403, %399 ]
  %.5143 = phi i32* [ %.3141351, %.loopexit ], [ %402, %399 ]
  %.572 = phi double [ %.370352, %.loopexit ], [ %413, %399 ]
  %.564 = phi i32 [ %.362353, %.loopexit ], [ %401, %399 ]
  %.15 = phi i32* [ %.13357, %.loopexit ], [ %405, %399 ]
  %415 = add nsw i32 %.564, -1
  %416 = and i32 %397, 8
  %417 = icmp eq i32 %416, 0
  br i1 %417, label %464, label %418

; <label>:418:                                    ; preds = %414
  %419 = icmp slt i32 %.2153.lcssa, 1
  br i1 %419, label %._crit_edge359.loopexit, label %420

; <label>:420:                                    ; preds = %418
  %421 = add nsw i32 %.2153.lcssa, -1
  %422 = tail call fastcc i32 @get1bit()
  %423 = icmp eq i32 %422, 0
  %424 = fsub double -0.000000e+00, %.572
  %storemerge = select i1 %423, double %.572, double %424
  br label %464

; <label>:425:                                    ; preds = %502, %507
  %storemerge180.3 = phi double [ %storemerge.3, %507 ], [ 0.000000e+00, %502 ]
  %.8178.3 = phi i32 [ %.5153.2, %507 ], [ %.8178.2, %502 ]
  %.2456.3 = phi i32 [ %508, %507 ], [ %.2456.2, %502 ]
  store double %storemerge180.3, double* %.23.2, align 8
  %.23.3 = getelementptr inbounds double, double* %.20356, i64 4
  %426 = add nsw i32 %.131355, -1
  %427 = icmp sgt i32 %.2456.3, 0
  %not. = icmp ne i32 %426, 0
  %.223 = and i1 %427, %not.
  br i1 %.223, label %378, label %._crit_edge359.loopexit

._crit_edge359.loopexit:                          ; preds = %425, %418, %467, %495, %505
  %.6176.lcssa.ph = phi i32 [ %.5153, %418 ], [ %.5153, %467 ], [ %.5153.2, %495 ], [ %.5153.2, %505 ], [ %.8178.3, %425 ]
  %.2052.lcssa.ph = phi i32 [ %.2153.lcssa, %418 ], [ %.2456, %467 ], [ %.2456.1, %495 ], [ %.2456.2, %505 ], [ %.2456.3, %425 ]
  %.20.lcssa.ph = phi double* [ %.20356, %418 ], [ %.23, %467 ], [ %.23.1, %495 ], [ %.23.2, %505 ], [ %.23.3, %425 ]
  br label %._crit_edge359

._crit_edge359:                                   ; preds = %._crit_edge359.loopexit, %.preheader234
  %.6176.lcssa = phi i32 [ %.1171.lcssa, %.preheader234 ], [ %.6176.lcssa.ph, %._crit_edge359.loopexit ]
  %.2052.lcssa = phi i32 [ %.1446.lcssa, %.preheader234 ], [ %.2052.lcssa.ph, %._crit_edge359.loopexit ]
  %.20.lcssa = phi double* [ %.1122.lcssa, %.preheader234 ], [ %.20.lcssa.ph, %._crit_edge359.loopexit ]
  %428 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 32, i64 0
  %429 = ptrtoint double* %428 to i64
  %430 = ptrtoint double* %.20.lcssa to i64
  %431 = sub i64 %429, %430
  %432 = lshr i64 %431, 4
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %._crit_edge326, label %._crit_edge326.loopexit

._crit_edge326.loopexit:                          ; preds = %._crit_edge359
  %.20.lcssa411 = bitcast double* %.20.lcssa to i8*
  %435 = shl nuw i64 %432, 4
  %436 = add i64 %435, 68719476720
  %437 = and i64 %436, 68719476720
  %438 = add nuw nsw i64 %437, 16
  call void @llvm.memset.p0i8.i64(i8* %.20.lcssa411, i8 0, i64 %438, i32 8, i1 false)
  br label %._crit_edge326

._crit_edge326:                                   ; preds = %._crit_edge326.loopexit, %._crit_edge359
  %439 = add nsw i32 %.6176.lcssa, 1
  %440 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 9
  store i32 %439, i32* %440, align 4
  %441 = zext i32 %439 to i64
  %442 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %279, i64 %441
  br label %443

; <label>:443:                                    ; preds = %266, %269, %._crit_edge326
  %.sink222 = phi i32* [ %442, %._crit_edge326 ], [ %268, %266 ], [ %273, %269 ]
  %.26 = phi i32 [ %.2052.lcssa, %._crit_edge326 ], [ %.739.lcssa, %266 ], [ %.739.lcssa, %269 ]
  %444 = load i32, i32* %.sink222, align 4
  %445 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 10
  store i32 %444, i32* %445, align 8
  %446 = icmp sgt i32 %.26, 16
  br i1 %446, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %443
  %447 = add i32 %.26, -17
  %448 = and i32 %447, -16
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.27238 = phi i32 [ %450, %.lr.ph ], [ %.26, %.lr.ph.preheader ]
  %449 = tail call i32 @getbits(i32 16) #6
  %450 = add nsw i32 %.27238, -16
  %451 = icmp sgt i32 %450, 16
  br i1 %451, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %452 = add i32 %.26, -16
  %453 = sub i32 %452, %448
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %443
  %.27.lcssa = phi i32 [ %.26, %443 ], [ %453, %._crit_edge.loopexit ]
  %454 = icmp sgt i32 %.27.lcssa, 0
  br i1 %454, label %455, label %457

; <label>:455:                                    ; preds = %._crit_edge
  %456 = tail call i32 @getbits(i32 %.27.lcssa) #6
  br label %463

; <label>:457:                                    ; preds = %._crit_edge
  %458 = icmp slt i32 %.27.lcssa, 0
  br i1 %458, label %459, label %463

; <label>:459:                                    ; preds = %457
  %460 = sub nsw i32 0, %.27.lcssa
  %461 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %462 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %461, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i32 %460) #8
  br label %463

; <label>:463:                                    ; preds = %455, %457, %459
  %.0 = phi i32 [ 1, %459 ], [ 0, %457 ], [ 0, %455 ]
  ret i32 %.0

; <label>:464:                                    ; preds = %420, %414
  %storemerge180 = phi double [ %storemerge, %420 ], [ 0.000000e+00, %414 ]
  %.8178 = phi i32 [ %.5153, %420 ], [ %.6176348, %414 ]
  %.2456 = phi i32 [ %421, %420 ], [ %.2153.lcssa, %414 ]
  store double %storemerge180, double* %.20356, align 8
  %.23 = getelementptr inbounds double, double* %.20356, i64 1
  %465 = and i32 %397, 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %474, label %467

; <label>:467:                                    ; preds = %464
  %468 = icmp slt i32 %.2456, 1
  br i1 %468, label %._crit_edge359.loopexit, label %469

; <label>:469:                                    ; preds = %467
  %470 = add nsw i32 %.2456, -1
  %471 = tail call fastcc i32 @get1bit()
  %472 = icmp eq i32 %471, 0
  %473 = fsub double -0.000000e+00, %.572
  %storemerge.1 = select i1 %472, double %.572, double %473
  br label %474

; <label>:474:                                    ; preds = %464, %469
  %storemerge180.1 = phi double [ %storemerge.1, %469 ], [ 0.000000e+00, %464 ]
  %.8178.1 = phi i32 [ %.5153, %469 ], [ %.8178, %464 ]
  %.2456.1 = phi i32 [ %470, %469 ], [ %.2456, %464 ]
  store double %storemerge180.1, double* %.23, align 8
  %.23.1 = getelementptr inbounds double, double* %.20356, i64 2
  %475 = icmp eq i32 %415, 0
  br i1 %475, label %476, label %491

; <label>:476:                                    ; preds = %474
  %477 = getelementptr inbounds i32, i32* %.5143, i64 1
  %478 = load i32, i32* %.5143, align 4
  %479 = getelementptr inbounds i32, i32* %.5143, i64 2
  %480 = load i32, i32* %477, align 4
  %481 = load double*, double** %285, align 8
  %482 = getelementptr inbounds i32, i32* %.15, i64 1
  %483 = load i32, i32* %.15, align 4
  %484 = getelementptr inbounds i32, i32* %.5164, i64 1
  %485 = load i32, i32* %.5164, align 4
  %486 = add nsw i32 %485, %483
  %487 = shl i32 %486, %10
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds double, double* %481, i64 %488
  %490 = load double, double* %489, align 8
  br label %491

; <label>:491:                                    ; preds = %474, %476
  %.5164.2 = phi i32* [ %.5164, %474 ], [ %484, %476 ]
  %.5153.2 = phi i32 [ %.5153, %474 ], [ %480, %476 ]
  %.5143.2 = phi i32* [ %.5143, %474 ], [ %479, %476 ]
  %.572.2 = phi double [ %.572, %474 ], [ %490, %476 ]
  %.564.2 = phi i32 [ %415, %474 ], [ %478, %476 ]
  %.15.2 = phi i32* [ %.15, %474 ], [ %482, %476 ]
  %492 = add nsw i32 %.564.2, -1
  %493 = and i32 %397, 2
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %502, label %495

; <label>:495:                                    ; preds = %491
  %496 = icmp slt i32 %.2456.1, 1
  br i1 %496, label %._crit_edge359.loopexit, label %497

; <label>:497:                                    ; preds = %495
  %498 = add nsw i32 %.2456.1, -1
  %499 = tail call fastcc i32 @get1bit()
  %500 = icmp eq i32 %499, 0
  %501 = fsub double -0.000000e+00, %.572.2
  %storemerge.2 = select i1 %500, double %.572.2, double %501
  br label %502

; <label>:502:                                    ; preds = %491, %497
  %storemerge180.2 = phi double [ %storemerge.2, %497 ], [ 0.000000e+00, %491 ]
  %.8178.2 = phi i32 [ %.5153.2, %497 ], [ %.8178.1, %491 ]
  %.2456.2 = phi i32 [ %498, %497 ], [ %.2456.1, %491 ]
  store double %storemerge180.2, double* %.23.1, align 8
  %.23.2 = getelementptr inbounds double, double* %.20356, i64 3
  %503 = and i32 %397, 1
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %425, label %505

; <label>:505:                                    ; preds = %502
  %506 = icmp slt i32 %.2456.2, 1
  br i1 %506, label %._crit_edge359.loopexit, label %507

; <label>:507:                                    ; preds = %505
  %508 = add nsw i32 %.2456.2, -1
  %509 = tail call fastcc i32 @get1bit()
  %510 = icmp eq i32 %509, 0
  %511 = fsub double -0.000000e+00, %.572.2
  %storemerge.3 = select i1 %510, double %.572.2, double %511
  br label %425
}

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc void @III_i_stereo(i32* nocapture readonly, %struct.gr_info_s* nocapture readonly, i32, i32, i32) unnamed_addr #3 {
  %6 = sext i32 %2 to i64
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %3, 0
  %13 = zext i32 %11 to i64
  %pow1_1.sink = select i1 %12, [2 x [16 x double]]* @pow1_1, [2 x [16 x double]]* @pow1_2
  %pow2_1.sink = select i1 %12, [2 x [16 x double]]* @pow2_1, [2 x [16 x double]]* @pow2_2
  %14 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* %pow1_1.sink, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* %pow2_1.sink, i64 0, i64 %13, i64 0
  br label %18

; <label>:16:                                     ; preds = %5
  %17 = icmp eq i32 %3, 0
  %. = select i1 %17, double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_1, i64 0, i64 0), double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_2, i64 0, i64 0)
  %.4 = select i1 %17, double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_1, i64 0, i64 0), double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_2, i64 0, i64 0)
  br label %18

; <label>:18:                                     ; preds = %16, %8
  %.214 = phi double* [ %15, %8 ], [ %., %16 ]
  %.211 = phi double* [ %14, %8 ], [ %.4, %16 ]
  %19 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %161

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %24 = load i32, i32* %23, align 4
  %not. = icmp ne i32 %24, 0
  %.5 = zext i1 %not. to i32
  %25 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 2, i64 12
  %26 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 3, i64 12
  br label %27

; <label>:27:                                     ; preds = %.loopexit9, %22
  %indvars.iv59 = phi i64 [ 0, %22 ], [ %indvars.iv.next60, %.loopexit9 ]
  %indvars.iv55 = phi i32 [ 0, %22 ], [ %indvars.iv.next56, %.loopexit9 ]
  %.11826 = phi i32 [ %.5, %22 ], [ %..118, %.loopexit9 ]
  %28 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 8, i64 %indvars.iv59
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, 3
  %..118 = select i1 %30, i32 0, i32 %.11826
  %31 = icmp slt i32 %29, 12
  br i1 %31, label %.lr.ph21.preheader, label %._crit_edge

.lr.ph21.preheader:                               ; preds = %27
  %32 = sext i32 %29 to i64
  br label %.lr.ph21

.lr.ph21:                                         ; preds = %.loopexit8, %.lr.ph21.preheader
  %indvars.iv52 = phi i64 [ %32, %.lr.ph21.preheader ], [ %indvars.iv.next53, %.loopexit8 ]
  %33 = mul nsw i64 %indvars.iv52, 3
  %34 = add nsw i64 %33, %indvars.iv59
  %35 = load i32, i32* %23, align 4
  %36 = trunc i64 %34 to i32
  %37 = sub i32 %36, %35
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 7
  br i1 %41, label %.loopexit8, label %42

; <label>:42:                                     ; preds = %.lr.ph21
  %43 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 3, i64 %indvars.iv52
  %44 = load i16, i16* %43, align 2
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds double, double* %.211, i64 %45
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds double, double* %.214, i64 %45
  %49 = load double, double* %48, align 8
  %50 = icmp sgt i16 %44, 0
  br i1 %50, label %.lr.ph19.preheader, label %.loopexit8

.lr.ph19.preheader:                               ; preds = %42
  %51 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 2, i64 %indvars.iv52
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = sext i16 %44 to i32
  %55 = add i32 %indvars.iv55, %53
  %56 = sext i32 %55 to i64
  br label %.lr.ph19

.lr.ph19:                                         ; preds = %.lr.ph19.preheader, %.lr.ph19
  %indvars.iv50 = phi i64 [ %56, %.lr.ph19.preheader ], [ %indvars.iv.next51, %.lr.ph19 ]
  %.02018 = phi i32 [ %54, %.lr.ph19.preheader ], [ %62, %.lr.ph19 ]
  %57 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %indvars.iv50
  %58 = load double, double* %57, align 8
  %59 = fmul double %47, %58
  store double %59, double* %57, align 8
  %60 = fmul double %49, %58
  %61 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv50
  store double %60, double* %61, align 8
  %62 = add nsw i32 %.02018, -1
  %indvars.iv.next51 = add nsw i64 %indvars.iv50, 3
  %63 = icmp sgt i32 %.02018, 1
  br i1 %63, label %.lr.ph19, label %.loopexit8.loopexit

.loopexit8.loopexit:                              ; preds = %.lr.ph19
  br label %.loopexit8

.loopexit8:                                       ; preds = %.loopexit8.loopexit, %42, %.lr.ph21
  %indvars.iv.next53 = add nsw i64 %indvars.iv52, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 12
  br i1 %exitcond54, label %._crit_edge.loopexit, label %.lr.ph21

._crit_edge.loopexit:                             ; preds = %.loopexit8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %27
  %64 = add nuw nsw i64 %indvars.iv59, 33
  %65 = load i32, i32* %23, align 4
  %66 = trunc i64 %64 to i32
  %67 = sub i32 %66, %65
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 7
  br i1 %71, label %.loopexit9, label %72

; <label>:72:                                     ; preds = %._crit_edge
  %73 = load i16, i16* %26, align 2
  %74 = sext i32 %70 to i64
  %75 = getelementptr inbounds double, double* %.211, i64 %74
  %76 = load double, double* %75, align 8
  %77 = getelementptr inbounds double, double* %.214, i64 %74
  %78 = load double, double* %77, align 8
  %79 = icmp sgt i16 %73, 0
  br i1 %79, label %.lr.ph25.preheader, label %.loopexit9

.lr.ph25.preheader:                               ; preds = %72
  %80 = sext i16 %73 to i32
  %81 = load i16, i16* %25, align 2
  %82 = sext i16 %81 to i32
  %83 = add i32 %indvars.iv55, %82
  %84 = sext i32 %83 to i64
  br label %.lr.ph25

.lr.ph25:                                         ; preds = %.lr.ph25.preheader, %.lr.ph25
  %indvars.iv57 = phi i64 [ %84, %.lr.ph25.preheader ], [ %indvars.iv.next58, %.lr.ph25 ]
  %.12123 = phi i32 [ %80, %.lr.ph25.preheader ], [ %90, %.lr.ph25 ]
  %85 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %indvars.iv57
  %86 = load double, double* %85, align 8
  %87 = fmul double %76, %86
  store double %87, double* %85, align 8
  %88 = fmul double %78, %86
  %89 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv57
  store double %88, double* %89, align 8
  %90 = add nsw i32 %.12123, -1
  %indvars.iv.next58 = add nsw i64 %indvars.iv57, 3
  %91 = icmp sgt i32 %.12123, 1
  br i1 %91, label %.lr.ph25, label %.loopexit9.loopexit

.loopexit9.loopexit:                              ; preds = %.lr.ph25
  br label %.loopexit9

.loopexit9:                                       ; preds = %.loopexit9.loopexit, %72, %._crit_edge
  %indvars.iv.next60 = add nuw nsw i64 %indvars.iv59, 1
  %indvars.iv.next56 = add nuw nsw i32 %indvars.iv55, 1
  %exitcond61 = icmp eq i64 %indvars.iv.next60, 3
  br i1 %exitcond61, label %92, label %27

; <label>:92:                                     ; preds = %.loopexit9
  %93 = icmp eq i32 %..118, 0
  br i1 %93, label %.loopexit7, label %94

; <label>:94:                                     ; preds = %92
  %95 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 9
  %96 = load i32, i32* %95, align 4
  %97 = icmp slt i32 %96, 8
  br i1 %97, label %.lr.ph16.preheader, label %.loopexit7

.lr.ph16.preheader:                               ; preds = %94
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 0, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = sext i32 %96 to i64
  br label %.lr.ph16

.lr.ph16:                                         ; preds = %.loopexit, %.lr.ph16.preheader
  %indvars.iv46 = phi i64 [ %102, %.lr.ph16.preheader ], [ %indvars.iv.next47, %.loopexit ]
  %.0515 = phi i32 [ %101, %.lr.ph16.preheader ], [ %.27, %.loopexit ]
  %103 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 1, i64 %indvars.iv46
  %104 = load i16, i16* %103, align 2
  %105 = sext i16 %104 to i32
  %106 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv46
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 7
  br i1 %108, label %158, label %109

; <label>:109:                                    ; preds = %.lr.ph16
  %110 = sext i32 %107 to i64
  %111 = getelementptr inbounds double, double* %.211, i64 %110
  %112 = load double, double* %111, align 8
  %113 = getelementptr inbounds double, double* %.214, i64 %110
  %114 = load double, double* %113, align 8
  %115 = icmp sgt i16 %104, 0
  br i1 %115, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %109
  %116 = sext i32 %.0515 to i64
  %117 = xor i32 %105, -1
  %118 = icmp sgt i32 %117, -2
  %smax115 = select i1 %118, i32 %117, i32 -2
  %119 = add nsw i32 %smax115, 1
  %120 = add nsw i32 %119, %105
  %121 = zext i32 %120 to i64
  %122 = add nuw nsw i64 %121, 1
  %min.iters.check116 = icmp ult i64 %122, 2
  br i1 %min.iters.check116, label %.lr.ph.preheader143, label %min.iters.checked117

min.iters.checked117:                             ; preds = %.lr.ph.preheader
  %n.vec119 = and i64 %122, 8589934590
  %cmp.zero120 = icmp eq i64 %n.vec119, 0
  %ind.end125 = add nsw i64 %116, %n.vec119
  %cast.crd127 = trunc i64 %n.vec119 to i32
  %ind.end128 = sub i32 %105, %cast.crd127
  br i1 %cmp.zero120, label %.lr.ph.preheader143, label %vector.ph121

vector.ph121:                                     ; preds = %min.iters.checked117
  %broadcast.splatinsert139 = insertelement <2 x double> undef, double %112, i32 0
  %broadcast.splat140 = shufflevector <2 x double> %broadcast.splatinsert139, <2 x double> undef, <2 x i32> zeroinitializer
  %broadcast.splatinsert141 = insertelement <2 x double> undef, double %114, i32 0
  %broadcast.splat142 = shufflevector <2 x double> %broadcast.splatinsert141, <2 x double> undef, <2 x i32> zeroinitializer
  %123 = add nsw i64 %n.vec119, -2
  %124 = lshr exact i64 %123, 1
  %125 = and i64 %124, 1
  %lcmp.mod = icmp eq i64 %125, 0
  br i1 %lcmp.mod, label %vector.body112.prol.preheader, label %vector.body112.prol.loopexit.unr-lcssa

vector.body112.prol.preheader:                    ; preds = %vector.ph121
  br label %vector.body112.prol

vector.body112.prol:                              ; preds = %vector.body112.prol.preheader
  %126 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %116
  %127 = bitcast double* %126 to <2 x double>*
  %wide.load138.prol = load <2 x double>, <2 x double>* %127, align 8
  %128 = fmul <2 x double> %broadcast.splat140, %wide.load138.prol
  %129 = bitcast double* %126 to <2 x double>*
  store <2 x double> %128, <2 x double>* %129, align 8
  %130 = fmul <2 x double> %broadcast.splat142, %wide.load138.prol
  %131 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %116
  %132 = bitcast double* %131 to <2 x double>*
  store <2 x double> %130, <2 x double>* %132, align 8
  br label %vector.body112.prol.loopexit.unr-lcssa

vector.body112.prol.loopexit.unr-lcssa:           ; preds = %vector.ph121, %vector.body112.prol
  %index122.unr.ph = phi i64 [ 2, %vector.body112.prol ], [ 0, %vector.ph121 ]
  br label %vector.body112.prol.loopexit

vector.body112.prol.loopexit:                     ; preds = %vector.body112.prol.loopexit.unr-lcssa
  %133 = icmp eq i64 %124, 0
  br i1 %133, label %middle.block113, label %vector.ph121.new

vector.ph121.new:                                 ; preds = %vector.body112.prol.loopexit
  br label %vector.body112

vector.body112:                                   ; preds = %vector.body112, %vector.ph121.new
  %index122 = phi i64 [ %index122.unr.ph, %vector.ph121.new ], [ %index.next123.1, %vector.body112 ]
  %134 = add i64 %116, %index122
  %135 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %134
  %136 = bitcast double* %135 to <2 x double>*
  %wide.load138 = load <2 x double>, <2 x double>* %136, align 8
  %137 = fmul <2 x double> %broadcast.splat140, %wide.load138
  %138 = bitcast double* %135 to <2 x double>*
  store <2 x double> %137, <2 x double>* %138, align 8
  %139 = fmul <2 x double> %broadcast.splat142, %wide.load138
  %140 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %134
  %141 = bitcast double* %140 to <2 x double>*
  store <2 x double> %139, <2 x double>* %141, align 8
  %index.next123 = add i64 %index122, 2
  %142 = add i64 %116, %index.next123
  %143 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %142
  %144 = bitcast double* %143 to <2 x double>*
  %wide.load138.1 = load <2 x double>, <2 x double>* %144, align 8
  %145 = fmul <2 x double> %broadcast.splat140, %wide.load138.1
  %146 = bitcast double* %143 to <2 x double>*
  store <2 x double> %145, <2 x double>* %146, align 8
  %147 = fmul <2 x double> %broadcast.splat142, %wide.load138.1
  %148 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %142
  %149 = bitcast double* %148 to <2 x double>*
  store <2 x double> %147, <2 x double>* %149, align 8
  %index.next123.1 = add i64 %index122, 4
  %150 = icmp eq i64 %index.next123.1, %n.vec119
  br i1 %150, label %middle.block113.unr-lcssa, label %vector.body112, !llvm.loop !11

middle.block113.unr-lcssa:                        ; preds = %vector.body112
  br label %middle.block113

middle.block113:                                  ; preds = %vector.body112.prol.loopexit, %middle.block113.unr-lcssa
  %cmp.n129 = icmp eq i64 %122, %n.vec119
  br i1 %cmp.n129, label %.loopexit.loopexit, label %.lr.ph.preheader143

.lr.ph.preheader143:                              ; preds = %middle.block113, %min.iters.checked117, %.lr.ph.preheader
  %indvars.iv.ph = phi i64 [ %116, %min.iters.checked117 ], [ %116, %.lr.ph.preheader ], [ %ind.end125, %middle.block113 ]
  %.0413.ph = phi i32 [ %105, %min.iters.checked117 ], [ %105, %.lr.ph.preheader ], [ %ind.end128, %middle.block113 ]
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader143, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ %indvars.iv.ph, %.lr.ph.preheader143 ]
  %.0413 = phi i32 [ %156, %.lr.ph ], [ %.0413.ph, %.lr.ph.preheader143 ]
  %151 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %indvars.iv
  %152 = load double, double* %151, align 8
  %153 = fmul double %112, %152
  store double %153, double* %151, align 8
  %154 = fmul double %114, %152
  %155 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv
  store double %154, double* %155, align 8
  %156 = add nsw i32 %.0413, -1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %157 = icmp sgt i32 %.0413, 1
  br i1 %157, label %.lr.ph, label %.loopexit.loopexit.loopexit, !llvm.loop !12

; <label>:158:                                    ; preds = %.lr.ph16
  %159 = add nsw i32 %105, %.0515
  br label %.loopexit

.loopexit.loopexit.loopexit:                      ; preds = %.lr.ph
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.loopexit.loopexit.loopexit, %middle.block113
  %indvars.iv.next.lcssa = phi i64 [ %ind.end125, %middle.block113 ], [ %indvars.iv.next, %.loopexit.loopexit.loopexit ]
  %160 = trunc i64 %indvars.iv.next.lcssa to i32
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %109, %158
  %.27 = phi i32 [ %159, %158 ], [ %.0515, %109 ], [ %160, %.loopexit.loopexit ]
  %indvars.iv.next47 = add nsw i64 %indvars.iv46, 1
  %exitcond = icmp eq i64 %indvars.iv.next47, 8
  br i1 %exitcond, label %.loopexit7.loopexit, label %.lr.ph16

; <label>:161:                                    ; preds = %18
  %162 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 9
  %163 = load i32, i32* %162, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 0, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = icmp slt i32 %163, 21
  br i1 %168, label %.lr.ph41.preheader, label %._crit_edge42

.lr.ph41.preheader:                               ; preds = %161
  %169 = sext i32 %163 to i64
  br label %.lr.ph41

.lr.ph41:                                         ; preds = %.loopexit11, %.lr.ph41.preheader
  %indvars.iv66 = phi i64 [ %169, %.lr.ph41.preheader ], [ %indvars.iv.next67, %.loopexit11 ]
  %.0239 = phi i32 [ %167, %.lr.ph41.preheader ], [ %.2, %.loopexit11 ]
  %170 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 1, i64 %indvars.iv66
  %171 = load i16, i16* %170, align 2
  %172 = sext i16 %171 to i32
  %173 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv66
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 7
  br i1 %175, label %225, label %176

; <label>:176:                                    ; preds = %.lr.ph41
  %177 = sext i32 %174 to i64
  %178 = getelementptr inbounds double, double* %.211, i64 %177
  %179 = load double, double* %178, align 8
  %180 = getelementptr inbounds double, double* %.214, i64 %177
  %181 = load double, double* %180, align 8
  %182 = icmp sgt i16 %171, 0
  br i1 %182, label %.lr.ph36.preheader, label %.loopexit11

.lr.ph36.preheader:                               ; preds = %176
  %183 = sext i32 %.0239 to i64
  %184 = xor i32 %172, -1
  %185 = icmp sgt i32 %184, -2
  %smax = select i1 %185, i32 %184, i32 -2
  %186 = add nsw i32 %smax, 1
  %187 = add nsw i32 %186, %172
  %188 = zext i32 %187 to i64
  %189 = add nuw nsw i64 %188, 1
  %min.iters.check = icmp ult i64 %189, 2
  br i1 %min.iters.check, label %.lr.ph36.preheader146, label %min.iters.checked

min.iters.checked:                                ; preds = %.lr.ph36.preheader
  %n.vec = and i64 %189, 8589934590
  %cmp.zero = icmp eq i64 %n.vec, 0
  %ind.end = add nsw i64 %183, %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end72 = sub i32 %172, %cast.crd
  br i1 %cmp.zero, label %.lr.ph36.preheader146, label %vector.ph

vector.ph:                                        ; preds = %min.iters.checked
  %broadcast.splatinsert77 = insertelement <2 x double> undef, double %179, i32 0
  %broadcast.splat78 = shufflevector <2 x double> %broadcast.splatinsert77, <2 x double> undef, <2 x i32> zeroinitializer
  %broadcast.splatinsert79 = insertelement <2 x double> undef, double %181, i32 0
  %broadcast.splat80 = shufflevector <2 x double> %broadcast.splatinsert79, <2 x double> undef, <2 x i32> zeroinitializer
  %190 = add nsw i64 %n.vec, -2
  %191 = lshr exact i64 %190, 1
  %192 = and i64 %191, 1
  %lcmp.mod152 = icmp eq i64 %192, 0
  br i1 %lcmp.mod152, label %vector.body.prol.preheader, label %vector.body.prol.loopexit.unr-lcssa

vector.body.prol.preheader:                       ; preds = %vector.ph
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol.preheader
  %193 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %183
  %194 = bitcast double* %193 to <2 x double>*
  %wide.load.prol = load <2 x double>, <2 x double>* %194, align 8
  %195 = fmul <2 x double> %broadcast.splat78, %wide.load.prol
  %196 = bitcast double* %193 to <2 x double>*
  store <2 x double> %195, <2 x double>* %196, align 8
  %197 = fmul <2 x double> %broadcast.splat80, %wide.load.prol
  %198 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %183
  %199 = bitcast double* %198 to <2 x double>*
  store <2 x double> %197, <2 x double>* %199, align 8
  br label %vector.body.prol.loopexit.unr-lcssa

vector.body.prol.loopexit.unr-lcssa:              ; preds = %vector.ph, %vector.body.prol
  %index.unr.ph = phi i64 [ 2, %vector.body.prol ], [ 0, %vector.ph ]
  br label %vector.body.prol.loopexit

vector.body.prol.loopexit:                        ; preds = %vector.body.prol.loopexit.unr-lcssa
  %200 = icmp eq i64 %191, 0
  br i1 %200, label %middle.block, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.body.prol.loopexit
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ %index.unr.ph, %vector.ph.new ], [ %index.next.1, %vector.body ]
  %201 = add i64 %183, %index
  %202 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %201
  %203 = bitcast double* %202 to <2 x double>*
  %wide.load = load <2 x double>, <2 x double>* %203, align 8
  %204 = fmul <2 x double> %broadcast.splat78, %wide.load
  %205 = bitcast double* %202 to <2 x double>*
  store <2 x double> %204, <2 x double>* %205, align 8
  %206 = fmul <2 x double> %broadcast.splat80, %wide.load
  %207 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %201
  %208 = bitcast double* %207 to <2 x double>*
  store <2 x double> %206, <2 x double>* %208, align 8
  %index.next = add i64 %index, 2
  %209 = add i64 %183, %index.next
  %210 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %209
  %211 = bitcast double* %210 to <2 x double>*
  %wide.load.1 = load <2 x double>, <2 x double>* %211, align 8
  %212 = fmul <2 x double> %broadcast.splat78, %wide.load.1
  %213 = bitcast double* %210 to <2 x double>*
  store <2 x double> %212, <2 x double>* %213, align 8
  %214 = fmul <2 x double> %broadcast.splat80, %wide.load.1
  %215 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %209
  %216 = bitcast double* %215 to <2 x double>*
  store <2 x double> %214, <2 x double>* %216, align 8
  %index.next.1 = add i64 %index, 4
  %217 = icmp eq i64 %index.next.1, %n.vec
  br i1 %217, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !13

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.prol.loopexit, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %189, %n.vec
  br i1 %cmp.n, label %.loopexit11.loopexit, label %.lr.ph36.preheader146

.lr.ph36.preheader146:                            ; preds = %middle.block, %min.iters.checked, %.lr.ph36.preheader
  %indvars.iv64.ph = phi i64 [ %183, %min.iters.checked ], [ %183, %.lr.ph36.preheader ], [ %ind.end, %middle.block ]
  %.0134.ph = phi i32 [ %172, %min.iters.checked ], [ %172, %.lr.ph36.preheader ], [ %ind.end72, %middle.block ]
  br label %.lr.ph36

.lr.ph36:                                         ; preds = %.lr.ph36.preheader146, %.lr.ph36
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %.lr.ph36 ], [ %indvars.iv64.ph, %.lr.ph36.preheader146 ]
  %.0134 = phi i32 [ %223, %.lr.ph36 ], [ %.0134.ph, %.lr.ph36.preheader146 ]
  %218 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %indvars.iv64
  %219 = load double, double* %218, align 8
  %220 = fmul double %179, %219
  store double %220, double* %218, align 8
  %221 = fmul double %181, %219
  %222 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv64
  store double %221, double* %222, align 8
  %223 = add nsw i32 %.0134, -1
  %indvars.iv.next65 = add nsw i64 %indvars.iv64, 1
  %224 = icmp sgt i32 %.0134, 1
  br i1 %224, label %.lr.ph36, label %.loopexit11.loopexit.loopexit, !llvm.loop !14

; <label>:225:                                    ; preds = %.lr.ph41
  %226 = add nsw i32 %172, %.0239
  br label %.loopexit11

.loopexit11.loopexit.loopexit:                    ; preds = %.lr.ph36
  br label %.loopexit11.loopexit

.loopexit11.loopexit:                             ; preds = %.loopexit11.loopexit.loopexit, %middle.block
  %indvars.iv.next65.lcssa = phi i64 [ %ind.end, %middle.block ], [ %indvars.iv.next65, %.loopexit11.loopexit.loopexit ]
  %227 = trunc i64 %indvars.iv.next65.lcssa to i32
  br label %.loopexit11

.loopexit11:                                      ; preds = %.loopexit11.loopexit, %176, %225
  %.2 = phi i32 [ %226, %225 ], [ %.0239, %176 ], [ %227, %.loopexit11.loopexit ]
  %indvars.iv.next67 = add nsw i64 %indvars.iv66, 1
  %exitcond68 = icmp eq i64 %indvars.iv.next67, 21
  br i1 %exitcond68, label %._crit_edge42.loopexit, label %.lr.ph41

._crit_edge42.loopexit:                           ; preds = %.loopexit11
  br label %._crit_edge42

._crit_edge42:                                    ; preds = %._crit_edge42.loopexit, %161
  %.02.lcssa = phi i32 [ %167, %161 ], [ %.2, %._crit_edge42.loopexit ]
  %228 = getelementptr inbounds i32, i32* %0, i64 20
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %229, 7
  br i1 %230, label %.loopexit7, label %231

; <label>:231:                                    ; preds = %._crit_edge42
  %232 = sext i32 %229 to i64
  %233 = getelementptr inbounds double, double* %.211, i64 %232
  %234 = load double, double* %233, align 8
  %235 = getelementptr inbounds double, double* %.214, i64 %232
  %236 = load double, double* %235, align 8
  %237 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %6, i32 1, i64 21
  %238 = load i16, i16* %237, align 2
  %239 = icmp sgt i16 %238, 0
  br i1 %239, label %.lr.ph32.preheader, label %.loopexit7

.lr.ph32.preheader:                               ; preds = %231
  %240 = sext i16 %238 to i32
  %241 = sext i32 %.02.lcssa to i64
  %242 = xor i32 %240, -1
  %243 = icmp sgt i32 %242, -2
  %smax84 = select i1 %243, i32 %242, i32 -2
  %244 = add nsw i32 %smax84, %240
  %245 = add nsw i32 %244, 1
  %246 = zext i32 %245 to i64
  %247 = add nuw nsw i64 %246, 1
  %min.iters.check85 = icmp ult i64 %247, 2
  br i1 %min.iters.check85, label %.lr.ph32.preheader144, label %min.iters.checked86

min.iters.checked86:                              ; preds = %.lr.ph32.preheader
  %n.vec88 = and i64 %247, 8589934590
  %cmp.zero89 = icmp eq i64 %n.vec88, 0
  %ind.end94 = add nsw i64 %241, %n.vec88
  %cast.crd96 = trunc i64 %n.vec88 to i32
  %ind.end97 = sub i32 %240, %cast.crd96
  br i1 %cmp.zero89, label %.lr.ph32.preheader144, label %vector.ph90

vector.ph90:                                      ; preds = %min.iters.checked86
  %broadcast.splatinsert108 = insertelement <2 x double> undef, double %234, i32 0
  %broadcast.splat109 = shufflevector <2 x double> %broadcast.splatinsert108, <2 x double> undef, <2 x i32> zeroinitializer
  %broadcast.splatinsert110 = insertelement <2 x double> undef, double %236, i32 0
  %broadcast.splat111 = shufflevector <2 x double> %broadcast.splatinsert110, <2 x double> undef, <2 x i32> zeroinitializer
  %248 = add nsw i64 %n.vec88, -2
  %249 = lshr exact i64 %248, 1
  %250 = and i64 %249, 1
  %lcmp.mod150 = icmp eq i64 %250, 0
  br i1 %lcmp.mod150, label %vector.body81.prol.preheader, label %vector.body81.prol.loopexit

vector.body81.prol.preheader:                     ; preds = %vector.ph90
  br label %vector.body81.prol

vector.body81.prol:                               ; preds = %vector.body81.prol.preheader
  %251 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %241
  %252 = bitcast double* %251 to <2 x double>*
  %wide.load107.prol = load <2 x double>, <2 x double>* %252, align 8
  %253 = fmul <2 x double> %broadcast.splat109, %wide.load107.prol
  %254 = bitcast double* %251 to <2 x double>*
  store <2 x double> %253, <2 x double>* %254, align 8
  %255 = fmul <2 x double> %broadcast.splat111, %wide.load107.prol
  %256 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %241
  %257 = bitcast double* %256 to <2 x double>*
  store <2 x double> %255, <2 x double>* %257, align 8
  br label %vector.body81.prol.loopexit

vector.body81.prol.loopexit:                      ; preds = %vector.body81.prol, %vector.ph90
  %index91.unr = phi i64 [ 0, %vector.ph90 ], [ 2, %vector.body81.prol ]
  %258 = icmp eq i64 %249, 0
  br i1 %258, label %middle.block82, label %vector.ph90.new

vector.ph90.new:                                  ; preds = %vector.body81.prol.loopexit
  br label %vector.body81

vector.body81:                                    ; preds = %vector.body81, %vector.ph90.new
  %index91 = phi i64 [ %index91.unr, %vector.ph90.new ], [ %index.next92.1, %vector.body81 ]
  %259 = add i64 %241, %index91
  %260 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %259
  %261 = bitcast double* %260 to <2 x double>*
  %wide.load107 = load <2 x double>, <2 x double>* %261, align 8
  %262 = fmul <2 x double> %broadcast.splat109, %wide.load107
  %263 = bitcast double* %260 to <2 x double>*
  store <2 x double> %262, <2 x double>* %263, align 8
  %264 = fmul <2 x double> %broadcast.splat111, %wide.load107
  %265 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %259
  %266 = bitcast double* %265 to <2 x double>*
  store <2 x double> %264, <2 x double>* %266, align 8
  %index.next92 = add i64 %index91, 2
  %267 = add i64 %241, %index.next92
  %268 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %267
  %269 = bitcast double* %268 to <2 x double>*
  %wide.load107.1 = load <2 x double>, <2 x double>* %269, align 8
  %270 = fmul <2 x double> %broadcast.splat109, %wide.load107.1
  %271 = bitcast double* %268 to <2 x double>*
  store <2 x double> %270, <2 x double>* %271, align 8
  %272 = fmul <2 x double> %broadcast.splat111, %wide.load107.1
  %273 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %267
  %274 = bitcast double* %273 to <2 x double>*
  store <2 x double> %272, <2 x double>* %274, align 8
  %index.next92.1 = add i64 %index91, 4
  %275 = icmp eq i64 %index.next92.1, %n.vec88
  br i1 %275, label %middle.block82.unr-lcssa, label %vector.body81, !llvm.loop !15

middle.block82.unr-lcssa:                         ; preds = %vector.body81
  br label %middle.block82

middle.block82:                                   ; preds = %vector.body81.prol.loopexit, %middle.block82.unr-lcssa
  %cmp.n98 = icmp eq i64 %247, %n.vec88
  br i1 %cmp.n98, label %.loopexit7, label %.lr.ph32.preheader144

.lr.ph32.preheader144:                            ; preds = %middle.block82, %min.iters.checked86, %.lr.ph32.preheader
  %indvars.iv62.ph = phi i64 [ %241, %min.iters.checked86 ], [ %241, %.lr.ph32.preheader ], [ %ind.end94, %middle.block82 ]
  %.030.ph = phi i32 [ %240, %min.iters.checked86 ], [ %240, %.lr.ph32.preheader ], [ %ind.end97, %middle.block82 ]
  br label %.lr.ph32

.lr.ph32:                                         ; preds = %.lr.ph32.preheader144, %.lr.ph32
  %indvars.iv62 = phi i64 [ %indvars.iv.next63, %.lr.ph32 ], [ %indvars.iv62.ph, %.lr.ph32.preheader144 ]
  %.030 = phi i32 [ %281, %.lr.ph32 ], [ %.030.ph, %.lr.ph32.preheader144 ]
  %276 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %indvars.iv62
  %277 = load double, double* %276, align 8
  %278 = fmul double %234, %277
  store double %278, double* %276, align 8
  %279 = fmul double %236, %277
  %280 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %indvars.iv62
  store double %279, double* %280, align 8
  %281 = add nsw i32 %.030, -1
  %indvars.iv.next63 = add nsw i64 %indvars.iv62, 1
  %282 = icmp sgt i32 %.030, 1
  br i1 %282, label %.lr.ph32, label %.loopexit7.loopexit145, !llvm.loop !16

.loopexit7.loopexit:                              ; preds = %.loopexit
  br label %.loopexit7

.loopexit7.loopexit145:                           ; preds = %.lr.ph32
  br label %.loopexit7

.loopexit7:                                       ; preds = %.loopexit7.loopexit145, %.loopexit7.loopexit, %middle.block82, %231, %94, %._crit_edge42, %92
  ret void
}

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc void @III_antialias([18 x double]* nocapture, %struct.gr_info_s* nocapture readonly) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %.loopexit, label %.preheader.preheader

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %.loopexit, label %.preheader.preheader

.preheader.preheader:                             ; preds = %6, %10
  %.0214 = phi i32 [ %13, %10 ], [ 1, %6 ]
  %15 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 1, i64 0
  %16 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 0), align 16
  %17 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 0), align 16
  %18 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 1), align 8
  %19 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 1), align 8
  %20 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 2), align 16
  %21 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 2), align 16
  %22 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 3), align 8
  %23 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 3), align 8
  %24 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 4), align 16
  %25 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 4), align 16
  %26 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 5), align 8
  %27 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 5), align 8
  %28 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 6), align 16
  %29 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 6), align 16
  %30 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_cs, i64 0, i64 7), align 8
  %31 = load double, double* getelementptr inbounds ([8 x double], [8 x double]* @aa_ca, i64 0, i64 7), align 8
  br label %32

; <label>:32:                                     ; preds = %32, %.preheader.preheader
  %.0313 = phi i32 [ %112, %32 ], [ %.0214, %.preheader.preheader ]
  %.0412 = phi double* [ %113, %32 ], [ %15, %.preheader.preheader ]
  %33 = getelementptr inbounds double, double* %.0412, i64 -1
  %34 = load double, double* %33, align 8
  %35 = load double, double* %.0412, align 8
  %36 = fmul double %34, %16
  %37 = fmul double %35, %17
  %38 = fsub double %36, %37
  store double %38, double* %33, align 8
  %39 = fmul double %35, %16
  %40 = fmul double %34, %17
  %41 = fadd double %39, %40
  store double %41, double* %.0412, align 8
  %42 = getelementptr inbounds double, double* %.0412, i64 1
  %43 = getelementptr inbounds double, double* %.0412, i64 -2
  %44 = load double, double* %43, align 8
  %45 = load double, double* %42, align 8
  %46 = fmul double %44, %18
  %47 = fmul double %45, %19
  %48 = fsub double %46, %47
  store double %48, double* %43, align 8
  %49 = fmul double %45, %18
  %50 = fmul double %44, %19
  %51 = fadd double %49, %50
  store double %51, double* %42, align 8
  %52 = getelementptr inbounds double, double* %.0412, i64 2
  %53 = getelementptr inbounds double, double* %.0412, i64 -3
  %54 = load double, double* %53, align 8
  %55 = load double, double* %52, align 8
  %56 = fmul double %54, %20
  %57 = fmul double %55, %21
  %58 = fsub double %56, %57
  store double %58, double* %53, align 8
  %59 = fmul double %55, %20
  %60 = fmul double %54, %21
  %61 = fadd double %59, %60
  store double %61, double* %52, align 8
  %62 = getelementptr inbounds double, double* %.0412, i64 3
  %63 = getelementptr inbounds double, double* %.0412, i64 -4
  %64 = load double, double* %63, align 8
  %65 = load double, double* %62, align 8
  %66 = fmul double %64, %22
  %67 = fmul double %65, %23
  %68 = fsub double %66, %67
  store double %68, double* %63, align 8
  %69 = fmul double %65, %22
  %70 = fmul double %64, %23
  %71 = fadd double %69, %70
  store double %71, double* %62, align 8
  %72 = getelementptr inbounds double, double* %.0412, i64 4
  %73 = getelementptr inbounds double, double* %.0412, i64 -5
  %74 = load double, double* %73, align 8
  %75 = load double, double* %72, align 8
  %76 = fmul double %74, %24
  %77 = fmul double %75, %25
  %78 = fsub double %76, %77
  store double %78, double* %73, align 8
  %79 = fmul double %75, %24
  %80 = fmul double %74, %25
  %81 = fadd double %79, %80
  store double %81, double* %72, align 8
  %82 = getelementptr inbounds double, double* %.0412, i64 5
  %83 = getelementptr inbounds double, double* %.0412, i64 -6
  %84 = load double, double* %83, align 8
  %85 = load double, double* %82, align 8
  %86 = fmul double %84, %26
  %87 = fmul double %85, %27
  %88 = fsub double %86, %87
  store double %88, double* %83, align 8
  %89 = fmul double %85, %26
  %90 = fmul double %84, %27
  %91 = fadd double %89, %90
  store double %91, double* %82, align 8
  %92 = getelementptr inbounds double, double* %.0412, i64 6
  %93 = getelementptr inbounds double, double* %.0412, i64 -7
  %94 = load double, double* %93, align 8
  %95 = load double, double* %92, align 8
  %96 = fmul double %94, %28
  %97 = fmul double %95, %29
  %98 = fsub double %96, %97
  store double %98, double* %93, align 8
  %99 = fmul double %95, %28
  %100 = fmul double %94, %29
  %101 = fadd double %99, %100
  store double %101, double* %92, align 8
  %102 = getelementptr inbounds double, double* %.0412, i64 7
  %103 = getelementptr inbounds double, double* %.0412, i64 -8
  %104 = load double, double* %103, align 8
  %105 = load double, double* %102, align 8
  %106 = fmul double %104, %30
  %107 = fmul double %105, %31
  %108 = fsub double %106, %107
  store double %108, double* %103, align 8
  %109 = fmul double %105, %30
  %110 = fmul double %104, %31
  %111 = fadd double %109, %110
  store double %111, double* %102, align 8
  %112 = add nsw i32 %.0313, -1
  %113 = getelementptr inbounds double, double* %.0412, i64 18
  %114 = icmp eq i32 %112, 0
  br i1 %114, label %.loopexit.loopexit, label %32

.loopexit.loopexit:                               ; preds = %32
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %10, %6
  ret void
}

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc void @III_hybrid([18 x double]*, [32 x double]*, i32, %struct.gr_info_s* nocapture readonly) unnamed_addr #3 {
  %5 = getelementptr inbounds [32 x double], [32 x double]* %1, i64 0, i64 0
  %6 = load %struct.mpstr*, %struct.mpstr** @gmp, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 8, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %10, i64 %7, i64 0
  %12 = sub i32 1, %9
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %13, i64 %7, i64 0
  store i32 %12, i32* %8, align 4
  %15 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %3, i64 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

; <label>:18:                                     ; preds = %4
  %19 = getelementptr inbounds [32 x double], [32 x double]* %1, i64 0, i64 2
  %20 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %13, i64 %7, i64 36
  %21 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %10, i64 %7, i64 36
  %22 = getelementptr inbounds [32 x double], [32 x double]* %1, i64 0, i64 1
  %23 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %13, i64 %7, i64 18
  %24 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %6, i64 0, i32 7, i64 %10, i64 %7, i64 18
  %25 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 1, i64 0
  %26 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 0
  tail call fastcc void @dct36(double* %26, double* %11, double* %14, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 0), double* %5)
  tail call fastcc void @dct36(double* %25, double* %24, double* %23, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 0), double* %22)
  br label %27

; <label>:27:                                     ; preds = %4, %18
  %.013 = phi double* [ %19, %18 ], [ %5, %4 ]
  %.07 = phi double* [ %21, %18 ], [ %11, %4 ]
  %.02 = phi double* [ %20, %18 ], [ %14, %4 ]
  %.01 = phi i32 [ 2, %18 ], [ 0, %4 ]
  %28 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %3, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 2
  %31 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %3, i64 0, i32 10
  %32 = load i32, i32* %31, align 8
  %33 = icmp ult i32 %.01, %32
  br i1 %30, label %.preheader19, label %.preheader20

.preheader20:                                     ; preds = %27
  br i1 %33, label %.lr.ph40, label %.preheader18.thread.preheader

.preheader18.thread.preheader:                    ; preds = %.preheader18, %.preheader19, %.preheader20
  %.428.ph = phi i32 [ %.01, %.preheader20 ], [ %.01, %.preheader19 ], [ %39, %.preheader18 ]
  %.4627.ph = phi double* [ %.02, %.preheader20 ], [ %.02, %.preheader19 ], [ %.46.ph, %.preheader18 ]
  %.41126.ph = phi double* [ %.07, %.preheader20 ], [ %.07, %.preheader19 ], [ %.411.ph, %.preheader18 ]
  %.41725.ph = phi double* [ %.013, %.preheader20 ], [ %.013, %.preheader19 ], [ %.417.ph, %.preheader18 ]
  br label %.preheader18.thread

.lr.ph40:                                         ; preds = %.preheader20
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %34, i64 0
  %36 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %34, i64 0
  %37 = zext i32 %.01 to i64
  br label %53

.preheader19:                                     ; preds = %27
  br i1 %33, label %.lr.ph.preheader, label %.preheader18.thread.preheader

.lr.ph.preheader:                                 ; preds = %.preheader19
  %38 = zext i32 %.01 to i64
  br label %.lr.ph

.preheader18.loopexit:                            ; preds = %.lr.ph
  br label %.preheader18

.preheader18.loopexit75:                          ; preds = %53
  br label %.preheader18

.preheader18:                                     ; preds = %.preheader18.loopexit75, %.preheader18.loopexit
  %indvars.iv.next59.lcssa.sink = phi i64 [ %indvars.iv.next, %.preheader18.loopexit ], [ %indvars.iv.next59, %.preheader18.loopexit75 ]
  %.417.ph = phi double* [ %47, %.preheader18.loopexit ], [ %60, %.preheader18.loopexit75 ]
  %.411.ph = phi double* [ %48, %.preheader18.loopexit ], [ %61, %.preheader18.loopexit75 ]
  %.46.ph = phi double* [ %49, %.preheader18.loopexit ], [ %62, %.preheader18.loopexit75 ]
  %39 = trunc i64 %indvars.iv.next59.lcssa.sink to i32
  %40 = icmp slt i32 %39, 32
  br i1 %40, label %.preheader18.thread.preheader, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %38, %.lr.ph.preheader ], [ %indvars.iv.next, %.lr.ph ]
  %.1331 = phi double* [ %.02, %.lr.ph.preheader ], [ %49, %.lr.ph ]
  %.1830 = phi double* [ %.07, %.lr.ph.preheader ], [ %48, %.lr.ph ]
  %.11429 = phi double* [ %.013, %.lr.ph.preheader ], [ %47, %.lr.ph ]
  %41 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 %indvars.iv, i64 0
  tail call fastcc void @dct12(double* %41, double* %.1830, double* %.1331, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 0), double* %.11429)
  %42 = or i64 %indvars.iv, 1
  %43 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 %42, i64 0
  %44 = getelementptr inbounds double, double* %.1830, i64 18
  %45 = getelementptr inbounds double, double* %.1331, i64 18
  %46 = getelementptr inbounds double, double* %.11429, i64 1
  tail call fastcc void @dct12(double* %43, double* %44, double* %45, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 0), double* %46)
  %indvars.iv.next = add i64 %indvars.iv, 2
  %47 = getelementptr inbounds double, double* %.11429, i64 2
  %48 = getelementptr inbounds double, double* %.1830, i64 36
  %49 = getelementptr inbounds double, double* %.1331, i64 36
  %50 = load i32, i32* %31, align 8
  %51 = trunc i64 %indvars.iv.next to i32
  %52 = icmp ult i32 %51, %50
  br i1 %52, label %.lr.ph, label %.preheader18.loopexit

; <label>:53:                                     ; preds = %.lr.ph40, %53
  %indvars.iv58 = phi i64 [ %37, %.lr.ph40 ], [ %indvars.iv.next59, %53 ]
  %.2438 = phi double* [ %.02, %.lr.ph40 ], [ %62, %53 ]
  %.2937 = phi double* [ %.07, %.lr.ph40 ], [ %61, %53 ]
  %.21536 = phi double* [ %.013, %.lr.ph40 ], [ %60, %53 ]
  %54 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 %indvars.iv58, i64 0
  tail call fastcc void @dct36(double* %54, double* %.2937, double* %.2438, double* %35, double* %.21536)
  %55 = or i64 %indvars.iv58, 1
  %56 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 %55, i64 0
  %57 = getelementptr inbounds double, double* %.2937, i64 18
  %58 = getelementptr inbounds double, double* %.2438, i64 18
  %59 = getelementptr inbounds double, double* %.21536, i64 1
  tail call fastcc void @dct36(double* %56, double* %57, double* %58, double* %36, double* %59)
  %indvars.iv.next59 = add i64 %indvars.iv58, 2
  %60 = getelementptr inbounds double, double* %.21536, i64 2
  %61 = getelementptr inbounds double, double* %.2937, i64 36
  %62 = getelementptr inbounds double, double* %.2438, i64 36
  %63 = load i32, i32* %31, align 8
  %64 = trunc i64 %indvars.iv.next59 to i32
  %65 = icmp ult i32 %64, %63
  br i1 %65, label %53, label %.preheader18.loopexit75

.preheader18.thread:                              ; preds = %.preheader18.thread.preheader, %.preheader18.thread
  %.428 = phi i32 [ %171, %.preheader18.thread ], [ %.428.ph, %.preheader18.thread.preheader ]
  %.4627 = phi double* [ %scevgep, %.preheader18.thread ], [ %.4627.ph, %.preheader18.thread.preheader ]
  %.41126 = phi double* [ %scevgep55, %.preheader18.thread ], [ %.41126.ph, %.preheader18.thread.preheader ]
  %.41725 = phi double* [ %172, %.preheader18.thread ], [ %.41725.ph, %.preheader18.thread.preheader ]
  %scevgep = getelementptr double, double* %.4627, i64 18
  %66 = bitcast double* %.41126 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast double* %.41725 to i64*
  store i64 %67, i64* %68, align 8
  store double 0.000000e+00, double* %.4627, align 8
  %69 = getelementptr inbounds double, double* %.4627, i64 1
  %70 = getelementptr inbounds double, double* %.41126, i64 1
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds double, double* %.41725, i64 32
  %74 = bitcast double* %73 to i64*
  store i64 %72, i64* %74, align 8
  store double 0.000000e+00, double* %69, align 8
  %75 = getelementptr inbounds double, double* %.4627, i64 2
  %76 = getelementptr inbounds double, double* %.41126, i64 2
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds double, double* %.41725, i64 64
  %80 = bitcast double* %79 to i64*
  store i64 %78, i64* %80, align 8
  store double 0.000000e+00, double* %75, align 8
  %81 = getelementptr inbounds double, double* %.4627, i64 3
  %82 = getelementptr inbounds double, double* %.41126, i64 3
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds double, double* %.41725, i64 96
  %86 = bitcast double* %85 to i64*
  store i64 %84, i64* %86, align 8
  store double 0.000000e+00, double* %81, align 8
  %87 = getelementptr inbounds double, double* %.4627, i64 4
  %88 = getelementptr inbounds double, double* %.41126, i64 4
  %89 = bitcast double* %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds double, double* %.41725, i64 128
  %92 = bitcast double* %91 to i64*
  store i64 %90, i64* %92, align 8
  store double 0.000000e+00, double* %87, align 8
  %93 = getelementptr inbounds double, double* %.4627, i64 5
  %94 = getelementptr inbounds double, double* %.41126, i64 5
  %95 = bitcast double* %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds double, double* %.41725, i64 160
  %98 = bitcast double* %97 to i64*
  store i64 %96, i64* %98, align 8
  store double 0.000000e+00, double* %93, align 8
  %99 = getelementptr inbounds double, double* %.4627, i64 6
  %100 = getelementptr inbounds double, double* %.41126, i64 6
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds double, double* %.41725, i64 192
  %104 = bitcast double* %103 to i64*
  store i64 %102, i64* %104, align 8
  store double 0.000000e+00, double* %99, align 8
  %105 = getelementptr inbounds double, double* %.4627, i64 7
  %106 = getelementptr inbounds double, double* %.41126, i64 7
  %107 = bitcast double* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds double, double* %.41725, i64 224
  %110 = bitcast double* %109 to i64*
  store i64 %108, i64* %110, align 8
  store double 0.000000e+00, double* %105, align 8
  %111 = getelementptr inbounds double, double* %.4627, i64 8
  %112 = getelementptr inbounds double, double* %.41126, i64 8
  %113 = bitcast double* %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds double, double* %.41725, i64 256
  %116 = bitcast double* %115 to i64*
  store i64 %114, i64* %116, align 8
  store double 0.000000e+00, double* %111, align 8
  %117 = getelementptr inbounds double, double* %.4627, i64 9
  %118 = getelementptr inbounds double, double* %.41126, i64 9
  %119 = bitcast double* %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds double, double* %.41725, i64 288
  %122 = bitcast double* %121 to i64*
  store i64 %120, i64* %122, align 8
  store double 0.000000e+00, double* %117, align 8
  %123 = getelementptr inbounds double, double* %.4627, i64 10
  %124 = getelementptr inbounds double, double* %.41126, i64 10
  %125 = bitcast double* %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = getelementptr inbounds double, double* %.41725, i64 320
  %128 = bitcast double* %127 to i64*
  store i64 %126, i64* %128, align 8
  store double 0.000000e+00, double* %123, align 8
  %129 = getelementptr inbounds double, double* %.4627, i64 11
  %130 = getelementptr inbounds double, double* %.41126, i64 11
  %131 = bitcast double* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds double, double* %.41725, i64 352
  %134 = bitcast double* %133 to i64*
  store i64 %132, i64* %134, align 8
  store double 0.000000e+00, double* %129, align 8
  %135 = getelementptr inbounds double, double* %.4627, i64 12
  %136 = getelementptr inbounds double, double* %.41126, i64 12
  %137 = bitcast double* %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds double, double* %.41725, i64 384
  %140 = bitcast double* %139 to i64*
  store i64 %138, i64* %140, align 8
  store double 0.000000e+00, double* %135, align 8
  %141 = getelementptr inbounds double, double* %.4627, i64 13
  %142 = getelementptr inbounds double, double* %.41126, i64 13
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds double, double* %.41725, i64 416
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 8
  store double 0.000000e+00, double* %141, align 8
  %147 = getelementptr inbounds double, double* %.4627, i64 14
  %148 = getelementptr inbounds double, double* %.41126, i64 14
  %149 = bitcast double* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = getelementptr inbounds double, double* %.41725, i64 448
  %152 = bitcast double* %151 to i64*
  store i64 %150, i64* %152, align 8
  store double 0.000000e+00, double* %147, align 8
  %153 = getelementptr inbounds double, double* %.4627, i64 15
  %154 = getelementptr inbounds double, double* %.41126, i64 15
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds double, double* %.41725, i64 480
  %158 = bitcast double* %157 to i64*
  store i64 %156, i64* %158, align 8
  store double 0.000000e+00, double* %153, align 8
  %159 = getelementptr inbounds double, double* %.4627, i64 16
  %160 = getelementptr inbounds double, double* %.41126, i64 16
  %161 = bitcast double* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds double, double* %.41725, i64 512
  %164 = bitcast double* %163 to i64*
  store i64 %162, i64* %164, align 8
  store double 0.000000e+00, double* %159, align 8
  %165 = getelementptr inbounds double, double* %.4627, i64 17
  %166 = getelementptr inbounds double, double* %.41126, i64 17
  %167 = bitcast double* %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds double, double* %.41725, i64 544
  %170 = bitcast double* %169 to i64*
  store i64 %168, i64* %170, align 8
  store double 0.000000e+00, double* %165, align 8
  %scevgep55 = getelementptr double, double* %.41126, i64 18
  %171 = add nsw i32 %.428, 1
  %172 = getelementptr inbounds double, double* %.41725, i64 1
  %exitcond = icmp eq i32 %171, 32
  br i1 %exitcond, label %._crit_edge.loopexit, label %.preheader18.thread

._crit_edge.loopexit:                             ; preds = %.preheader18.thread
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader18
  ret void
}

declare i32 @synth_1to1_mono(double*, i8*, i32*) local_unnamed_addr #2

declare i32 @synth_1to1(double*, i32, i8*, i32*) local_unnamed_addr #2

declare i32 @getbits(i32) local_unnamed_addr #2

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc i32 @get1bit() unnamed_addr #3 {
  %1 = load i8*, i8** @wordpointer, align 8
  %2 = load i8, i8* %1, align 1
  %3 = zext i8 %2 to i32
  %4 = load i32, i32* @bitindex, align 4
  %5 = shl i32 %3, %4
  %6 = add nsw i32 %4, 1
  %7 = ashr i32 %6, 3
  %8 = load i8*, i8** @wordpointer, align 8
  %9 = sext i32 %7 to i64
  %10 = getelementptr inbounds i8, i8* %8, i64 %9
  store i8* %10, i8** @wordpointer, align 8
  %11 = and i32 %6, 7
  store i32 %11, i32* @bitindex, align 4
  %12 = lshr i32 %5, 7
  %13 = and i32 %12, 1
  ret i32 %13
}

declare i32 @getbits_fast(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #4

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc void @dct36(double*, double* nocapture readonly, double* nocapture, double* readonly, double* nocapture) unnamed_addr #3 {
  %6 = getelementptr inbounds double, double* %0, i64 16
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 17
  %9 = load double, double* %8, align 8
  %10 = fadd double %7, %9
  store double %10, double* %8, align 8
  %11 = getelementptr inbounds double, double* %0, i64 15
  %12 = load double, double* %11, align 8
  %13 = load double, double* %6, align 8
  %14 = fadd double %12, %13
  store double %14, double* %6, align 8
  %15 = getelementptr inbounds double, double* %0, i64 14
  %16 = load double, double* %15, align 8
  %17 = fadd double %12, %16
  store double %17, double* %11, align 8
  %18 = getelementptr inbounds double, double* %0, i64 13
  %19 = load double, double* %18, align 8
  %20 = fadd double %16, %19
  store double %20, double* %15, align 8
  %21 = getelementptr inbounds double, double* %0, i64 12
  %22 = load double, double* %21, align 8
  %23 = fadd double %19, %22
  store double %23, double* %18, align 8
  %24 = getelementptr inbounds double, double* %0, i64 11
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  store double %26, double* %21, align 8
  %27 = getelementptr inbounds double, double* %0, i64 10
  %28 = load double, double* %27, align 8
  %29 = fadd double %25, %28
  store double %29, double* %24, align 8
  %30 = getelementptr inbounds double, double* %0, i64 9
  %31 = load double, double* %30, align 8
  %32 = fadd double %28, %31
  store double %32, double* %27, align 8
  %33 = getelementptr inbounds double, double* %0, i64 8
  %34 = load double, double* %33, align 8
  %35 = fadd double %31, %34
  store double %35, double* %30, align 8
  %36 = getelementptr inbounds double, double* %0, i64 7
  %37 = load double, double* %36, align 8
  %38 = fadd double %34, %37
  store double %38, double* %33, align 8
  %39 = getelementptr inbounds double, double* %0, i64 6
  %40 = load double, double* %39, align 8
  %41 = fadd double %37, %40
  store double %41, double* %36, align 8
  %42 = getelementptr inbounds double, double* %0, i64 5
  %43 = load double, double* %42, align 8
  %44 = fadd double %40, %43
  store double %44, double* %39, align 8
  %45 = getelementptr inbounds double, double* %0, i64 4
  %46 = load double, double* %45, align 8
  %47 = fadd double %43, %46
  store double %47, double* %42, align 8
  %48 = getelementptr inbounds double, double* %0, i64 3
  %49 = load double, double* %48, align 8
  %50 = fadd double %46, %49
  store double %50, double* %45, align 8
  %51 = getelementptr inbounds double, double* %0, i64 2
  %52 = load double, double* %51, align 8
  %53 = fadd double %49, %52
  store double %53, double* %48, align 8
  %54 = getelementptr inbounds double, double* %0, i64 1
  %55 = load double, double* %54, align 8
  %56 = fadd double %52, %55
  store double %56, double* %51, align 8
  %57 = load double, double* %0, align 8
  %58 = fadd double %55, %57
  store double %58, double* %54, align 8
  %59 = load double, double* %11, align 8
  %60 = load double, double* %8, align 8
  %61 = fadd double %59, %60
  store double %61, double* %8, align 8
  %62 = load double, double* %18, align 8
  %63 = fadd double %59, %62
  store double %63, double* %11, align 8
  %64 = load double, double* %24, align 8
  %65 = fadd double %62, %64
  store double %65, double* %18, align 8
  %66 = load double, double* %30, align 8
  %67 = fadd double %64, %66
  store double %67, double* %24, align 8
  %68 = load double, double* %36, align 8
  %69 = fadd double %66, %68
  store double %69, double* %30, align 8
  %70 = load double, double* %42, align 8
  %71 = fadd double %68, %70
  store double %71, double* %36, align 8
  %72 = load double, double* %48, align 8
  %73 = fadd double %70, %72
  store double %73, double* %42, align 8
  %74 = load double, double* %54, align 8
  %75 = fadd double %72, %74
  store double %75, double* %48, align 8
  %76 = load double, double* %39, align 8
  %77 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 3), align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %21, align 8
  %80 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 6), align 16
  %81 = fmul double %79, %80
  %82 = load double, double* %36, align 8
  %83 = fmul double %77, %82
  %84 = load double, double* %18, align 8
  %85 = fmul double %80, %84
  %86 = load double, double* %51, align 8
  %87 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 1), align 8
  %88 = fmul double %86, %87
  %89 = fadd double %78, %88
  %90 = load double, double* %27, align 8
  %91 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 5), align 8
  %92 = fmul double %90, %91
  %93 = fadd double %89, %92
  %94 = load double, double* %15, align 8
  %95 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 7), align 8
  %96 = fmul double %94, %95
  %97 = fadd double %93, %96
  %98 = fmul double %75, %87
  %99 = fadd double %83, %98
  %100 = load double, double* %24, align 8
  %101 = fmul double %91, %100
  %102 = fadd double %99, %101
  %103 = load double, double* %11, align 8
  %104 = fmul double %95, %103
  %105 = fadd double %102, %104
  %106 = load double, double* %0, align 8
  %107 = load double, double* %45, align 8
  %108 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 2), align 16
  %109 = fmul double %107, %108
  %110 = fadd double %106, %109
  %111 = load double, double* %33, align 8
  %112 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 4), align 16
  %113 = fmul double %111, %112
  %114 = fadd double %110, %113
  %115 = fadd double %81, %114
  %116 = load double, double* %6, align 8
  %117 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 8), align 16
  %118 = fmul double %116, %117
  %119 = fadd double %115, %118
  %120 = load double, double* %54, align 8
  %121 = load double, double* %42, align 8
  %122 = fmul double %108, %121
  %123 = fadd double %120, %122
  %124 = load double, double* %30, align 8
  %125 = fmul double %112, %124
  %126 = fadd double %123, %125
  %127 = fadd double %85, %126
  %128 = load double, double* %8, align 8
  %129 = fmul double %117, %128
  %130 = fadd double %129, %127
  %131 = fadd double %97, %119
  %132 = fadd double %105, %130
  %133 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 0), align 16
  %134 = fmul double %133, %132
  %135 = fadd double %131, %134
  %136 = getelementptr inbounds double, double* %3, i64 27
  %137 = load double, double* %136, align 8
  %138 = fmul double %137, %135
  %139 = getelementptr inbounds double, double* %2, i64 9
  store double %138, double* %139, align 8
  %140 = getelementptr inbounds double, double* %3, i64 26
  %141 = load double, double* %140, align 8
  %142 = fmul double %141, %135
  %143 = getelementptr inbounds double, double* %2, i64 8
  store double %142, double* %143, align 8
  %144 = fsub double %131, %134
  %145 = getelementptr inbounds double, double* %1, i64 8
  %146 = load double, double* %145, align 8
  %147 = getelementptr inbounds double, double* %3, i64 8
  %148 = load double, double* %147, align 8
  %149 = fmul double %144, %148
  %150 = fadd double %146, %149
  %151 = getelementptr inbounds double, double* %4, i64 256
  store double %150, double* %151, align 8
  %152 = getelementptr inbounds double, double* %1, i64 9
  %153 = load double, double* %152, align 8
  %154 = getelementptr inbounds double, double* %3, i64 9
  %155 = load double, double* %154, align 8
  %156 = fmul double %144, %155
  %157 = fadd double %153, %156
  %158 = getelementptr inbounds double, double* %4, i64 288
  store double %157, double* %158, align 8
  %159 = fsub double %119, %97
  %160 = fsub double %130, %105
  %161 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 8), align 16
  %162 = fmul double %160, %161
  %163 = fadd double %159, %162
  %164 = getelementptr inbounds double, double* %3, i64 35
  %165 = load double, double* %164, align 8
  %166 = fmul double %165, %163
  %167 = getelementptr inbounds double, double* %2, i64 17
  store double %166, double* %167, align 8
  %168 = getelementptr inbounds double, double* %3, i64 18
  %169 = load double, double* %168, align 8
  %170 = fmul double %163, %169
  store double %170, double* %2, align 8
  %171 = fsub double %159, %162
  %172 = load double, double* %1, align 8
  %173 = load double, double* %3, align 8
  %174 = fmul double %171, %173
  %175 = fadd double %172, %174
  store double %175, double* %4, align 8
  %176 = getelementptr inbounds double, double* %1, i64 17
  %177 = load double, double* %176, align 8
  %178 = getelementptr inbounds double, double* %3, i64 17
  %179 = load double, double* %178, align 8
  %180 = fmul double %171, %179
  %181 = fadd double %177, %180
  %182 = getelementptr inbounds double, double* %4, i64 544
  store double %181, double* %182, align 8
  %183 = load double, double* %51, align 8
  %184 = load double, double* %27, align 8
  %185 = fsub double %183, %184
  %186 = load double, double* %15, align 8
  %187 = fsub double %185, %186
  %188 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 3), align 8
  %189 = fmul double %187, %188
  %190 = load double, double* %48, align 8
  %191 = load double, double* %24, align 8
  %192 = fsub double %190, %191
  %193 = load double, double* %11, align 8
  %194 = fsub double %192, %193
  %195 = fmul double %188, %194
  %196 = load double, double* %45, align 8
  %197 = load double, double* %33, align 8
  %198 = fsub double %196, %197
  %199 = load double, double* %6, align 8
  %200 = fsub double %198, %199
  %201 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 6), align 16
  %202 = fmul double %200, %201
  %203 = load double, double* %21, align 8
  %204 = fsub double %202, %203
  %205 = load double, double* %0, align 8
  %206 = fadd double %204, %205
  %207 = load double, double* %42, align 8
  %208 = load double, double* %30, align 8
  %209 = fsub double %207, %208
  %210 = load double, double* %8, align 8
  %211 = fsub double %209, %210
  %212 = fmul double %201, %211
  %213 = load double, double* %18, align 8
  %214 = fsub double %212, %213
  %215 = load double, double* %54, align 8
  %216 = fadd double %215, %214
  %217 = fadd double %189, %206
  %218 = fadd double %195, %216
  %219 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 1), align 8
  %220 = fmul double %219, %218
  %221 = fadd double %217, %220
  %222 = getelementptr inbounds double, double* %3, i64 28
  %223 = load double, double* %222, align 8
  %224 = fmul double %223, %221
  %225 = getelementptr inbounds double, double* %2, i64 10
  store double %224, double* %225, align 8
  %226 = getelementptr inbounds double, double* %3, i64 25
  %227 = load double, double* %226, align 8
  %228 = fmul double %227, %221
  %229 = getelementptr inbounds double, double* %2, i64 7
  store double %228, double* %229, align 8
  %230 = fsub double %217, %220
  %231 = getelementptr inbounds double, double* %1, i64 7
  %232 = load double, double* %231, align 8
  %233 = getelementptr inbounds double, double* %3, i64 7
  %234 = load double, double* %233, align 8
  %235 = fmul double %230, %234
  %236 = fadd double %232, %235
  %237 = getelementptr inbounds double, double* %4, i64 224
  store double %236, double* %237, align 8
  %238 = getelementptr inbounds double, double* %1, i64 10
  %239 = load double, double* %238, align 8
  %240 = getelementptr inbounds double, double* %3, i64 10
  %241 = load double, double* %240, align 8
  %242 = fmul double %230, %241
  %243 = fadd double %239, %242
  %244 = getelementptr inbounds double, double* %4, i64 320
  store double %243, double* %244, align 8
  %245 = fsub double %206, %189
  %246 = fsub double %216, %195
  %247 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 7), align 8
  %248 = fmul double %246, %247
  %249 = fadd double %245, %248
  %250 = getelementptr inbounds double, double* %3, i64 34
  %251 = load double, double* %250, align 8
  %252 = fmul double %251, %249
  %253 = getelementptr inbounds double, double* %2, i64 16
  store double %252, double* %253, align 8
  %254 = getelementptr inbounds double, double* %3, i64 19
  %255 = load double, double* %254, align 8
  %256 = fmul double %249, %255
  %257 = getelementptr inbounds double, double* %2, i64 1
  store double %256, double* %257, align 8
  %258 = fsub double %245, %248
  %259 = getelementptr inbounds double, double* %1, i64 1
  %260 = load double, double* %259, align 8
  %261 = getelementptr inbounds double, double* %3, i64 1
  %262 = load double, double* %261, align 8
  %263 = fmul double %258, %262
  %264 = fadd double %260, %263
  %265 = getelementptr inbounds double, double* %4, i64 32
  store double %264, double* %265, align 8
  %266 = getelementptr inbounds double, double* %1, i64 16
  %267 = load double, double* %266, align 8
  %268 = getelementptr inbounds double, double* %3, i64 16
  %269 = load double, double* %268, align 8
  %270 = fmul double %258, %269
  %271 = fadd double %267, %270
  %272 = getelementptr inbounds double, double* %4, i64 512
  store double %271, double* %272, align 8
  %273 = load double, double* %51, align 8
  %274 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 5), align 8
  %275 = fmul double %273, %274
  %276 = fsub double %275, %78
  %277 = load double, double* %27, align 8
  %278 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 7), align 8
  %279 = fmul double %277, %278
  %280 = fsub double %276, %279
  %281 = load double, double* %15, align 8
  %282 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 1), align 8
  %283 = fmul double %281, %282
  %284 = fadd double %280, %283
  %285 = load double, double* %48, align 8
  %286 = fmul double %274, %285
  %287 = fsub double %286, %83
  %288 = load double, double* %24, align 8
  %289 = fmul double %278, %288
  %290 = fsub double %287, %289
  %291 = load double, double* %11, align 8
  %292 = fmul double %282, %291
  %293 = fadd double %290, %292
  %294 = load double, double* %0, align 8
  %295 = load double, double* %45, align 8
  %296 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 8), align 16
  %297 = fmul double %295, %296
  %298 = fsub double %294, %297
  %299 = load double, double* %33, align 8
  %300 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 2), align 16
  %301 = fmul double %299, %300
  %302 = fsub double %298, %301
  %303 = fadd double %81, %302
  %304 = load double, double* %6, align 8
  %305 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 4), align 16
  %306 = fmul double %304, %305
  %307 = fadd double %303, %306
  %308 = load double, double* %54, align 8
  %309 = load double, double* %42, align 8
  %310 = fmul double %296, %309
  %311 = fsub double %308, %310
  %312 = load double, double* %30, align 8
  %313 = fmul double %300, %312
  %314 = fsub double %311, %313
  %315 = fadd double %85, %314
  %316 = load double, double* %8, align 8
  %317 = fmul double %305, %316
  %318 = fadd double %317, %315
  %319 = fadd double %284, %307
  %320 = fadd double %293, %318
  %321 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 2), align 16
  %322 = fmul double %321, %320
  %323 = fadd double %319, %322
  %324 = getelementptr inbounds double, double* %3, i64 29
  %325 = load double, double* %324, align 8
  %326 = fmul double %325, %323
  %327 = getelementptr inbounds double, double* %2, i64 11
  store double %326, double* %327, align 8
  %328 = getelementptr inbounds double, double* %3, i64 24
  %329 = load double, double* %328, align 8
  %330 = fmul double %329, %323
  %331 = getelementptr inbounds double, double* %2, i64 6
  store double %330, double* %331, align 8
  %332 = fsub double %319, %322
  %333 = getelementptr inbounds double, double* %1, i64 6
  %334 = load double, double* %333, align 8
  %335 = getelementptr inbounds double, double* %3, i64 6
  %336 = load double, double* %335, align 8
  %337 = fmul double %332, %336
  %338 = fadd double %334, %337
  %339 = getelementptr inbounds double, double* %4, i64 192
  store double %338, double* %339, align 8
  %340 = getelementptr inbounds double, double* %1, i64 11
  %341 = load double, double* %340, align 8
  %342 = getelementptr inbounds double, double* %3, i64 11
  %343 = load double, double* %342, align 8
  %344 = fmul double %332, %343
  %345 = fadd double %341, %344
  %346 = getelementptr inbounds double, double* %4, i64 352
  store double %345, double* %346, align 8
  %347 = fsub double %307, %284
  %348 = fsub double %318, %293
  %349 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 6), align 16
  %350 = fmul double %348, %349
  %351 = fadd double %347, %350
  %352 = getelementptr inbounds double, double* %3, i64 33
  %353 = load double, double* %352, align 8
  %354 = fmul double %353, %351
  %355 = getelementptr inbounds double, double* %2, i64 15
  store double %354, double* %355, align 8
  %356 = getelementptr inbounds double, double* %3, i64 20
  %357 = load double, double* %356, align 8
  %358 = fmul double %351, %357
  %359 = getelementptr inbounds double, double* %2, i64 2
  store double %358, double* %359, align 8
  %360 = fsub double %347, %350
  %361 = getelementptr inbounds double, double* %1, i64 2
  %362 = load double, double* %361, align 8
  %363 = getelementptr inbounds double, double* %3, i64 2
  %364 = load double, double* %363, align 8
  %365 = fmul double %360, %364
  %366 = fadd double %362, %365
  %367 = getelementptr inbounds double, double* %4, i64 64
  store double %366, double* %367, align 8
  %368 = getelementptr inbounds double, double* %1, i64 15
  %369 = load double, double* %368, align 8
  %370 = getelementptr inbounds double, double* %3, i64 15
  %371 = load double, double* %370, align 8
  %372 = fmul double %360, %371
  %373 = fadd double %369, %372
  %374 = getelementptr inbounds double, double* %4, i64 480
  store double %373, double* %374, align 8
  %375 = load double, double* %51, align 8
  %376 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 7), align 8
  %377 = fmul double %375, %376
  %378 = fsub double %377, %78
  %379 = load double, double* %27, align 8
  %380 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 1), align 8
  %381 = fmul double %379, %380
  %382 = fadd double %378, %381
  %383 = load double, double* %15, align 8
  %384 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 5), align 8
  %385 = fmul double %383, %384
  %386 = fsub double %382, %385
  %387 = load double, double* %48, align 8
  %388 = fmul double %376, %387
  %389 = fsub double %388, %83
  %390 = load double, double* %24, align 8
  %391 = fmul double %380, %390
  %392 = fadd double %389, %391
  %393 = load double, double* %11, align 8
  %394 = fmul double %384, %393
  %395 = fsub double %392, %394
  %396 = load double, double* %0, align 8
  %397 = load double, double* %45, align 8
  %398 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 4), align 16
  %399 = fmul double %397, %398
  %400 = fsub double %396, %399
  %401 = load double, double* %33, align 8
  %402 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 8), align 16
  %403 = fmul double %401, %402
  %404 = fadd double %400, %403
  %405 = fadd double %81, %404
  %406 = load double, double* %6, align 8
  %407 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @COS9, i64 0, i64 2), align 16
  %408 = fmul double %406, %407
  %409 = fsub double %405, %408
  %410 = load double, double* %54, align 8
  %411 = load double, double* %42, align 8
  %412 = fmul double %398, %411
  %413 = fsub double %410, %412
  %414 = load double, double* %30, align 8
  %415 = fmul double %402, %414
  %416 = fadd double %413, %415
  %417 = fadd double %85, %416
  %418 = load double, double* %8, align 8
  %419 = fmul double %407, %418
  %420 = fsub double %417, %419
  %421 = fadd double %386, %409
  %422 = fadd double %395, %420
  %423 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 3), align 8
  %424 = fmul double %423, %422
  %425 = fadd double %421, %424
  %426 = getelementptr inbounds double, double* %3, i64 30
  %427 = load double, double* %426, align 8
  %428 = fmul double %427, %425
  %429 = getelementptr inbounds double, double* %2, i64 12
  store double %428, double* %429, align 8
  %430 = getelementptr inbounds double, double* %3, i64 23
  %431 = load double, double* %430, align 8
  %432 = fmul double %431, %425
  %433 = getelementptr inbounds double, double* %2, i64 5
  store double %432, double* %433, align 8
  %434 = fsub double %421, %424
  %435 = getelementptr inbounds double, double* %1, i64 5
  %436 = load double, double* %435, align 8
  %437 = getelementptr inbounds double, double* %3, i64 5
  %438 = load double, double* %437, align 8
  %439 = fmul double %434, %438
  %440 = fadd double %436, %439
  %441 = getelementptr inbounds double, double* %4, i64 160
  store double %440, double* %441, align 8
  %442 = getelementptr inbounds double, double* %1, i64 12
  %443 = load double, double* %442, align 8
  %444 = getelementptr inbounds double, double* %3, i64 12
  %445 = load double, double* %444, align 8
  %446 = fmul double %434, %445
  %447 = fadd double %443, %446
  %448 = getelementptr inbounds double, double* %4, i64 384
  store double %447, double* %448, align 8
  %449 = fsub double %409, %386
  %450 = fsub double %420, %395
  %451 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 5), align 8
  %452 = fmul double %450, %451
  %453 = fadd double %449, %452
  %454 = getelementptr inbounds double, double* %3, i64 32
  %455 = load double, double* %454, align 8
  %456 = fmul double %455, %453
  %457 = getelementptr inbounds double, double* %2, i64 14
  store double %456, double* %457, align 8
  %458 = getelementptr inbounds double, double* %3, i64 21
  %459 = load double, double* %458, align 8
  %460 = fmul double %453, %459
  %461 = getelementptr inbounds double, double* %2, i64 3
  store double %460, double* %461, align 8
  %462 = fsub double %449, %452
  %463 = getelementptr inbounds double, double* %1, i64 3
  %464 = load double, double* %463, align 8
  %465 = getelementptr inbounds double, double* %3, i64 3
  %466 = load double, double* %465, align 8
  %467 = fmul double %462, %466
  %468 = fadd double %464, %467
  %469 = getelementptr inbounds double, double* %4, i64 96
  store double %468, double* %469, align 8
  %470 = getelementptr inbounds double, double* %1, i64 14
  %471 = load double, double* %470, align 8
  %472 = getelementptr inbounds double, double* %3, i64 14
  %473 = load double, double* %472, align 8
  %474 = fmul double %462, %473
  %475 = fadd double %471, %474
  %476 = getelementptr inbounds double, double* %4, i64 448
  store double %475, double* %476, align 8
  %477 = load double, double* %0, align 8
  %478 = load double, double* %45, align 8
  %479 = fsub double %477, %478
  %480 = load double, double* %33, align 8
  %481 = fadd double %479, %480
  %482 = load double, double* %21, align 8
  %483 = fsub double %481, %482
  %484 = load double, double* %6, align 8
  %485 = fadd double %483, %484
  %486 = load double, double* %54, align 8
  %487 = load double, double* %42, align 8
  %488 = fsub double %486, %487
  %489 = load double, double* %30, align 8
  %490 = fadd double %488, %489
  %491 = load double, double* %18, align 8
  %492 = fsub double %490, %491
  %493 = load double, double* %8, align 8
  %494 = fadd double %492, %493
  %495 = load double, double* getelementptr inbounds ([9 x double], [9 x double]* @tfcos36, i64 0, i64 4), align 16
  %496 = fmul double %494, %495
  %497 = fadd double %485, %496
  %498 = getelementptr inbounds double, double* %3, i64 31
  %499 = load double, double* %498, align 8
  %500 = fmul double %499, %497
  %501 = getelementptr inbounds double, double* %2, i64 13
  store double %500, double* %501, align 8
  %502 = getelementptr inbounds double, double* %3, i64 22
  %503 = load double, double* %502, align 8
  %504 = fmul double %497, %503
  %505 = getelementptr inbounds double, double* %2, i64 4
  store double %504, double* %505, align 8
  %506 = fsub double %485, %496
  %507 = getelementptr inbounds double, double* %1, i64 4
  %508 = load double, double* %507, align 8
  %509 = getelementptr inbounds double, double* %3, i64 4
  %510 = load double, double* %509, align 8
  %511 = fmul double %506, %510
  %512 = fadd double %508, %511
  %513 = getelementptr inbounds double, double* %4, i64 128
  store double %512, double* %513, align 8
  %514 = getelementptr inbounds double, double* %1, i64 13
  %515 = load double, double* %514, align 8
  %516 = getelementptr inbounds double, double* %3, i64 13
  %517 = load double, double* %516, align 8
  %518 = fmul double %506, %517
  %519 = fadd double %515, %518
  %520 = getelementptr inbounds double, double* %4, i64 416
  store double %519, double* %520, align 8
  ret void
}

; Function Attrs: noinline norecurse nounwind uwtable
define internal fastcc void @dct12(double* nocapture readonly, double* nocapture readonly, double*, double* readonly, double*) unnamed_addr #3 {
  %6 = bitcast double* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast double* %4 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds double, double* %1, i64 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds double, double* %4, i64 32
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds double, double* %1, i64 2
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds double, double* %4, i64 64
  %18 = bitcast double* %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds double, double* %1, i64 3
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds double, double* %4, i64 96
  %23 = bitcast double* %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds double, double* %1, i64 4
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds double, double* %4, i64 128
  %28 = bitcast double* %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds double, double* %1, i64 5
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds double, double* %4, i64 160
  %33 = bitcast double* %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds double, double* %0, i64 15
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds double, double* %0, i64 12
  %37 = load double, double* %36, align 8
  %38 = fadd double %35, %37
  %39 = getelementptr inbounds double, double* %0, i64 9
  %40 = load double, double* %39, align 8
  %41 = fadd double %37, %40
  %42 = getelementptr inbounds double, double* %0, i64 6
  %43 = load double, double* %42, align 8
  %44 = fadd double %40, %43
  %45 = getelementptr inbounds double, double* %0, i64 3
  %46 = load double, double* %45, align 8
  %47 = fadd double %43, %46
  %48 = load double, double* %0, align 8
  %49 = fadd double %46, %48
  %50 = fadd double %38, %44
  %51 = fadd double %44, %49
  %52 = load double, double* @COS6_1, align 8
  %53 = fmul double %47, %52
  %54 = fmul double %52, %51
  %55 = fsub double %48, %41
  %56 = fsub double %49, %50
  %57 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 1), align 8
  %58 = fmul double %56, %57
  %59 = fadd double %55, %58
  %60 = fsub double %55, %58
  %61 = getelementptr inbounds double, double* %1, i64 16
  %62 = load double, double* %61, align 8
  %63 = getelementptr inbounds double, double* %3, i64 10
  %64 = load double, double* %63, align 8
  %65 = fmul double %59, %64
  %66 = fadd double %62, %65
  %67 = getelementptr inbounds double, double* %4, i64 512
  store double %66, double* %67, align 8
  %68 = getelementptr inbounds double, double* %1, i64 13
  %69 = load double, double* %68, align 8
  %70 = getelementptr inbounds double, double* %3, i64 7
  %71 = load double, double* %70, align 8
  %72 = fmul double %59, %71
  %73 = fadd double %69, %72
  %74 = getelementptr inbounds double, double* %4, i64 416
  store double %73, double* %74, align 8
  %75 = getelementptr inbounds double, double* %1, i64 7
  %76 = load double, double* %75, align 8
  %77 = getelementptr inbounds double, double* %3, i64 1
  %78 = load double, double* %77, align 8
  %79 = fmul double %60, %78
  %80 = fadd double %76, %79
  %81 = getelementptr inbounds double, double* %4, i64 224
  store double %80, double* %81, align 8
  %82 = getelementptr inbounds double, double* %1, i64 10
  %83 = load double, double* %82, align 8
  %84 = getelementptr inbounds double, double* %3, i64 4
  %85 = load double, double* %84, align 8
  %86 = fmul double %60, %85
  %87 = fadd double %83, %86
  %88 = getelementptr inbounds double, double* %4, i64 320
  store double %87, double* %88, align 8
  %89 = load double, double* @COS6_2, align 8
  %90 = fmul double %41, %89
  %91 = fadd double %48, %90
  %92 = fadd double %53, %91
  %93 = fsub double %91, %53
  %94 = fmul double %50, %89
  %95 = fadd double %49, %94
  %96 = fadd double %54, %95
  %97 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 0), align 16
  %98 = fmul double %97, %96
  %99 = fsub double %95, %54
  %100 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 2), align 16
  %101 = fmul double %100, %99
  %102 = fadd double %92, %98
  %103 = fsub double %92, %98
  %104 = fadd double %93, %101
  %105 = fsub double %93, %101
  %106 = getelementptr inbounds double, double* %1, i64 17
  %107 = load double, double* %106, align 8
  %108 = getelementptr inbounds double, double* %3, i64 11
  %109 = load double, double* %108, align 8
  %110 = fmul double %109, %104
  %111 = fadd double %107, %110
  %112 = getelementptr inbounds double, double* %4, i64 544
  store double %111, double* %112, align 8
  %113 = getelementptr inbounds double, double* %1, i64 12
  %114 = load double, double* %113, align 8
  %115 = getelementptr inbounds double, double* %3, i64 6
  %116 = load double, double* %115, align 8
  %117 = fmul double %104, %116
  %118 = fadd double %114, %117
  %119 = getelementptr inbounds double, double* %4, i64 384
  store double %118, double* %119, align 8
  %120 = getelementptr inbounds double, double* %1, i64 14
  %121 = load double, double* %120, align 8
  %122 = getelementptr inbounds double, double* %3, i64 8
  %123 = load double, double* %122, align 8
  %124 = fmul double %102, %123
  %125 = fadd double %121, %124
  %126 = getelementptr inbounds double, double* %4, i64 448
  store double %125, double* %126, align 8
  %127 = getelementptr inbounds double, double* %1, i64 15
  %128 = load double, double* %127, align 8
  %129 = getelementptr inbounds double, double* %3, i64 9
  %130 = load double, double* %129, align 8
  %131 = fmul double %102, %130
  %132 = fadd double %128, %131
  %133 = getelementptr inbounds double, double* %4, i64 480
  store double %132, double* %133, align 8
  %134 = getelementptr inbounds double, double* %1, i64 6
  %135 = load double, double* %134, align 8
  %136 = load double, double* %3, align 8
  %137 = fmul double %105, %136
  %138 = fadd double %135, %137
  %139 = getelementptr inbounds double, double* %4, i64 192
  store double %138, double* %139, align 8
  %140 = getelementptr inbounds double, double* %1, i64 11
  %141 = load double, double* %140, align 8
  %142 = getelementptr inbounds double, double* %3, i64 5
  %143 = load double, double* %142, align 8
  %144 = fmul double %105, %143
  %145 = fadd double %141, %144
  %146 = getelementptr inbounds double, double* %4, i64 352
  store double %145, double* %146, align 8
  %147 = getelementptr inbounds double, double* %1, i64 8
  %148 = load double, double* %147, align 8
  %149 = getelementptr inbounds double, double* %3, i64 2
  %150 = load double, double* %149, align 8
  %151 = fmul double %103, %150
  %152 = fadd double %148, %151
  %153 = getelementptr inbounds double, double* %4, i64 256
  store double %152, double* %153, align 8
  %154 = getelementptr inbounds double, double* %1, i64 9
  %155 = load double, double* %154, align 8
  %156 = getelementptr inbounds double, double* %3, i64 3
  %157 = load double, double* %156, align 8
  %158 = fmul double %103, %157
  %159 = fadd double %155, %158
  %160 = getelementptr inbounds double, double* %4, i64 288
  store double %159, double* %160, align 8
  %161 = getelementptr inbounds double, double* %0, i64 1
  %162 = getelementptr inbounds double, double* %0, i64 16
  %163 = load double, double* %162, align 8
  %164 = getelementptr inbounds double, double* %0, i64 13
  %165 = load double, double* %164, align 8
  %166 = fadd double %163, %165
  %167 = getelementptr inbounds double, double* %0, i64 10
  %168 = load double, double* %167, align 8
  %169 = fadd double %165, %168
  %170 = getelementptr inbounds double, double* %0, i64 7
  %171 = load double, double* %170, align 8
  %172 = fadd double %168, %171
  %173 = getelementptr inbounds double, double* %0, i64 4
  %174 = load double, double* %173, align 8
  %175 = fadd double %171, %174
  %176 = load double, double* %161, align 8
  %177 = fadd double %174, %176
  %178 = fadd double %166, %172
  %179 = fadd double %172, %177
  %180 = load double, double* @COS6_1, align 8
  %181 = fmul double %175, %180
  %182 = fmul double %180, %179
  %183 = fsub double %176, %169
  %184 = fsub double %177, %178
  %185 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 1), align 8
  %186 = fmul double %184, %185
  %187 = fadd double %183, %186
  %188 = fsub double %183, %186
  %189 = load double, double* %63, align 8
  %190 = fmul double %189, %187
  %191 = getelementptr inbounds double, double* %2, i64 4
  store double %190, double* %191, align 8
  %192 = load double, double* %70, align 8
  %193 = fmul double %187, %192
  %194 = getelementptr inbounds double, double* %2, i64 1
  store double %193, double* %194, align 8
  %195 = load double, double* %77, align 8
  %196 = fmul double %188, %195
  %197 = load double, double* %74, align 8
  %198 = fadd double %197, %196
  store double %198, double* %74, align 8
  %199 = load double, double* %84, align 8
  %200 = fmul double %188, %199
  %201 = load double, double* %67, align 8
  %202 = fadd double %201, %200
  store double %202, double* %67, align 8
  %203 = load double, double* @COS6_2, align 8
  %204 = fmul double %169, %203
  %205 = fadd double %176, %204
  %206 = fadd double %181, %205
  %207 = fsub double %205, %181
  %208 = fmul double %178, %203
  %209 = fadd double %177, %208
  %210 = fadd double %182, %209
  %211 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 0), align 16
  %212 = fmul double %211, %210
  %213 = fsub double %209, %182
  %214 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 2), align 16
  %215 = fmul double %214, %213
  %216 = fadd double %206, %212
  %217 = fsub double %206, %212
  %218 = fadd double %207, %215
  %219 = fsub double %207, %215
  %220 = load double, double* %108, align 8
  %221 = fmul double %220, %218
  %222 = getelementptr inbounds double, double* %2, i64 5
  store double %221, double* %222, align 8
  %223 = load double, double* %115, align 8
  %224 = fmul double %218, %223
  store double %224, double* %2, align 8
  %225 = load double, double* %122, align 8
  %226 = fmul double %216, %225
  %227 = getelementptr inbounds double, double* %2, i64 2
  store double %226, double* %227, align 8
  %228 = load double, double* %129, align 8
  %229 = fmul double %216, %228
  %230 = getelementptr inbounds double, double* %2, i64 3
  store double %229, double* %230, align 8
  %231 = load double, double* %3, align 8
  %232 = fmul double %219, %231
  %233 = load double, double* %119, align 8
  %234 = fadd double %233, %232
  store double %234, double* %119, align 8
  %235 = load double, double* %142, align 8
  %236 = fmul double %219, %235
  %237 = load double, double* %112, align 8
  %238 = fadd double %237, %236
  store double %238, double* %112, align 8
  %239 = load double, double* %149, align 8
  %240 = fmul double %217, %239
  %241 = load double, double* %126, align 8
  %242 = fadd double %241, %240
  store double %242, double* %126, align 8
  %243 = load double, double* %156, align 8
  %244 = fmul double %217, %243
  %245 = load double, double* %133, align 8
  %246 = fadd double %245, %244
  store double %246, double* %133, align 8
  %247 = getelementptr inbounds double, double* %0, i64 2
  %248 = getelementptr inbounds double, double* %2, i64 12
  %249 = getelementptr inbounds double, double* %0, i64 17
  %250 = bitcast double* %248 to i8*
  call void @llvm.memset.p0i8.i64(i8* %250, i8 0, i64 48, i32 8, i1 false)
  %251 = load double, double* %249, align 8
  %252 = getelementptr inbounds double, double* %0, i64 14
  %253 = load double, double* %252, align 8
  %254 = fadd double %251, %253
  %255 = getelementptr inbounds double, double* %0, i64 11
  %256 = load double, double* %255, align 8
  %257 = fadd double %253, %256
  %258 = getelementptr inbounds double, double* %0, i64 8
  %259 = load double, double* %258, align 8
  %260 = fadd double %256, %259
  %261 = getelementptr inbounds double, double* %0, i64 5
  %262 = load double, double* %261, align 8
  %263 = fadd double %259, %262
  %264 = load double, double* %247, align 8
  %265 = fadd double %262, %264
  %266 = fadd double %254, %260
  %267 = fadd double %260, %265
  %268 = load double, double* @COS6_1, align 8
  %269 = fmul double %263, %268
  %270 = fmul double %268, %267
  %271 = fsub double %264, %257
  %272 = fsub double %265, %266
  %273 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 1), align 8
  %274 = fmul double %272, %273
  %275 = fadd double %271, %274
  %276 = fsub double %271, %274
  %277 = load double, double* %63, align 8
  %278 = fmul double %277, %275
  %279 = getelementptr inbounds double, double* %2, i64 10
  store double %278, double* %279, align 8
  %280 = load double, double* %70, align 8
  %281 = fmul double %275, %280
  %282 = getelementptr inbounds double, double* %2, i64 7
  store double %281, double* %282, align 8
  %283 = load double, double* %77, align 8
  %284 = fmul double %276, %283
  %285 = load double, double* %194, align 8
  %286 = fadd double %285, %284
  store double %286, double* %194, align 8
  %287 = load double, double* %84, align 8
  %288 = fmul double %276, %287
  %289 = load double, double* %191, align 8
  %290 = fadd double %289, %288
  store double %290, double* %191, align 8
  %291 = load double, double* @COS6_2, align 8
  %292 = fmul double %257, %291
  %293 = fadd double %264, %292
  %294 = fadd double %269, %293
  %295 = fsub double %293, %269
  %296 = fmul double %266, %291
  %297 = fadd double %265, %296
  %298 = fadd double %270, %297
  %299 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 0), align 16
  %300 = fmul double %299, %298
  %301 = fsub double %297, %270
  %302 = load double, double* getelementptr inbounds ([3 x double], [3 x double]* @tfcos12, i64 0, i64 2), align 16
  %303 = fmul double %302, %301
  %304 = fadd double %294, %300
  %305 = fsub double %294, %300
  %306 = fadd double %295, %303
  %307 = fsub double %295, %303
  %308 = load double, double* %108, align 8
  %309 = fmul double %308, %306
  %310 = getelementptr inbounds double, double* %2, i64 11
  store double %309, double* %310, align 8
  %311 = load double, double* %115, align 8
  %312 = fmul double %306, %311
  %313 = getelementptr inbounds double, double* %2, i64 6
  store double %312, double* %313, align 8
  %314 = load double, double* %122, align 8
  %315 = fmul double %304, %314
  %316 = getelementptr inbounds double, double* %2, i64 8
  store double %315, double* %316, align 8
  %317 = load double, double* %129, align 8
  %318 = fmul double %304, %317
  %319 = getelementptr inbounds double, double* %2, i64 9
  store double %318, double* %319, align 8
  %320 = load double, double* %3, align 8
  %321 = fmul double %307, %320
  %322 = load double, double* %2, align 8
  %323 = fadd double %322, %321
  store double %323, double* %2, align 8
  %324 = load double, double* %142, align 8
  %325 = fmul double %307, %324
  %326 = load double, double* %222, align 8
  %327 = fadd double %326, %325
  store double %327, double* %222, align 8
  %328 = load double, double* %149, align 8
  %329 = fmul double %305, %328
  %330 = load double, double* %227, align 8
  %331 = fadd double %330, %329
  store double %331, double* %227, align 8
  %332 = load double, double* %156, align 8
  %333 = fmul double %305, %332
  %334 = load double, double* %230, align 8
  %335 = fadd double %334, %333
  store double %335, double* %230, align 8
  ret void
}

; Function Attrs: nounwind readnone
declare double @llvm.exp2.f64(double) #5

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #7

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }
attributes #7 = { argmemonly nounwind }
attributes #8 = { cold }
attributes #9 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
!1 = !{!"branch_weights", i32 1, i32 2000}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !7, !8}
!7 = !{!"llvm.loop.vectorize.width", i32 1}
!8 = !{!"llvm.loop.interleave.count", i32 1}
!9 = distinct !{!9, !10, !7, !8}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !7, !8}
!12 = distinct !{!12, !10, !7, !8}
!13 = distinct !{!13, !7, !8}
!14 = distinct !{!14, !10, !7, !8}
!15 = distinct !{!15, !7, !8}
!16 = distinct !{!16, !10, !7, !8}
